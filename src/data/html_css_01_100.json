[
    {
        "id": 1,
        "question": "What is the difference between HTML tags and elements?",
        "solution": "```html\n<h1>Heading 1</h1>\n```\n\n**Solution:**\nHTML elements are defined by a starting tag, content, and a closing tag. In the example above, `<h1>Heading 1</h1>` is an element, while `<h1>` is the starting tag and `</h1>` is the closing tag. Tags are the markup that define the element boundaries, while elements include the tags plus any content between them.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 2,
        "question": "How do you define tags and attributes in HTML?",
        "solution": "```html\n<p align=\"center\">Interview questions</p>\n<img src=\"image.jpg\" alt=\"description\" width=\"300\">\n<a href=\"https://example.com\" target=\"_blank\">Click here</a>\n```\n\n**Solution:**\nTags define how content is formatted and are enclosed in angle brackets. Attributes provide additional properties for tags and are written as name-value pairs inside the opening tag. In the examples, `align`, `src`, `alt`, `width`, `href`, and `target` are all attributes that modify the behavior or appearance of their respective elements.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 3,
        "question": "What are void elements in HTML and provide examples?",
        "solution": "```html\n<br>\n<img src=\"image.jpg\" alt=\"description\">\n<hr>\n<input type=\"text\">\n<meta charset=\"UTF-8\">\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n**Solution:**\nVoid elements (also known as empty elements) are HTML elements that do not have closing tags because they don't contain content. They are self-closing and include elements like `<br>` for line breaks, `<img>` for images, `<hr>` for horizontal rules, `<input>` for form inputs, `<meta>` for metadata, and `<link>` for external resources.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 4,
        "question": "What is the advantage of collapsing white space in HTML?",
        "solution": "```html\n<p>\n  This text has\n  multiple spaces and newlines,\n  but it will render as a single line.\n</p>\n\n<!-- Output: This text has multiple spaces and newlines, but it will render as a single line. -->\n```\n\n**Solution:**\nBrowsers collapse multiple whitespace characters (spaces, newlines, tabs) into a single space character. This allows developers to indent and format their HTML code for better readability without affecting the final rendered output. It enables clean, well-structured code while maintaining consistent visual presentation regardless of the source formatting.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 5,
        "question": "How do you display reserved characters in HTML using entities?",
        "solution": "```html\n<!-- To display \"<h1>\" as text -->\n<p>&lt;h1&gt; is a tag.</p>\n\n<!-- To display \"Ben & Jerry's\" -->\n<p>Ben &amp; Jerry's</p>\n\n<!-- To display quotes -->\n<p>He said &quot;Hello&quot; to me.</p>\n\n<!-- Non-breaking space -->\n<p>Word1&nbsp;&nbsp;&nbsp;Word2</p>\n```\n\n**Solution:**\nReserved characters in HTML must be replaced with character entities to be displayed correctly. Common entities include `&lt;` for `<`, `&gt;` for `>`, `&amp;` for `&`, `&quot;` for `\"`, `&apos;` for `'`, and `&nbsp;` for non-breaking spaces. You can also use numeric entities like `&#60;` for `<`. These prevent browsers from interpreting the characters as HTML markup.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 6,
        "question": "What are the different types of lists in HTML?",
        "solution": "```html\n<!-- Ordered List -->\n<ol>\n  <li>First item</li>\n  <li>Second item</li>\n</ol>\n\n<!-- Unordered List -->\n<ul>\n  <li>Bullet point 1</li>\n  <li>Bullet point 2</li>\n</ul>\n\n<!-- Definition List -->\n<dl>\n  <dt>HTML</dt>\n  <dd>HyperText Markup Language</dd>\n  <dt>CSS</dt>\n  <dd>Cascading Style Sheets</dd>\n</dl>\n```\n\n**Solution:**\nHTML supports three types of lists: **Ordered Lists** (`<ol>`) create numbered lists, **Unordered Lists** (`<ul>`) create bulleted lists, and **Definition Lists** (`<dl>`) create lists of terms (`<dt>`) and their definitions (`<dd>`). Each list item in ordered and unordered lists uses the `<li>` tag. Definition lists are useful for glossaries, dictionaries, or any term-definition pairs.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 7,
        "question": "How do you use the 'class' attribute in HTML?",
        "solution": "```html\n<p class=\"highlight important\">This paragraph is highlighted and important.</p>\n<div class=\"container\">\n  <span class=\"highlight\">This span is also highlighted</span>\n</div>\n\n<style>\n.highlight { background-color: yellow; }\n.important { font-weight: bold; }\n.container { padding: 20px; }\n</style>\n```\n\n**Solution:**\nThe `class` attribute specifies one or more class names for an element, which are used to target elements with CSS for styling or with JavaScript for manipulation. Multiple classes can be applied to a single element by separating them with spaces. Classes are reusable across multiple elements and are the primary way to apply consistent styling to groups of elements.",
        "difficulty": "Easy",
        "category": "Attributes and Structure",
        "type": "HTML"
    },
    {
        "id": 8,
        "question": "What is the difference between 'id' and 'class' attributes?",
        "solution": "```html\n<!-- 'id' is unique -->\n<div id=\"main-header\">\n  <h1>Welcome</h1>\n</div>\n\n<!-- 'class' can be reused -->\n<p class=\"highlight-text\">This is an important paragraph.</p>\n<span class=\"highlight-text\">This is an important note.</span>\n\n<script>\n// JavaScript can target by ID\ndocument.getElementById('main-header').style.color = 'blue';\n\n// CSS can target both\n#main-header { background: #f0f0f0; }\n.highlight-text { color: red; }\n</script>\n```\n\n**Solution:**\nThe `class` attribute can be used on multiple elements and is primarily for applying CSS styles to groups of elements. The `id` attribute must be unique within the entire HTML page and is used to target a single, specific element for CSS styling or JavaScript manipulation. IDs have higher CSS specificity than classes and are commonly used with `document.getElementById()` in JavaScript.",
        "difficulty": "Medium",
        "category": "Attributes and Structure",
        "type": "HTML"
    },
    {
        "id": 9,
        "question": "How do you create a form with file upload using multipart form data?",
        "solution": "```html\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\" required>\n  \n  <label for=\"avatar\">Profile Picture:</label>\n  <input type=\"file\" id=\"avatar\" name=\"avatar\" accept=\"image/*\">\n  \n  <label for=\"document\">Document:</label>\n  <input type=\"file\" id=\"document\" name=\"document\" accept=\".pdf,.doc,.docx\">\n  \n  <input type=\"submit\" value=\"Upload\">\n</form>\n```\n\n**Solution:**\nThe `enctype=\"multipart/form-data\"` attribute is required when a form includes file uploads using `<input type=\"file\">`. This encoding type ensures that form data is sent in multiple parts, with file data included as binary attachments. Without this encoding type, file uploads will not work properly. The `accept` attribute can be used to restrict file types that users can select.",
        "difficulty": "Medium",
        "category": "Forms",
        "type": "HTML"
    },
    {
        "id": 10,
        "question": "How do you create a semantic HTML5 layout structure?",
        "solution": "```html\n<body>\n  <header>\n    <h1>My Website</h1>\n    <nav>\n      <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about\">About</a></li>\n        <li><a href=\"/contact\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main>\n    <article>\n      <header>\n        <h2>Article Title</h2>\n        <time datetime=\"2023-10-13\">October 13, 2023</time>\n      </header>\n      <section>\n        <h3>Introduction</h3>\n        <p>This is the main content of the article.</p>\n      </section>\n      <section>\n        <h3>Details</h3>\n        <p>More detailed information here.</p>\n      </section>\n    </article>\n    \n    <aside>\n      <h3>Related Links</h3>\n      <ul>\n        <li><a href=\"#\">Related Article 1</a></li>\n        <li><a href=\"#\">Related Article 2</a></li>\n      </ul>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2023 My Website. All rights reserved.</p>\n  </footer>\n</body>\n```\n\n**Solution:**\nHTML5 provides semantic elements that improve accessibility and SEO. `<header>` contains introductory content, `<nav>` contains navigation links, `<main>` represents the dominant content (only one per page), `<article>` contains self-contained content, `<section>` groups related content with headings, `<aside>` contains sidebar content, and `<footer>` contains closing information. These elements make the document structure more meaningful to browsers, search engines, and assistive technologies.",
        "difficulty": "Medium",
        "category": "Attributes and Structure",
        "type": "HTML"
    },
    {
        "id": 11,
        "question": "How do you optimize website asset loading for better performance?",
        "solution": "```html\n<!-- Lazy load an image -->\n<img src=\"image.jpg\" loading=\"lazy\" alt=\"Descriptive text\">\n\n<!-- Defer script execution -->\n<script src=\"script.js\" defer></script>\n\n<!-- Load script asynchronously -->\n<script src=\"script.js\" async></script>\n\n<!-- Preload critical resources -->\n<link rel=\"preload\" href=\"critical.css\" as=\"style\">\n<link rel=\"preload\" href=\"hero-image.jpg\" as=\"image\">\n```\n\n**Solution:**\nOptimizing asset loading improves performance through several techniques: Use CDN hosting for faster delivery, enable file compression (Gzip/Brotli), minify CSS and JS files, implement lazy loading for images with `loading=\"lazy\"`, use `defer` and `async` attributes for scripts to prevent blocking, and preload critical resources. These optimizations reduce load times and enhance user experience.",
        "difficulty": "Medium",
        "category": "Performance Optimization",
        "type": "HTML"
    },
    {
        "id": 12,
        "question": "What are the different HTML formatting tags and their purposes?",
        "solution": "```html\n<p>This is <b>bold</b> and this is <strong>strong</strong>.</p>\n<p>This is <i>italic</i> and this is <em>emphasized</em>.</p>\n<p>This is <mark>highlighted</mark> text.</p>\n<p>This is <small>smaller text</small> for fine print.</p>\n<p>This text is <del>deleted</del> and this is <ins>inserted</ins>.</p>\n<p>Chemical formula: H<sub>2</sub>O</p>\n<p>Mathematical expression: E=MC<sup>2</sup></p>\n```\n\n**Solution:**\nHTML provides various formatting tags: `<b>` for bold (visual only), `<strong>` for strong importance (semantic), `<i>` for italic (visual only), `<em>` for emphasis (semantic), `<mark>` for highlighting, `<small>` for smaller text, `<del>` for deleted text, `<ins>` for inserted text, `<sub>` for subscript, and `<sup>` for superscript. Semantic tags (`<strong>`, `<em>`) are preferred as they convey meaning to screen readers and search engines.",
        "difficulty": "Easy",
        "category": "Text Formatting",
        "type": "HTML"
    },
    {
        "id": 13,
        "question": "What are the different types of HTML doctypes?",
        "solution": "```html\n<!-- HTML5 (Recommended) -->\n<!DOCTYPE html>\n\n<!-- HTML 4.01 Strict -->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<!-- HTML 4.01 Transitional -->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n<!-- XHTML 1.0 Strict -->\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n```\n\n**Solution:**\nBefore HTML5, doctypes specified the HTML version and rules. Strict doctypes enforced clean markup without deprecated elements, Transitional doctypes allowed some deprecated elements for backward compatibility, and Frameset doctypes supported frames. HTML5 simplified this with just `<!DOCTYPE html>`, which is required to enable standards-compliant rendering mode in browsers.",
        "difficulty": "Easy",
        "category": "Document Structure",
        "type": "HTML"
    },
    {
        "id": 14,
        "question": "What is the difference between `<strong>`, `<b>`, `<em>`, and `<i>` tags?",
        "solution": "```html\n<!-- Visual formatting -->\n<p>This is <b>bold text</b> and this is <i>italic text</i>.</p>\n\n<!-- Semantic formatting -->\n<p>This is <strong>strongly important</strong> and this is <em>emphasized</em>.</p>\n\n<!-- Styling with CSS -->\n<style>\n  .bold { font-weight: bold; }\n  .italic { font-style: italic; }\n</style>\n<p>This is <span class=\"bold\">styled bold</span> text.</p>\n```\n\n**Solution:**\n`<b>` and `<i>` are purely visual tags that apply bold and italic styling without semantic meaning. `<strong>` and `<em>` are semantic tags that indicate importance and emphasis respectively, which screen readers and search engines understand. While they render similarly by default, semantic tags are preferred for accessibility and SEO. CSS classes are recommended for purely visual styling.",
        "difficulty": "Medium",
        "category": "Semantic HTML",
        "type": "HTML"
    },
    {
        "id": 15,
        "question": "What is the difference between `<head>` and `<body>` sections?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Metadata - not displayed on page -->\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Page Title</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <script src=\"analytics.js\"></script>\n  <style>\n    body { font-family: Arial, sans-serif; }\n  </style>\n</head>\n<body>\n  <!-- Visible content -->\n  <header>\n    <h1>Welcome to My Website</h1>\n    <nav>\n      <a href=\"/home\">Home</a>\n      <a href=\"/about\">About</a>\n    </nav>\n  </header>\n  <main>\n    <p>This content is visible to users.</p>\n  </main>\n</body>\n</html>\n```\n\n**Solution:**\nThe `<head>` section contains metadata about the HTML document that is not displayed on the page, including title, character encoding, stylesheets, scripts, and meta tags for SEO. The `<body>` section contains all visible content that users see and interact with, such as text, images, links, and other elements. The head provides information for browsers and search engines, while the body provides the user interface.",
        "difficulty": "Easy",
        "category": "Document Structure",
        "type": "HTML"
    },
    {
        "id": 16,
        "question": "How can you display a webpage inside another webpage?",
        "solution": "```html\n<!-- Basic iframe -->\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\"></iframe>\n\n<!-- Iframe with additional attributes -->\n<iframe \n  src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n  width=\"560\" \n  height=\"315\" \n  frameborder=\"0\" \n  allowfullscreen\n  title=\"YouTube video player\">\n</iframe>\n\n<!-- Responsive iframe -->\n<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">\n  <iframe \n    src=\"https://www.example.com\" \n    style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n    title=\"Embedded content\">\n  </iframe>\n</div>\n```\n\n**Solution:**\nUse the `<iframe>` (Inline Frame) element to embed another HTML document within the current page. The `src` attribute specifies the URL of the page to embed. Important attributes include `width`, `height`, `title` for accessibility, `allowfullscreen` for media content, and `sandbox` for security restrictions. Consider responsive design techniques for mobile compatibility and always include fallback content.",
        "difficulty": "Medium",
        "category": "Document Embedding",
        "type": "HTML"
    },
    {
        "id": 17,
        "question": "What is the difference between cell padding and cell spacing in HTML tables?",
        "solution": "```html\n<!-- HTML table with deprecated attributes -->\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"5\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n</table>\n\n<!-- Modern CSS approach -->\n<style>\n.modern-table {\n  border-collapse: separate;\n  border-spacing: 10px; /* Equivalent to cellspacing */\n}\n\n.modern-table td, .modern-table th {\n  padding: 15px; /* Equivalent to cellpadding */\n  border: 1px solid #ccc;\n}\n</style>\n\n<table class=\"modern-table\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n</table>\n```\n\n**Solution:**\nCell spacing controls the space between adjacent table cells, while cell padding controls the space between cell content and its border. The HTML attributes `cellspacing` and `cellpadding` are deprecated in HTML5. Use CSS instead: `border-spacing` property for cell spacing (requires `border-collapse: separate`) and `padding` property on `td`/`th` elements for cell padding.",
        "difficulty": "Medium",
        "category": "Tables",
        "type": "HTML"
    },
    {
        "id": 18,
        "question": "How do you span rows or columns in HTML tables?",
        "solution": "```html\n<table border=\"1\">\n  <tr>\n    <th colspan=\"2\">Full Name</th>\n    <th rowspan=\"2\">Age</th>\n  </tr>\n  <tr>\n    <th>First</th>\n    <th>Last</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>Doe</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td colspan=\"3\">Total: 1 person</td>\n  </tr>\n</table>\n\n<!-- Complex table example -->\n<table border=\"1\">\n  <tr>\n    <th>Product</th>\n    <th colspan=\"2\">Sales</th>\n    <th rowspan=\"2\">Total</th>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Laptops</td>\n    <td>Q1</td>\n    <td>100</td>\n  </tr>\n  <tr>\n    <td>Q2</td>\n    <td>150</td>\n    <td>250</td>\n  </tr>\n</table>\n```\n\n**Solution:**\nUse `colspan` attribute to make a cell span multiple columns and `rowspan` attribute to make a cell span multiple rows. The value specifies how many columns or rows the cell should span. When using these attributes, remember to adjust the number of cells in affected rows to maintain proper table structure. This is useful for creating headers that cover multiple columns or data cells that group related information.",
        "difficulty": "Medium",
        "category": "Tables",
        "type": "HTML"
    },
    {
        "id": 19,
        "question": "How can you change an inline element to a block element?",
        "solution": "```html\n<!-- Inline elements by default -->\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<span>Inline span</span>\n\n<!-- Converting to block elements -->\n<style>\n.block-link {\n  display: block;\n  background-color: lightblue;\n  padding: 10px;\n  margin: 5px 0;\n  text-decoration: none;\n}\n\n.block-span {\n  display: block;\n  background-color: lightgreen;\n  padding: 8px;\n  margin: 3px 0;\n}\n\n/* Other display options */\n.inline-block {\n  display: inline-block;\n  width: 100px;\n  height: 50px;\n  background-color: lightyellow;\n  margin: 5px;\n}\n</style>\n\n<a href=\"#\" class=\"block-link\">Block Link 1</a>\n<a href=\"#\" class=\"block-link\">Block Link 2</a>\n<span class=\"block-span\">Block span</span>\n\n<span class=\"inline-block\">Inline-block 1</span>\n<span class=\"inline-block\">Inline-block 2</span>\n```\n\n**Solution:**\nUse the CSS `display` property to change element behavior. Set `display: block` to make inline elements behave like block elements (full width, new line). You can also use `display: inline-block` to get block-like properties while staying inline, or `display: flex`/`display: grid` for modern layout control. This allows you to modify the default display behavior of any HTML element.",
        "difficulty": "Easy",
        "category": "CSS Display",
        "type": "HTML"
    },
    {
        "id": 20,
        "question": "What are the different ways to apply CSS styles to HTML elements?",
        "solution": "```html\n<!-- 1. External CSS (Recommended) -->\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<!-- 2. Internal CSS -->\n<head>\n  <style>\n    .internal-style {\n      color: blue;\n      font-size: 16px;\n    }\n    \n    #header {\n      background-color: #f0f0f0;\n      padding: 20px;\n    }\n  </style>\n</head>\n\n<!-- 3. Inline CSS (Highest specificity) -->\n<p style=\"color: red; font-weight: bold;\">This text is red and bold.</p>\n\n<!-- styles.css file content -->\n/*\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n*/\n```\n\n**Solution:**\nThere are three ways to apply CSS: **External CSS** using `<link>` tag (most maintainable, cacheable, recommended for production), **Internal CSS** using `<style>` tag in the head (good for single-page styles or testing), and **Inline CSS** using the `style` attribute (highest specificity, but poor maintainability). External CSS promotes separation of concerns and better performance through caching.",
        "difficulty": "Easy",
        "category": "CSS Integration",
        "type": "HTML"
    },
    {
        "id": 21,
        "question": "What is the difference between `display: none` and `visibility: hidden`?",
        "solution": "```html\n<style>\n.display-none {\n  display: none; /* Removes from document flow */\n}\n\n.visibility-hidden {\n  visibility: hidden; /* Hidden but occupies space */\n}\n\n.opacity-zero {\n  opacity: 0; /* Transparent but occupies space and can receive events */\n}\n</style>\n\n<div>First paragraph.</div>\n<div class=\"display-none\">This paragraph is not displayed and takes no space.</div>\n<div class=\"visibility-hidden\">This paragraph is hidden but still takes up space.</div>\n<div class=\"opacity-zero\">This paragraph is transparent but still takes up space.</div>\n<div>Last paragraph.</div>\n\n<!-- JavaScript demonstration -->\n<script>\n// Element with display: none cannot be measured\nconsole.log(document.querySelector('.display-none').offsetHeight); // 0\n\n// Element with visibility: hidden can be measured\nconsole.log(document.querySelector('.visibility-hidden').offsetHeight); // actual height\n</script>\n```\n\n**Solution:**\n`display: none` completely removes the element from the document flow - it takes up no space and cannot be measured. `visibility: hidden` hides the element but it still occupies its original space in the layout. Additionally, `opacity: 0` makes an element transparent but it remains in the flow and can still receive events. Use `display: none` for conditional rendering and `visibility: hidden` when you need to maintain layout spacing.",
        "difficulty": "Medium",
        "category": "CSS Display",
        "type": "HTML"
    },
    {
        "id": 22,
        "question": "What is the difference between `<link>` and `<a>` tags?",
        "solution": "```html\n<!-- <link> tag - Defines relationships to external resources -->\n<head>\n  <!-- Linking stylesheets -->\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  \n  <!-- Preloading resources -->\n  <link rel=\"preload\" href=\"font.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n  \n  <!-- Favicon -->\n  <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n  \n  <!-- RSS feed -->\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS Feed\" href=\"feed.xml\">\n  \n  <!-- Canonical URL -->\n  <link rel=\"canonical\" href=\"https://example.com/page\">\n</head>\n\n<!-- <a> tag - Creates hyperlinks -->\n<body>\n  <!-- Navigation links -->\n  <a href=\"/home\">Home</a>\n  <a href=\"/about\">About Us</a>\n  <a href=\"mailto:contact@example.com\">Email Us</a>\n  <a href=\"tel:+1234567890\">Call Us</a>\n  \n  <!-- External links -->\n  <a href=\"https://example.com\" target=\"_blank\" rel=\"noopener\">External Site</a>\n  \n  <!-- Anchor links -->\n  <a href=\"#section1\">Go to Section 1</a>\n  \n  <!-- Download links -->\n  <a href=\"document.pdf\" download>Download PDF</a>\n</body>\n```\n\n**Solution:**\nThe `<link>` tag defines relationships between the current document and external resources, typically used in the `<head>` for stylesheets, fonts, icons, and metadata. It's not clickable and doesn't create visible content. The `<a>` (anchor) tag creates clickable hyperlinks for navigation, appearing in the `<body>` section. `<link>` establishes resource relationships while `<a>` creates user interaction points for navigation.",
        "difficulty": "Easy",
        "category": "HTML Links",
        "type": "HTML"
    },
    {
        "id": 23,
        "question": "How do you include JavaScript code in HTML documents?",
        "solution": "**Explanation:**\nJavaScript can be included using the `<script>` tag in three ways: **External files** with `src` attribute (recommended for reusability), **Internal scripts** within `<script>` tags, and **Inline event handlers** in HTML attributes. Use `defer` for scripts that need DOM access, `async` for independent scripts, or place scripts at the end of `<body>` for optimal performance. Modern practice favors external files with event listeners over inline handlers.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- External JavaScript file -->\n  <script src=\"app.js\" defer></script>\n  \n  <!-- External JavaScript with async loading -->\n  <script src=\"analytics.js\" async></script>\n  \n  <!-- Internal JavaScript -->\n  <script>\n    console.log(\"Script in head - runs immediately\");\n    \n    function initPage() {\n      console.log(\"Page initialization function\");\n    }\n  </script>\n</head>\n<body>\n  <h1 onclick=\"handleClick()\">Click me</h1>\n  <button id=\"myButton\">Modern Event Handling</button>\n  \n  <!-- Inline event handler -->\n  <button onclick=\"alert('Inline event handler')\">Alert Button</button>\n  \n  <!-- Script at end of body (recommended) -->\n  <script>\n    // This runs after DOM is loaded\n    document.getElementById('myButton').addEventListener('click', function() {\n      alert('Modern event handling');\n    });\n    \n    function handleClick() {\n      console.log('Header clicked');\n    }\n  </script>\n</body>\n</html>\n```\n",
        "difficulty": "Easy",
        "category": "JavaScript Integration",
        "type": "HTML"
    },
    {
        "id": 24,
        "question": "When should you place scripts in `<head>` versus `<body>`?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Critical scripts that must run before page content -->\n  <script src=\"polyfills.js\"></script>\n  \n  <!-- Non-blocking scripts with defer -->\n  <script src=\"main.js\" defer></script>\n  \n  <!-- Independent scripts with async -->\n  <script src=\"analytics.js\" async></script>\n  \n  <!-- Inline critical JavaScript -->\n  <script>\n    // Feature detection\n    if (!window.fetch) {\n      document.write('<script src=\"fetch-polyfill.js\"><\\/script>');\n    }\n  </script>\n</head>\n<body>\n  <header>\n    <h1 id=\"title\">My Website</h1>\n  </header>\n  \n  <main>\n    <p id=\"content\">Page content here</p>\n  </main>\n  \n  <!-- Scripts that need DOM elements (recommended) -->\n  <script>\n    // This runs after DOM elements are available\n    document.getElementById('title').style.color = 'blue';\n    document.getElementById('content').addEventListener('click', function() {\n      alert('Content clicked!');\n    });\n  </script>\n  \n  <!-- External script at end of body -->\n  <script src=\"ui-interactions.js\"></script>\n</body>\n</html>\n```\n\n**Solution:**\nPlace scripts in `<head>` for critical functionality that must run before page content loads (polyfills, feature detection), but use `defer` or `async` to prevent blocking. Place scripts at the end of `<body>` for DOM manipulation and user interactions, ensuring HTML elements are available when scripts execute. The `defer` attribute loads scripts in parallel but executes after HTML parsing, while `async` loads and executes immediately, potentially blocking rendering.",
        "difficulty": "Medium",
        "category": "JavaScript Integration",
        "type": "HTML"
    },
    {
        "id": 25,
        "question": "How do you create an HTML form with different input types?",
        "solution": "```html\n<form action=\"/submit\" method=\"post\" enctype=\"multipart/form-data\">\n  <!-- Text inputs -->\n  <label for=\"name\">Full Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" required placeholder=\"Enter your name\">\n  \n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\" required>\n  \n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"8\">\n  \n  <!-- Number and range inputs -->\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" id=\"age\" name=\"age\" min=\"18\" max=\"100\">\n  \n  <label for=\"rating\">Rating (1-10):</label>\n  <input type=\"range\" id=\"rating\" name=\"rating\" min=\"1\" max=\"10\" value=\"5\">\n  \n  <!-- Date inputs -->\n  <label for=\"birthdate\">Birth Date:</label>\n  <input type=\"date\" id=\"birthdate\" name=\"birthdate\">\n  \n  <!-- Selection inputs -->\n  <label for=\"country\">Country:</label>\n  <select id=\"country\" name=\"country\" required>\n    <option value=\"\">Select a country</option>\n    <option value=\"us\">United States</option>\n    <option value=\"uk\">United Kingdom</option>\n    <option value=\"ca\">Canada</option>\n  </select>\n  \n  <!-- Radio buttons -->\n  <fieldset>\n    <legend>Gender:</legend>\n    <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n    <label for=\"male\">Male</label>\n    \n    <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n    <label for=\"female\">Female</label>\n  </fieldset>\n  \n  <!-- Checkboxes -->\n  <label>\n    <input type=\"checkbox\" name=\"newsletter\" value=\"yes\">\n    Subscribe to newsletter\n  </label>\n  \n  <!-- File upload -->\n  <label for=\"avatar\">Profile Picture:</label>\n  <input type=\"file\" id=\"avatar\" name=\"avatar\" accept=\"image/*\">\n  \n  <!-- Textarea -->\n  <label for=\"message\">Message:</label>\n  <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Enter your message\"></textarea>\n  \n  <!-- Submit button -->\n  <button type=\"submit\">Submit Form</button>\n  <input type=\"reset\" value=\"Reset Form\">\n</form>\n```\n\n**Solution:**\nHTML forms use the `<form>` element with various input types for different data collection needs. Key attributes include `action` (submission URL), `method` (GET/POST), and `enctype` for file uploads. Input types include text, email, password, number, range, date, file, and more. Use `<label>` elements for accessibility, validation attributes like `required` and `min`/`max`, and organize related fields with `<fieldset>` and `<legend>` for better user experience.",
        "difficulty": "Medium",
        "category": "Forms",
        "type": "HTML"
    },
    {
        "id": 26,
        "question": "How do you handle events in HTML elements?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    .highlight { background-color: yellow; }\n    .button { padding: 10px; margin: 5px; cursor: pointer; }\n  </style>\n</head>\n<body>\n  <!-- Inline event handlers (not recommended for complex apps) -->\n  <button onclick=\"showAlert()\">Inline Click Handler</button>\n  <div onmouseover=\"this.style.backgroundColor='lightblue'\" \n       onmouseout=\"this.style.backgroundColor=''\">Hover me</div>\n  \n  <!-- Form events -->\n  <form onsubmit=\"return validateForm(event)\">\n    <input type=\"text\" onchange=\"handleInputChange(this)\" placeholder=\"Type something\">\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n  \n  <!-- Modern event handling (recommended) -->\n  <button id=\"modernButton\" class=\"button\">Modern Event Handling</button>\n  <div id=\"hoverTarget\" class=\"button\">Hover Target</div>\n  \n  <script>\n    // Inline event handler functions\n    function showAlert() {\n      alert('Button clicked using inline handler!');\n    }\n    \n    function handleInputChange(element) {\n      console.log('Input value changed to:', element.value);\n    }\n    \n    function validateForm(event) {\n      const input = event.target.querySelector('input[type=\"text\"]');\n      if (input.value.trim() === '') {\n        alert('Please enter some text');\n        event.preventDefault();\n        return false;\n      }\n      return true;\n    }\n    \n    // Modern event listeners (recommended approach)\n    document.getElementById('modernButton').addEventListener('click', function(event) {\n      console.log('Modern click handler executed');\n      event.target.textContent = 'Clicked!';\n    });\n    \n    // Multiple event listeners on same element\n    const hoverTarget = document.getElementById('hoverTarget');\n    \n    hoverTarget.addEventListener('mouseenter', function() {\n      this.classList.add('highlight');\n    });\n    \n    hoverTarget.addEventListener('mouseleave', function() {\n      this.classList.remove('highlight');\n    });\n    \n    // Event delegation for dynamic content\n    document.body.addEventListener('click', function(event) {\n      if (event.target.matches('.dynamic-button')) {\n        console.log('Dynamic button clicked');\n      }\n    });\n    \n    // Keyboard events\n    document.addEventListener('keydown', function(event) {\n      if (event.key === 'Escape') {\n        console.log('Escape key pressed');\n      }\n    });\n  </script>\n</body>\n</html>\n```\n\n**Solution:**\nEvents can be handled using inline event attributes (like `onclick`, `onmouseover`) directly in HTML elements, but the modern recommended approach is using `addEventListener` in JavaScript. This method allows multiple listeners per event, better separation of concerns, and more control over event behavior. Common events include click, submit, change, mouseenter/leave, and keydown. Use event delegation for dynamic content and always consider accessibility when implementing interactions.",
        "difficulty": "Medium",
        "category": "Events",
        "type": "HTML"
    },
    {
        "id": 27,
        "question": "What are the main advantages of HTML5 over previous versions?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>HTML5 Features Demo</title>\n</head>\n<body>\n  <!-- Semantic elements -->\n  <header>\n    <nav>\n      <a href=\"#home\">Home</a>\n      <a href=\"#about\">About</a>\n    </nav>\n  </header>\n  \n  <main>\n    <article>\n      <section>\n        <!-- Native multimedia support -->\n        <video controls width=\"320\" height=\"240\">\n          <source src=\"video.mp4\" type=\"video/mp4\">\n          <source src=\"video.webm\" type=\"video/webm\">\n          Your browser does not support the video tag.\n        </video>\n        \n        <audio controls>\n          <source src=\"audio.mp3\" type=\"audio/mpeg\">\n          <source src=\"audio.ogg\" type=\"audio/ogg\">\n          Your browser does not support the audio element.\n        </audio>\n        \n        <!-- Enhanced form controls -->\n        <form>\n          <input type=\"email\" placeholder=\"email@example.com\" required>\n          <input type=\"date\" required>\n          <input type=\"number\" min=\"1\" max=\"100\">\n          <input type=\"range\" min=\"0\" max=\"100\" value=\"50\">\n          <input type=\"color\" value=\"#ff0000\">\n          <input type=\"search\" placeholder=\"Search...\">\n        </form>\n        \n        <!-- Canvas for graphics -->\n        <canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000;\">\n          Your browser does not support the canvas element.\n        </canvas>\n        \n        <!-- SVG graphics -->\n        <svg width=\"100\" height=\"100\">\n          <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" />\n        </svg>\n      </section>\n    </article>\n    \n    <aside>\n      <!-- Web storage example -->\n      <button onclick=\"saveData()\">Save to Local Storage</button>\n      <button onclick=\"loadData()\">Load from Local Storage</button>\n      <div id=\"storage-result\"></div>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2023 HTML5 Demo</p>\n  </footer>\n  \n  <script>\n    // Canvas drawing\n    const canvas = document.getElementById('myCanvas');\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#FF0000';\n    ctx.fillRect(0, 0, 80, 100);\n    \n    // Web storage\n    function saveData() {\n      localStorage.setItem('user', 'John Doe');\n      sessionStorage.setItem('session', 'active');\n      document.getElementById('storage-result').textContent = 'Data saved!';\n    }\n    \n    function loadData() {\n      const user = localStorage.getItem('user') || 'No user';\n      const session = sessionStorage.getItem('session') || 'No session';\n      document.getElementById('storage-result').textContent = `User: ${user}, Session: ${session}`;\n    }\n    \n    // Geolocation API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        console.log('Latitude:', position.coords.latitude);\n        console.log('Longitude:', position.coords.longitude);\n      });\n    }\n  </script>\n</body>\n</html>\n```\n\n**Solution:**\nHTML5 introduced major improvements including: **Semantic elements** (`<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<aside>`, `<footer>`) for better document structure and accessibility, **native multimedia support** with `<video>` and `<audio>` tags eliminating plugin dependencies, **enhanced form controls** with new input types like email, date, and number, **client-side storage** with localStorage and sessionStorage, **graphics capabilities** with `<canvas>` and `<svg>`, **offline capabilities** with Application Cache, and **improved APIs** like Geolocation, Web Workers, and WebSockets for rich web applications.",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 28,
        "question": "How do you include audio and video content in HTML5?",
        "solution": "HTML5 provides native `<audio>` and `<video>` elements for multimedia content with built-in browser controls and multiple format support.\n\n**Basic Syntax:**\n```html\n<!-- Audio element -->\n<audio controls>\n  <source src=\"audio.mp3\" type=\"audio/mpeg\">\n  <source src=\"audio.ogg\" type=\"audio/ogg\">\n  Your browser does not support audio.\n</audio>\n\n<!-- Video element -->\n<video controls width=\"640\" height=\"360\">\n  <source src=\"video.mp4\" type=\"video/mp4\">\n  <source src=\"video.webm\" type=\"video/webm\">\n  Your browser does not support video.\n</video>\n```\n\n**Common Attributes:**\n```html\n<video controls autoplay muted loop preload=\"auto\" poster=\"thumb.jpg\">\n  <source src=\"video.mp4\" type=\"video/mp4\">\n  <!-- Subtitles -->\n  <track kind=\"subtitles\" src=\"subs.vtt\" srclang=\"en\" label=\"English\">\n</video>\n```\n\n**JavaScript Control:**\n```javascript\nconst video = document.getElementById('myVideo');\nvideo.play();           // Start playback\nvideo.pause();          // Pause playback\nvideo.volume = 0.5;     // Set volume (0-1)\nvideo.currentTime = 30; // Jump to 30 seconds\n```\n\n**Key Features:**\n- **Cross-browser compatibility** with multiple `<source>` elements\n- **Built-in controls** with `controls` attribute\n- **Accessibility support** with `<track>` for subtitles/captions\n- **JavaScript API** for custom controls and events\n- **Responsive design** with CSS sizing",
        "difficulty": "Medium",
        "category": "Multimedia",
        "type": "HTML"
    },
    {
        "id": 29,
        "question": "What is the difference between inline and block elements?",
        "solution": "Elements display either inline (horizontally) or block (vertically) by default, affecting layout flow and sizing behavior.\n\n**Key Differences:**\n\n| Feature | **Inline** | **Block** |\n|---------|------------|----------|\n| **Flow** | Horizontal | Vertical (new line) |\n| **Width** | Content width only | Full available width |\n| **Width/Height** | Ignored | Respected |\n| **Line Breaks** | No | Yes (before and after) |\n\n**Common Elements:**\n```html\n<!-- Inline elements -->\n<span>Span</span> <a href=\"#\">Link</a> <strong>Bold</strong> <em>Italic</em>\n\n<!-- Block elements -->\n<div>Div</div>\n<p>Paragraph</p>\n<h1>Heading</h1>\n<section>Section</section>\n```\n\n**CSS Display Override:**\n```css\n/* Change display behavior */\nspan { display: block; }        /* Inline → Block */\ndiv { display: inline; }        /* Block → Inline */\n.hybrid { display: inline-block; } /* Best of both */\n```\n\n**Inline-Block Hybrid:**\n```html\n<div class=\"inline-block\">Box 1</div>\n<div class=\"inline-block\">Box 2</div>\n\n<style>\n.inline-block {\n  display: inline-block;\n  width: 100px;     /* Respects dimensions */\n  height: 50px;     /* Like block elements */\n  /* Flows horizontally like inline */\n}\n</style>\n```\n\n**Use Cases:**\n- **Inline**: Text styling, links within paragraphs\n- **Block**: Layout containers, content sections\n- **Inline-block**: Navigation items, card layouts",
        "difficulty": "Easy",
        "category": "CSS Display",
        "type": "HTML"
    },
    {
        "id": 30,
        "question": "What is the difference between `<figure>` and `<img>` elements?",
        "solution": "`<img>` displays images, while `<figure>` is a semantic container for self-contained content with optional captions.\n\n**Basic Usage:**\n```html\n<!-- Simple image -->\n<img src=\"photo.jpg\" alt=\"A sunset\" width=\"300\" height=\"200\">\n\n<!-- Figure with caption -->\n<figure>\n  <img src=\"chart.png\" alt=\"Sales data\" width=\"400\" height=\"300\">\n  <figcaption>Fig.1 - Q3 sales showing 25% growth</figcaption>\n</figure>\n```\n\n**Figure Content Types:**\n```html\n<!-- Images with caption -->\n<figure>\n  <img src=\"diagram.jpg\" alt=\"Process flow\">\n  <figcaption>System architecture overview</figcaption>\n</figure>\n\n<!-- Code snippets -->\n<figure>\n  <pre><code>function hello() { return 'Hello World'; }</code></pre>\n  <figcaption>Example 1: Basic function</figcaption>\n</figure>\n\n<!-- Tables, videos, etc. -->\n<figure>\n  <video controls>\n    <source src=\"demo.mp4\" type=\"video/mp4\">\n  </video>\n  <figcaption>Tutorial: CSS Grid basics</figcaption>\n</figure>\n```\n\n**Key Differences:**\n\n| Aspect | `<img>` | `<figure>` |\n|--------|---------|------------|\n| **Purpose** | Display image only | Semantic container + caption |\n| **Content** | Images only | Images, code, tables, videos |\n| **Caption** | Not supported | `<figcaption>` supported |\n| **Semantic** | Content image | Referenced/standalone content |\n| **Accessibility** | Alt text only | Caption + alt text |\n\n**When to Use:**\n- **`<img>`**: Decorative images, inline photos, icons\n- **`<figure>`**: Diagrams, charts, code examples, content that needs captions",
        "difficulty": "Medium",
        "category": "Semantic HTML",
        "type": "HTML"
    },
    {
        "id": 31,
        "question": "How do you specify metadata in HTML? What are the different types of meta tags and their purposes?",
        "solution": "Meta tags provide metadata about HTML documents for browsers, search engines, and social media platforms.\n\n**Essential Meta Tags:**\n```html\n<head>\n  <!-- Character encoding -->\n  <meta charset=\"UTF-8\">\n  \n  <!-- Responsive design -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \n  <!-- SEO -->\n  <meta name=\"description\" content=\"Page description for search results\">\n  <meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n  <meta name=\"author\" content=\"John Doe\">\n</head>\n```\n\n**Social Media & SEO:**\n```html\n<!-- Open Graph (Facebook, LinkedIn) -->\n<meta property=\"og:title\" content=\"Page Title\">\n<meta property=\"og:description\" content=\"Page description\">\n<meta property=\"og:image\" content=\"https://example.com/image.jpg\">\n<meta property=\"og:url\" content=\"https://example.com\">\n\n<!-- Twitter Cards -->\n<meta name=\"twitter:card\" content=\"summary_large_image\">\n<meta name=\"twitter:title\" content=\"Page Title\">\n\n<!-- Search Engine Control -->\n<meta name=\"robots\" content=\"index, follow\">\n```\n\n**Browser & Mobile:**\n```html\n<!-- Mobile browser theme -->\n<meta name=\"theme-color\" content=\"#317EFB\">\n\n<!-- Prevent page caching -->\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n\n<!-- Page refresh -->\n<meta http-equiv=\"refresh\" content=\"30\">\n```\n\n**Meta Tag Types:**\n\n| Type | Purpose | Example |\n|------|---------|----------|\n| `charset` | Character encoding | `UTF-8` |\n| `viewport` | Mobile responsiveness | `width=device-width` |\n| `description` | Search result snippet | Max 160 characters |\n| `robots` | Search crawler control | `index, follow` |\n| `og:*` | Social media sharing | Facebook, LinkedIn |\n| `twitter:*` | Twitter card display | Twitter sharing |\n\n**Best Practices:** Always include charset and viewport, keep descriptions under 160 characters, use relevant keywords, test social media previews.",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 32,
        "question": "What is the difference between `<datalist>` and `<select>` elements? When would you use each?",
        "solution": "`<datalist>` provides input suggestions while allowing custom values, whereas `<select>` restricts users to predefined options only.\n\n**Basic Syntax:**\n```html\n<!-- Datalist: Flexible input with suggestions -->\n<input list=\"browsers\" placeholder=\"Type or select...\">\n<datalist id=\"browsers\">\n  <option value=\"Chrome\">\n  <option value=\"Firefox\">\n  <option value=\"Safari\">\n</datalist>\n\n<!-- Select: Fixed dropdown options -->\n<select name=\"country\">\n  <option value=\"us\">United States</option>\n  <option value=\"uk\">United Kingdom</option>\n  <option value=\"ca\">Canada</option>\n</select>\n```\n\n**Key Differences:**\n\n| Feature | `<datalist>` | `<select>` |\n|---------|--------------|------------|\n| **Input Type** | Text input + suggestions | Dropdown menu |\n| **Custom Values** | ✅ Allowed | ❌ Not allowed |\n| **Validation** | Accepts any text | Only listed values |\n| **User Experience** | Type to filter/search | Click to choose |\n| **Flexibility** | High | Low |\n\n**Use Cases:**\n```html\n<!-- Datalist: Search, tags, flexible input -->\n<label for=\"skills\">Skills (add your own):</label>\n<input list=\"skill-list\" id=\"skills\">\n<datalist id=\"skill-list\">\n  <option value=\"JavaScript\">\n  <option value=\"Python\">\n  <option value=\"React\">\n</datalist>\n\n<!-- Select: Fixed categories, required validation -->\n<label for=\"gender\">Gender:</label>\n<select id=\"gender\" required>\n  <option value=\"\">Please select</option>\n  <option value=\"male\">Male</option>\n  <option value=\"female\">Female</option>\n  <option value=\"other\">Other</option>\n</select>\n```\n\n**When to Use:**\n- **Datalist**: Search boxes, autocomplete, tags, flexible user input\n- **Select**: Categories, countries, fixed choices, form validation requirements",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 33,
        "question": "What is an Image Map in HTML? How do you create clickable areas on an image?",
        "solution": "**Image Map** allows you to create multiple clickable areas on a single image, where different regions can link to different URLs or trigger actions.\n\n**Components:**\n- `<img>` with `usemap` attribute\n- `<map>` element defining clickable regions  \n- `<area>` elements for individual clickable areas\n\n```html\n<!-- Basic Image Map -->\n<img src=\"office.jpg\" alt=\"Office Layout\" usemap=\"#officemap\" width=\"400\" height=\"300\">\n\n<map name=\"officemap\">\n  <!-- Rectangle: x1,y1,x2,y2 (top-left, bottom-right) -->\n  <area shape=\"rect\" coords=\"50,50,150,100\" href=\"reception.html\" alt=\"Reception\">\n  \n  <!-- Circle: x,y,radius (center and radius) -->\n  <area shape=\"circle\" coords=\"200,150,40\" href=\"meeting.html\" alt=\"Meeting Room\">\n  \n  <!-- Polygon: series of x,y pairs -->\n  <area shape=\"poly\" coords=\"100,200,150,200,125,250\" href=\"kitchen.html\" alt=\"Kitchen\">\n  \n  <!-- Default for unmapped areas -->\n  <area shape=\"default\" href=\"general.html\" alt=\"General Office\">\n</map>\n```\n\n**Shape Types:**\n\n| Shape | Coordinates | Example |\n|-------|-------------|----------|\n| `rect` | `x1,y1,x2,y2` | `\"50,50,150,100\"` |\n| `circle` | `x,y,radius` | `\"200,150,40\"` |\n| `poly` | `x1,y1,x2,y2,...` | `\"100,200,150,200,125,250\"` |\n| `default` | None | Covers entire image |\n\n**Common Use Cases:**\n- Interactive floor plans and maps\n- Product catalogs with clickable items\n- Educational diagrams and charts\n- Navigation interfaces\n\n**Best Practices:**\n- Always include `alt` attributes for accessibility\n- Use `title` for tooltips\n- Consider responsive design with percentage coordinates\n- Provide visual feedback on hover\n\n**Modern Alternatives:** CSS positioned elements, SVG graphics, or Canvas for complex interactions.",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 34,
        "question": "What are Semantic Elements in HTML5? Provide examples and explain their benefits.",
        "solution": "Semantic elements describe the meaning and structure of content, making HTML more accessible and meaningful to browsers and developers.\n\n**Key Semantic Elements:**\n```html\n<header>Site or section header</header>\n<nav>Navigation menu</nav>\n<main>Primary content (one per page)</main>\n<article>Self-contained content (blog post)</article>\n<section>Thematic content grouping</section>\n<aside>Sidebar or related content</aside>\n<footer>Footer information</footer>\n```\n\n**Complete Page Structure:**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n  <header>\n    <h1>My Website</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#home\">Home</a></li>\n        <li><a href=\"#about\">About</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main>\n    <article>\n      <header>\n        <h2>Article Title</h2>\n        <time datetime=\"2024-01-15\">Jan 15, 2024</time>\n      </header>\n      \n      <section>\n        <h3>Introduction</h3>\n        <p>Article content...</p>\n      </section>\n    </article>\n    \n    <aside>\n      <h3>Related Links</h3>\n      <ul><li><a href=\"#\">Related article</a></li></ul>\n    </aside>\n  </main>\n  \n  <footer>\n    <address>Contact: info@example.com</address>\n  </footer>\n</body>\n</html>\n```\n\n**Additional Semantic Elements:**\n- `<figure>` + `<figcaption>`: Images with captions\n- `<time>`: Dates and times\n- `<mark>`: Highlighted text\n- `<address>`: Contact information\n\n**Benefits:**\n1. **Accessibility**: Screen readers understand content structure\n2. **SEO**: Search engines better index and rank content\n3. **Maintainability**: Code is self-documenting and organized\n4. **Styling**: CSS can target semantic meaning\n5. **Future-proof**: Meaning preserved across updates",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 35,
        "question": "How do you show tabular data in HTML? Demonstrate proper table structure with accessibility features.",
        "solution": "HTML tables display structured data in rows and columns with semantic elements for headers, body, and accessibility features.\n\n**Basic Table Structure:**\n```html\n<table>\n  <caption>Sales Data Q1 2024</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Name</th>\n      <th scope=\"col\">January</th>\n      <th scope=\"col\">February</th>\n      <th scope=\"col\">Total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">John Smith</th>\n      <td>$15,000</td>\n      <td>$18,000</td>\n      <td>$33,000</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Jane Doe</th>\n      <td>$20,000</td>\n      <td>$19,000</td>\n      <td>$39,000</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <th scope=\"row\">Totals</th>\n      <td>$35,000</td>\n      <td>$37,000</td>\n      <td>$72,000</td>\n    </tr>\n  </tfoot>\n</table>\n```\n\n**Complex Tables (Merged Cells):**\n```html\n<table>\n  <thead>\n    <tr>\n      <th rowspan=\"2\">Product</th>\n      <th colspan=\"2\">Dimensions</th>\n      <th rowspan=\"2\">Price</th>\n    </tr>\n    <tr>\n      <th>Width</th>\n      <th>Height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Laptop</th>\n      <td>14 inches</td>\n      <td>0.8 inches</td>\n      <td>$999</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n**Accessibility Features:**\n```html\n<!-- Use scope for simple tables -->\n<th scope=\"col\">Column Header</th>\n<th scope=\"row\">Row Header</th>\n\n<!-- Use headers attribute for complex tables -->\n<th id=\"name\">Name</th>\n<td headers=\"name jan\">Data</td>\n```\n\n**Table Elements:**\n\n| Element | Purpose | Required |\n|---------|---------|----------|\n| `<table>` | Table container | ✅ Yes |\n| `<caption>` | Table description | Recommended |\n| `<thead>` | Header section | Recommended |\n| `<tbody>` | Body content | Recommended |\n| `<tfoot>` | Footer section | Optional |\n| `<th>` | Header cells | For headers |\n| `<td>` | Data cells | For data |\n\n**Best Practices:**\n- Always use `<caption>` for accessibility\n- Use `scope` attribute on headers\n- Include `<thead>`, `<tbody>`, `<tfoot>` for structure\n- Use `<th>` for all headers (column and row)\n- Consider responsive design for mobile",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 36,
        "question": "What is the difference between `<meter>` and `<progress>` elements? Provide practical examples of when to use each.",
        "solution": "`<progress>` shows task completion progress, while `<meter>` displays measurements within a known range with optimal values.\n\n**Progress Element (Task Completion):**\n```html\n<!-- File upload progress -->\n<label for=\"upload\">Upload Progress:</label>\n<progress id=\"upload\" value=\"65\" max=\"100\">65%</progress>\n\n<!-- Form completion -->\n<progress value=\"3\" max=\"5\">Step 3 of 5</progress>\n\n<!-- Indeterminate loading -->\n<progress>Loading...</progress>\n```\n\n**Meter Element (Measurements):**\n```html\n<!-- Disk usage -->\n<label for=\"disk\">Disk Usage:</label>\n<meter id=\"disk\" value=\"0.6\" min=\"0\" max=\"1\">60%</meter>\n\n<!-- Temperature with optimal range -->\n<meter value=\"22\" min=\"0\" max=\"40\" optimum=\"20\" low=\"10\" high=\"30\">22°C</meter>\n\n<!-- Battery level -->\n<meter value=\"85\" min=\"0\" max=\"100\" low=\"20\" high=\"80\">85%</meter>\n\n<!-- Test score -->\n<meter value=\"8.5\" min=\"0\" max=\"10\" optimum=\"9\">8.5/10</meter>\n```\n\n**Key Differences:**\n\n| Aspect | `<progress>` | `<meter>` |\n|--------|--------------|----------|\n| **Purpose** | Task completion | Scalar measurement |\n| **Semantic** | \"How much is done?\" | \"Where in the range?\" |\n| **Attributes** | `value`, `max` | `value`, `min`, `max`, `low`, `high`, `optimum` |\n| **Visual** | Filling bar | Color-coded ranges |\n| **Indeterminate** | ✅ Supported | ❌ Not applicable |\n\n**JavaScript Control:**\n```javascript\n// Progress\nconst progress = document.getElementById('upload');\nprogress.value = 75; // Update progress\n\n// Meter  \nconst meter = document.getElementById('disk');\nmeter.value = 0.8; // Update measurement\n```\n\n**When to Use:**\n- **Progress**: File uploads, downloads, form steps, loading states, installations\n- **Meter**: Disk usage, scores, ratings, performance metrics, system resources, temperatures",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 37,
        "question": "Explain HTML5 Drag and Drop functionality. How do you implement drag and drop with JavaScript?",
        "solution": "HTML5 Drag and Drop API enables dragging elements and handling drop events with JavaScript for interactive interfaces.\n\n**Basic Implementation:**\n```html\n<!-- Draggable element -->\n<div draggable=\"true\" ondragstart=\"dragStart(event)\" data-item=\"item1\">\n  Drag me!\n</div>\n\n<!-- Drop zone -->\n<div ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" \n     style=\"border: 2px dashed #ccc; width: 200px; height: 100px;\">\n  Drop here\n</div>\n```\n\n**JavaScript Event Handlers:**\n```javascript\nfunction dragStart(event) {\n  // Store data to transfer\n  event.dataTransfer.setData('text/plain', event.target.dataset.item);\n  event.dataTransfer.effectAllowed = 'move';\n}\n\nfunction allowDrop(event) {\n  event.preventDefault(); // Allow drop\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  const data = event.dataTransfer.getData('text/plain');\n  console.log('Dropped:', data);\n  \n  // Handle the dropped item\n  const draggedElement = document.querySelector(`[data-item=\"${data}\"]`);\n  event.target.appendChild(draggedElement);\n}\n```\n\n**Complete Example:**\n```html\n<div class=\"drag-item\" draggable=\"true\">Item 1</div>\n<div class=\"drop-zone\">Drop Zone</div>\n\n<script>\nlet draggedElement = null;\n\ndocument.querySelectorAll('.drag-item').forEach(item => {\n  item.addEventListener('dragstart', (e) => {\n    draggedElement = e.target;\n    e.dataTransfer.setData('text/html', e.target.outerHTML);\n  });\n});\n\ndocument.querySelectorAll('.drop-zone').forEach(zone => {\n  zone.addEventListener('dragover', (e) => e.preventDefault());\n  zone.addEventListener('drop', (e) => {\n    e.preventDefault();\n    if (draggedElement) {\n      zone.appendChild(draggedElement);\n    }\n  });\n});\n</script>\n```\n\n**Key Events:**\n\n| Event | Purpose |\n|-------|----------|\n| `dragstart` | Drag begins - set data |\n| `dragover` | Over drop zone - prevent default |\n| `drop` | Handle drop operation |\n| `dragend` | Clean up after drag |\n\n**DataTransfer Methods:**\n- `setData(format, data)`: Store drag data\n- `getData(format)`: Retrieve drag data\n- `setDragImage(img, x, y)`: Custom drag image\n\n**Common Use Cases:**\n- File uploads, sortable lists, Kanban boards, image galleries, dashboard widgets",
        "difficulty": "Hard",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 38,
        "question": "What are the differences between SVG and Canvas in HTML5? When should you use each?",
        "solution": "SVG and Canvas are both used for graphics, but SVG is vector-based (scalable) while Canvas is raster-based (pixel-based).\n\n**SVG (Scalable Vector Graphics):**\n```html\n<!-- Vector graphics with XML markup -->\n<svg width=\"200\" height=\"150\">\n  <rect x=\"10\" y=\"10\" width=\"80\" height=\"50\" fill=\"lightblue\"/>\n  <circle cx=\"150\" cy=\"35\" r=\"25\" fill=\"lightgreen\"/>\n  <text x=\"10\" y=\"100\" font-size=\"14\">SVG Text</text>\n</svg>\n\n<!-- Interactive with CSS -->\n<style>\n.svg-circle:hover { fill: red; }\n</style>\n<svg><circle class=\"svg-circle\" cx=\"50\" cy=\"50\" r=\"30\"/></svg>\n```\n\n**Canvas (Pixel-based Drawing):**\n```html\n<!-- Raster graphics with JavaScript -->\n<canvas id=\"myCanvas\" width=\"200\" height=\"150\"></canvas>\n\n<script>\nconst canvas = document.getElementById('myCanvas');\nconst ctx = canvas.getContext('2d');\n\n// Draw rectangle\nctx.fillStyle = 'lightblue';\nctx.fillRect(10, 10, 80, 50);\n\n// Draw circle\nctx.beginPath();\nctx.arc(150, 35, 25, 0, 2 * Math.PI);\nctx.fillStyle = 'lightgreen';\nctx.fill();\n\n// Draw text\nctx.fillStyle = 'black';\nctx.fillText('Canvas Text', 10, 100);\n</script>\n```\n\n**Key Differences:**\n\n| Aspect | **SVG** | **Canvas** |\n|--------|---------|------------|\n| **Type** | Vector (XML) | Raster (Pixels) |\n| **Scalability** | ✅ Perfect scaling | ❌ Pixelates when scaled |\n| **DOM Integration** | ✅ Each element in DOM | ❌ Single element |\n| **Interactivity** | ✅ CSS/JS on elements | ❌ Manual hit detection |\n| **Performance** | ❌ Slower with many elements | ✅ Fast animations |\n| **Accessibility** | ✅ Screen reader support | ❌ Not accessible |\n| **Styling** | ✅ CSS supported | ❌ JavaScript only |\n\n**Canvas Animation Example:**\n```javascript\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  // Draw animated content\n  requestAnimationFrame(animate);\n}\nanimate();\n```\n\n**When to Use:**\n- **SVG**: Logos, icons, simple illustrations, scalable graphics, accessibility needed\n- **Canvas**: Games, complex animations, image editing, data visualization with many points, performance-critical apps",
        "difficulty": "Hard",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 39,
        "question": "What is the CSS Box Model? Explain each component and how it affects element sizing.",
        "solution": "The CSS Box Model defines how elements are structured with four layers: content, padding, border, and margin.\n\n**Box Model Structure:**\n```\n┌─────────────────────────┐\n│        Margin           │  ← Outside spacing\n│  ┌─────────────────────┐ │\n│  │      Border         │ │  ← Element border\n│  │  ┌─────────────────┐ │ │\n│  │  │    Padding      │ │ │  ← Inside spacing\n│  │  │  ┌─────────────┐ │ │ │\n│  │  │  │   Content   │ │ │ │  ← Actual content\n│  │  │  └─────────────┘ │ │ │\n│  │  └─────────────────┘ │ │\n│  └─────────────────────┘ │\n└─────────────────────────┘\n```\n\n**Basic Example:**\n```css\n.box {\n  width: 200px;           /* Content width */\n  height: 100px;          /* Content height */\n  padding: 20px;          /* Inside spacing */\n  border: 5px solid blue; /* Border thickness */\n  margin: 15px;           /* Outside spacing */\n}\n\n/* Total element size: */\n/* Width = 200 + 20 + 20 + 5 + 5 = 250px */\n/* Height = 100 + 20 + 20 + 5 + 5 = 150px */\n```\n\n**Box-sizing Property:**\n```css\n/* Default: content-box */\n.content-box {\n  box-sizing: content-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid red;\n  /* Total width = 250px (200 + 40 + 10) */\n}\n\n/* Modern approach: border-box */\n.border-box {\n  box-sizing: border-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid green;\n  /* Total width = 200px (content shrinks to fit) */\n}\n```\n\n**Component Functions:**\n\n| Component | Purpose | Affects Size |\n|-----------|---------|-------------|\n| **Content** | Text, images, elements | Base dimensions |\n| **Padding** | Space inside border | ✅ Increases size |\n| **Border** | Element outline | ✅ Increases size |\n| **Margin** | Space between elements | ❌ Layout only |\n\n**Best Practice:**\n```css\n/* Apply border-box globally */\n* {\n  box-sizing: border-box;\n}\n\n/* Now width/height include padding and border */\n.container {\n  width: 300px;  /* Final width will be exactly 300px */\n  padding: 20px;\n  border: 2px solid #ccc;\n}\n```\n\n**Key Points:**\n- **Margin** creates space between elements (doesn't affect element size)\n- **Border-box** is preferred for predictable sizing\n- **Padding** and **border** add to element dimensions (in content-box mode)\n- Use browser dev tools to visualize the box model",
        "difficulty": "Medium",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Box Model",
            "Layout",
            "Sizing",
            "Fundamentals"
        ]
    },
    {
        "id": 40,
        "question": "Explain CSS positioning (static, relative, absolute, fixed, sticky) with practical examples.",
        "solution": "CSS positioning controls how elements are placed in the document, with five different position values affecting layout flow and reference points.\n\n**Position Types:**\n```css\n.static    { position: static; }    /* Default, normal flow */\n.relative  { position: relative; }  /* Offset from original position */\n.absolute  { position: absolute; }  /* Positioned to nearest positioned ancestor */\n.fixed     { position: fixed; }     /* Positioned to viewport */\n.sticky    { position: sticky; }    /* Relative until threshold, then fixed */\n```\n\n**Positioning Examples:**\n```css\n/* Relative: moves from original position */\n.relative-box {\n  position: relative;\n  top: 20px;     /* 20px down from original */\n  left: 30px;    /* 30px right from original */\n  /* Original space preserved in document flow */\n}\n\n/* Absolute: positioned to nearest positioned parent */\n.container {\n  position: relative; /* Creates positioning context */\n}\n\n.absolute-box {\n  position: absolute;\n  top: 10px;    /* From container's top */\n  right: 10px;  /* From container's right */\n  /* Removed from normal document flow */\n}\n\n/* Fixed: always relative to viewport */\n.fixed-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  /* Stays in place when scrolling */\n}\n\n/* Sticky: relative until scroll threshold */\n.sticky-nav {\n  position: sticky;\n  top: 20px; /* Becomes fixed when 20px from viewport top */\n}\n```\n\n**Position Comparison:**\n\n| Position | **Document Flow** | **Reference Point** | **Common Use** |\n|----------|-------------------|---------------------|----------------|\n| `static` | ✅ Normal flow | None | Default behavior |\n| `relative` | ✅ Space preserved | Original position | Minor adjustments |\n| `absolute` | ❌ Removed | Positioned ancestor | Overlays, tooltips |\n| `fixed` | ❌ Removed | Viewport | Headers, modals |\n| `sticky` | ✅ Until threshold | Scroll container | Section headers |\n\n**Z-index for Layering:**\n```css\n.modal     { position: fixed; z-index: 1000; }\n.dropdown  { position: absolute; z-index: 100; }\n.tooltip   { position: absolute; z-index: 50; }\n```\n\n**Key Points:**\n- **Static**: Default positioning, no special behavior\n- **Relative**: Creates positioning context for children\n- **Absolute**: Remove from flow, position to nearest positioned parent\n- **Fixed**: Always relative to viewport, unaffected by scrolling\n- **Sticky**: Hybrid of relative and fixed based on scroll position",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Positioning",
            "Layout",
            "Static",
            "Relative",
            "Absolute",
            "Fixed",
            "Sticky"
        ]
    },
    {
        "id": 41,
        "question": "What is CSS Flexbox? Demonstrate flex container and flex item properties with practical examples.",
        "solution": "CSS Flexbox is a one-dimensional layout method for arranging items in rows or columns with flexible sizing and powerful alignment control.\n\n**Basic Flexbox Setup:**\n```css\n.flex-container {\n  display: flex;                    /* Enable flexbox */\n  flex-direction: row;              /* row | column */\n  justify-content: flex-start;      /* Main axis alignment */\n  align-items: stretch;             /* Cross axis alignment */\n  gap: 10px;                        /* Space between items */\n}\n\n.flex-item {\n  flex: 1;                          /* Grow to fill space */\n}\n```\n\n**Container Properties:**\n```css\n.flex-container {\n  /* Direction and wrapping */\n  flex-direction: row;              /* row | column | row-reverse | column-reverse */\n  flex-wrap: nowrap;                /* nowrap | wrap | wrap-reverse */\n  \n  /* Alignment */\n  justify-content: center;          /* Main axis: flex-start | center | space-between | space-around */\n  align-items: center;              /* Cross axis: flex-start | center | stretch | baseline */\n  align-content: center;            /* Multi-line alignment */\n}\n```\n\n**Item Properties:**\n```css\n.flex-item {\n  flex-grow: 1;                     /* How much to grow (0 = don't grow) */\n  flex-shrink: 1;                   /* How much to shrink (0 = don't shrink) */\n  flex-basis: auto;                 /* Initial size before growing/shrinking */\n  flex: 1 1 auto;                   /* Shorthand: grow shrink basis */\n  \n  align-self: center;               /* Override container's align-items */\n  order: 2;                         /* Change visual order */\n}\n```\n\n**Common Patterns:**\n```css\n/* Perfect centering */\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Navigation bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* Equal height columns */\n.columns {\n  display: flex;\n}\n.column {\n  flex: 1;                          /* Each column takes equal space */\n}\n\n/* Sidebar layout */\n.layout {\n  display: flex;\n}\n.sidebar {\n  flex: 0 0 200px;                  /* Fixed 200px width */\n}\n.main {\n  flex: 1;                          /* Takes remaining space */\n}\n\n/* Responsive cards */\n.cards {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n.card {\n  flex: 1 1 300px;                  /* Min 300px, grow/shrink as needed */\n}\n```\n\n**Alignment Examples:**\n\n| Property | Values | Effect |\n|----------|--------|--------|\n| `justify-content` | `flex-start`, `center`, `space-between` | Main axis alignment |\n| `align-items` | `flex-start`, `center`, `stretch` | Cross axis alignment |\n| `align-self` | `flex-start`, `center`, `stretch` | Individual item alignment |\n\n**Key Benefits:**\n- **Easy centering**: Both horizontal and vertical\n- **Flexible sizing**: Items can grow and shrink\n- **Order control**: Change visual order without changing HTML\n- **Responsive design**: Wrap items to new lines\n- **No floats needed**: Clean, modern layout approach",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Responsive",
            "Alignment",
            "Modern CSS"
        ]
    },
    {
        "id": 42,
        "question": "Explain CSS Grid Layout system. How does it differ from Flexbox? Provide practical examples.",
        "solution": "**CSS Grid** is a two-dimensional layout system for creating complex layouts with rows and columns simultaneously.\n\n**Grid vs Flexbox:**\n\n| Feature | CSS Grid | Flexbox |\n|---------|----------|----------|\n| **Dimensions** | 2D (rows + columns) | 1D (single axis) |\n| **Best For** | Page layouts | Component alignment |\n| **Control** | Precise positioning | Flexible distribution |\n\n**Basic Grid Setup:**\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr; /* 3 columns */\n  grid-template-rows: auto 1fr auto; /* Header, main, footer */\n  gap: 20px;\n  min-height: 100vh;\n}\n\n/* Grid areas for layout */\n.layout-grid {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 150px;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n```\n\n**Grid Item Positioning:**\n\n```css\n.grid-item {\n  grid-column: 1 / 3; /* Span from line 1 to line 3 */\n  grid-row: 2 / 4; /* Span 2 rows */\n  /* OR */\n  grid-area: 2 / 1 / 4 / 3; /* row-start / col-start / row-end / col-end */\n}\n```\n\n**When to Use:**\n- **Grid**: Page layouts, dashboards, card grids\n- **Flexbox**: Navigation bars, button groups, component alignment\n\n**Reference:** [MDN CSS Grid Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Grid",
            "Layout",
            "2D Layout",
            "Advanced CSS",
            "Responsive"
        ]
    },
    {
        "id": 43,
        "question": "What are CSS media queries? Demonstrate responsive design techniques with breakpoints and mobile-first approach.",
        "solution": "**CSS Media Queries** allow you to apply styles conditionally based on device characteristics like screen size, orientation, and resolution.\n\n**Basic Syntax:**\n\n```css\n@media screen and (max-width: 768px) {\n  /* Styles for screens 768px and smaller */\n}\n\n@media (orientation: landscape) {\n  /* Styles for landscape orientation */\n}\n\n@media print {\n  /* Styles for printing */\n}\n```\n\n**Mobile-First Breakpoints:**\n\n```css\n/* Base styles (mobile) */\n.container {\n  width: 100%;\n  padding: 10px;\n}\n\n/* Tablets */\n@media (min-width: 768px) {\n  .container {\n    max-width: 720px;\n    margin: 0 auto;\n    padding: 15px;\n  }\n}\n\n/* Desktop */\n@media (min-width: 992px) {\n  .container {\n    max-width: 960px;\n    padding: 20px;\n  }\n}\n\n/* Large screens */\n@media (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n```\n\n**Responsive Navigation:**\n\n```css\n/* Mobile: Hidden menu with toggle */\n.nav-menu {\n  display: none;\n  flex-direction: column;\n}\n\n.nav-toggle {\n  display: block;\n}\n\n/* Desktop: Horizontal menu */\n@media (min-width: 768px) {\n  .nav-menu {\n    display: flex;\n    flex-direction: row;\n  {\n  \n  .nav-toggle {\n    display: none;\n  }\n}\n```\n\n**Advanced Features:**\n\n```css\n/* Dark mode support */\n@media (prefers-color-scheme: dark) {\n  body {\n    background: #1a1a1a;\n    color: white;\n  }\n}\n\n/* Reduced motion */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n  }\n}\n```\n\n**Best Practices:**\n- Use mobile-first approach (min-width queries)\n- Test on real devices, not just browser dev tools\n- Keep breakpoints simple and content-focused\n- Use relative units (em, rem, %) for better scalability\n\n**Reference:** [MDN Media Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries)",
        "difficulty": "Medium",
        "category": "Responsive Design",
        "type": "CSS",
        "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Mobile First",
            "Breakpoints"
        ]
    },
    {
        "id": 44,
        "question": "What are CSS animations and transitions? Demonstrate different animation techniques with keyframes and timing functions.",
        "solution": "**CSS Animations and Transitions** create smooth visual effects and interactions without JavaScript.\n\n**Transitions vs Animations:**\n\n| Feature | Transitions | Animations |\n|---------|-------------|------------|\n| **Trigger** | State changes (hover, focus) | Automatic or class-based |\n| **Control** | Simple start/end | Complex keyframes |\n| **Best For** | Hover effects, state changes | Loading, complex sequences |\n\n**CSS Transitions:**\n\n```css\n.button {\n  background: #007bff;\n  transition: all 0.3s ease;\n}\n\n.button:hover {\n  background: #0056b3;\n  transform: translateY(-2px);\n}\n\n/* Specific properties */\n.element {\n  transition: background-color 0.3s ease,\n              transform 0.2s ease-out;\n}\n```\n\n**CSS Animations with Keyframes:**\n\n```css\n/* Define animation */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Apply animation */\n.fade-in {\n  animation: fadeIn 0.5s ease-out;\n}\n\n/* Complex animation with percentages */\n@keyframes bounce {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-20px); }\n}\n\n.bounce {\n  animation: bounce 1s infinite;\n}\n```\n\n**Common Animation Patterns:**\n\n```css\n/* Loading spinner */\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.spinner {\n  animation: spin 1s linear infinite;\n}\n\n/* Pulse effect */\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n.pulse {\n  animation: pulse 2s ease-in-out infinite;\n}\n```\n\n**Timing Functions:**\n- `ease`: Slow start, fast middle, slow end\n- `ease-in`: Slow start, fast end\n- `ease-out`: Fast start, slow end (best for entrances)\n- `linear`: Constant speed\n- `cubic-bezier(0.68, -0.55, 0.265, 1.55)`: Custom bounce\n\n**Performance Best Practices:**\n- Animate `transform` and `opacity` for GPU acceleration\n- Avoid animating layout properties (`width`, `height`, `margin`)\n- Use `will-change` sparingly for complex animations\n- Respect `prefers-reduced-motion` for accessibility\n\n**Reference:** [MDN CSS Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations)",
        "difficulty": "Medium",
        "category": "CSS Animations",
        "type": "CSS",
        "tags": [
            "CSS",
            "Animations",
            "Transitions",
            "Keyframes",
            "Effects",
            "Performance"
        ]
    },
    {
        "id": 46,
        "question": "What is CSS and explain the Box Model concept with an example?",
        "solution": "**CSS** (Cascading Style Sheets) is a language for styling HTML elements.\n\n**The Box Model** treats every HTML element as a box with four layers:\n\n| Layer | Description | Position |\n|-------|-------------|----------|\n| **Content** | Actual content (text, images) | Innermost |\n| **Padding** | Transparent space around content | Inside border |\n| **Border** | Line around padding and content | Between padding and margin |\n| **Margin** | Transparent space outside border | Outermost |\n\n```css\n.box {\n  width: 200px;        /* Content width */\n  height: 100px;       /* Content height */\n  padding: 20px;       /* Space inside border */\n  border: 5px solid black; /* Border around padding */\n  margin: 15px;        /* Space outside border */\n  background: lightblue;\n}\n\n/* Total width = width + padding + border + margin */\n/* Total width = 200 + 40 + 10 + 30 = 280px */\n```\n\n```html\n<div class=\"box\">Content goes here</div>\n```\n\n**Visualization:**\n```\n┌─────────────────────────────────┐\n│           Margin (15px)         │\n│ ┌─────────────────────────────┐ │\n│ │       Border (5px)          │ │\n│ │ ┌─────────────────────────┐ │ │\n│ │ │     Padding (20px)      │ │ │\n│ │ │ ┌─────────────────────┐ │ │ │\n│ │ │ │   Content (200x100) │ │ │ │\n│ │ │ └─────────────────────┘ │ │ │\n│ │ └─────────────────────────┘ │ │\n│ └─────────────────────────────┘ │\n└─────────────────────────────────┘\n```",
        "difficulty": "Easy",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Box Model",
            "Layout",
            "Fundamentals"
        ]
    },
    {
        "id": 47,
        "question": "What are the advantages of CSS? Explain how CSS improves web development.",
        "solution": "**Advantages of CSS:**\n\n| Advantage | Description | Benefit |\n|-----------|-------------|----------|\n| **Separation of Concerns** | Separates content (HTML) from presentation (CSS) | Cleaner, maintainable code |\n| **Consistency** | One stylesheet for multiple pages | Uniform design across site |\n| **Maintainability** | Update styles in one place | Easy site-wide changes |\n| **Performance** | External stylesheets are cached | Faster subsequent page loads |\n| **Flexibility** | Multiple designs for same content | Easy theme switching |\n| **Accessibility** | Better control over presentation | Improved user experience |\n\n**Example demonstrating advantages:**\n\n```css\n/* styles.css - One file for entire website */\n:root {\n  --primary-color: #007bff;\n  --font-family: 'Arial', sans-serif;\n}\n\n.button {\n  background-color: var(--primary-color);\n  font-family: var(--font-family);\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  color: white;\n  cursor: pointer;\n}\n\n.button:hover {\n  background-color: #0056b3;\n}\n\n/* Media query for responsiveness */\n@media (max-width: 768px) {\n  .button {\n    padding: 8px 16px;\n    font-size: 14px;\n  }\n}\n```\n\n```html\n<!-- Multiple pages can use the same styles -->\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <button class=\"button\">Click Me</button>\n  <button class=\"button\">Another Button</button>\n</body>\n</html>\n```\n\n**Benefits in Action:**\n- **Consistency**: All buttons look the same across pages\n- **Maintainability**: Change `--primary-color` once, updates everywhere\n- **Performance**: CSS file cached after first load\n- **Responsiveness**: Automatic mobile optimization",
        "difficulty": "Easy",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Advantages",
            "Best Practices",
            "Performance"
        ]
    },
    {
        "id": 48,
        "question": "What are the limitations of CSS? Provide examples of challenges developers face.",
        "solution": "**CSS Limitations:**\n\n| Limitation | Description | Impact |\n|------------|-------------|--------|\n| **Browser Compatibility** | Different interpretations across browsers | Need vendor prefixes, fallbacks |\n| **No Parent Selector** | Can't select parent based on child | Limited styling options |\n| **No Logic/Variables** | No programming constructs | Repetitive code (partly solved with CSS variables) |\n| **Specificity Conflicts** | Complex inheritance rules | Hard to debug style conflicts |\n| **Layout Limitations** | Complex layouts require workarounds | Need CSS frameworks or preprocessors |\n\n**Examples of Limitations:**\n\n```css\n/* 1. Browser Compatibility Issues */\n.element {\n  /* Need vendor prefixes for older browsers */\n  -webkit-transform: rotate(45deg);\n  -moz-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n\n/* 2. No Parent Selector */\n/* This DOESN'T work - can't select parent based on child */\n/* .parent < .child { color: red; } */\n\n/* Workaround: Use child selector instead */\n.parent:has(.active-child) {\n  /* Only works in modern browsers */\n  background-color: yellow;\n}\n\n/* 3. Specificity Conflicts */\n.button { color: blue; }           /* Specificity: 10 */\n#header .button { color: red; }    /* Specificity: 110 - wins */\n.button.primary { color: green; }  /* Specificity: 20 - loses */\n\n/* 4. No Variables (before CSS custom properties) */\n.header { background-color: #007bff; }\n.button { background-color: #007bff; }\n.footer { background-color: #007bff; }\n/* Repetitive and hard to maintain */\n\n/* Modern solution with CSS variables */\n:root {\n  --primary-color: #007bff;\n}\n.header, .button, .footer {\n  background-color: var(--primary-color);\n}\n```\n\n**Common Workarounds:**\n\n```css\n/* Use CSS Reset/Normalize for browser consistency */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Use CSS custom properties for maintainability */\n:root {\n  --spacing-small: 8px;\n  --spacing-medium: 16px;\n  --color-primary: #007bff;\n}\n\n/* Use CSS preprocessors (Sass) for logic */\n/* This would be in SCSS, not regular CSS */\n/*\n$primary-color: #007bff;\n@mixin button-style($bg-color) {\n  background-color: $bg-color;\n  padding: 10px 20px;\n}\n*/\n```",
        "difficulty": "Medium",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Limitations",
            "Browser Compatibility",
            "Debugging"
        ]
    },
    {
        "id": 49,
        "question": "How do you include CSS in a webpage? Explain all methods with examples.",
        "solution": "**Three Ways to Include CSS:**\n\n| Method | Location | Priority | Use Case |\n|--------|----------|----------|----------|\n| **Inline CSS** | HTML element's `style` attribute | Highest | Quick fixes, dynamic styles |\n| **Internal CSS** | `<style>` tag in `<head>` | Medium | Single page styles |\n| **External CSS** | Separate `.css` file | Lowest | Multiple pages (recommended) |\n\n**1. Inline CSS (Highest Priority):**\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n  <p style=\"color: red; font-size: 18px; margin: 10px;\">\n    This text has inline styling\n  </p>\n  \n  <div style=\"background-color: lightblue; padding: 20px; border-radius: 5px;\">\n    Inline styled div\n  </div>\n</body>\n</html>\n```\n\n**2. Internal CSS:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 20px;\n    }\n    \n    .header {\n      background-color: #333;\n      color: white;\n      padding: 15px;\n      text-align: center;\n    }\n    \n    .content {\n      margin: 20px 0;\n      line-height: 1.6;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>My Website</h1>\n  </div>\n  <div class=\"content\">\n    <p>Content goes here</p>\n  </div>\n</body>\n</html>\n```\n\n**3. External CSS (Recommended):**\n\n```css\n/* styles.css */\n:root {\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --font-size-base: 16px;\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  font-size: var(--font-size-base);\n  line-height: 1.6;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.btn {\n  background-color: var(--primary-color);\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n  background-color: #0056b3;\n}\n```\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <!-- Multiple CSS files can be linked -->\n  <link rel=\"stylesheet\" href=\"responsive.css\">\n  <link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Welcome to My Site</h1>\n    <button class=\"btn\">Click Me</button>\n  </div>\n</body>\n</html>\n```\n\n**CSS Specificity Order:**\n\n```html\n<style>\n  p { color: blue; }        /* Internal CSS */\n</style>\n<link rel=\"stylesheet\" href=\"external.css\"> <!-- p { color: green; } -->\n\n<p style=\"color: red;\" class=\"text\">What color am I?</p>\n<!-- Result: RED (inline wins over internal and external) -->\n```\n\n**Best Practices:**\n- Use **external CSS** for production websites\n- Use **internal CSS** for single-page prototypes\n- Use **inline CSS** sparingly for dynamic styles or quick fixes\n- Link CSS files in `<head>` for better performance",
        "difficulty": "Easy",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Linking",
            "Inline",
            "External",
            "Internal"
        ]
    },
    {
        "id": 50,
        "question": "What are the different types of CSS Selectors? Provide examples of each type.",
        "solution": "**CSS Selectors** target HTML elements for styling based on various criteria.\n\n**Main Selector Types:**\n\n| Selector | Syntax | Description | Specificity |\n|----------|--------|-------------|-------------|\n| **Universal** | `*` | All elements | 0 |\n| **Element** | `div`, `p` | By tag name | 1 |\n| **Class** | `.class-name` | By class attribute | 10 |\n| **ID** | `#id-name` | By id attribute | 100 |\n| **Attribute** | `[type=\"text\"]` | By attribute value | 10 |\n\n**Relationship Selectors:**\n\n```css\n/* Descendant (space) - any nested element */\n.nav a { color: blue; }\n\n/* Child (>) - direct children only */\n.menu > li { display: inline; }\n\n/* Adjacent sibling (+) - immediate next element */\nh2 + p { margin-top: 0; }\n\n/* General sibling (~) - all following siblings */\nh2 ~ p { color: gray; }\n```\n\n**Pseudo-classes and Pseudo-elements:**\n\n```css\n/* Pseudo-classes (element states) */\na:hover { color: red; }\nli:first-child { font-weight: bold; }\ninput:focus { border-color: blue; }\ntr:nth-child(even) { background: #f2f2f2; }\n\n/* Pseudo-elements (element parts) */\np::first-letter { font-size: 2em; }\n.quote::before { content: \"\\201C\"; }\n.tooltip::after { content: attr(data-tip); }\n```\n\n**Attribute Selectors:**\n\n```css\n/* Exact match */\ninput[type=\"email\"] { background: #f9f9f9; }\n\n/* Starts with */\na[href^=\"https\"] { color: green; }\n\n/* Ends with */\na[href$=\".pdf\"] { color: red; }\n\n/* Contains */\na[href*=\"example\"] { font-weight: bold; }\n```\n\n**Specificity Order:**\n1. Inline styles (1000)\n2. IDs (100)\n3. Classes, attributes, pseudo-classes (10)\n4. Elements, pseudo-elements (1)\n5. Universal selector (0)\n\n**Reference:** [MDN CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)",
        "difficulty": "Medium",
        "category": "Selectors",
        "type": "CSS",
        "tags": [
            "CSS",
            "Selectors",
            "Specificity",
            "Targeting"
        ]
    },
    {
        "id": 51,
        "question": "What is a CSS Preprocessor? Explain the benefits and provide examples using SASS.",
        "solution": "**CSS Preprocessors** extend CSS with programming features like variables, nesting, and functions, then compile to regular CSS.\n\n**Popular Preprocessors:**\n- **SASS/SCSS**: Most popular, powerful features\n- **LESS**: JavaScript-based, simpler syntax\n- **Stylus**: Flexible syntax, Python-like\n\n**Key Benefits:**\n\n| Feature | Benefit | Example |\n|---------|---------|----------|\n| **Variables** | Consistent values | `$primary-color: #007bff;` |\n| **Nesting** | Organized code | `.nav { .link { } }` |\n| **Mixins** | Reusable code blocks | `@mixin button-style` |\n| **Functions** | Dynamic calculations | `darken($color, 10%)` |\n| **Partials** | Modular files | `@import 'variables'` |\n\n**SASS/SCSS Examples:**\n\n```scss\n// Variables\n$primary-color: #007bff;\n$font-size: 16px;\n$spacing: 1rem;\n\n// Mixins\n@mixin button($bg-color) {\n  background: $bg-color;\n  padding: $spacing;\n  border: none;\n  border-radius: 4px;\n  \n  &:hover {\n    background: darken($bg-color, 10%);\n  }\n}\n\n// Nesting\n.navbar {\n  background: $primary-color;\n  \n  .nav-link {\n    color: white;\n    \n    &:hover {\n      opacity: 0.8;\n    }\n    \n    &.active {\n      font-weight: bold;\n    }\n  }\n}\n\n// Using mixins\n.btn-primary {\n  @include button($primary-color);\n}\n\n// Functions\n@function px-to-rem($px) {\n  @return $px / $font-size * 1rem;\n}\n\n.container {\n  max-width: px-to-rem(1200px);\n}\n\n// Loops\n$sizes: (small: 12px, medium: 16px, large: 20px);\n\n@each $name, $size in $sizes {\n  .text-#{$name} {\n    font-size: $size;\n  }\n}\n```\n\n**Compiles to CSS:**\n\n```css\n.navbar {\n  background: #007bff;\n}\n\n.navbar .nav-link {\n  color: white;\n}\n\n.navbar .nav-link:hover {\n  opacity: 0.8;\n}\n\n.btn-primary {\n  background: #007bff;\n  padding: 1rem;\n  border: none;\n  border-radius: 4px;\n}\n\n.text-small { font-size: 12px; }\n.text-medium { font-size: 16px; }\n.text-large { font-size: 20px; }\n```\n\n**Setup:**\n\n```bash\n# Install SASS\nnpm install -g sass\n\n# Compile\nsass input.scss output.css\n\n# Watch for changes\nsass --watch input.scss:output.css\n```\n\n**When to Use:**\n- Large projects with multiple developers\n- Need for consistent design tokens\n- Complex styling with calculations\n- Component-based architecture\n\n**Reference:** [SASS Documentation](https://sass-lang.com/documentation)",
        "difficulty": "Hard",
        "category": "Preprocessors & Resets",
        "type": "CSS",
        "tags": [
            "CSS",
            "SASS",
            "Preprocessor",
            "Variables",
            "Mixins"
        ]
    },
    {
        "id": 52,
        "question": "What are Viewport Units (vw & vh)? How do they work and when should you use them?",
        "solution": "**Viewport Units** are CSS units relative to the browser's viewport (visible screen area).\n\n**Viewport Unit Types:**\n\n| Unit | Description | Calculation |\n|------|-------------|-------------|\n| **vw** | 1% of viewport width | `100vw = full screen width` |\n| **vh** | 1% of viewport height | `100vh = full screen height` |\n| **vmin** | 1% of smaller dimension | Responsive to orientation |\n| **vmax** | 1% of larger dimension | Always uses larger side |\n\n**Common Use Cases:**\n\n```css\n/* Full-screen hero section */\n.hero {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Responsive typography */\n.title {\n  font-size: 4vw; /* Scales with viewport width */\n  font-size: clamp(1.5rem, 4vw, 3rem); /* With limits */\n}\n\n/* Modal overlay */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.8);\n}\n\n/* Responsive spacing */\n.section {\n  padding: 5vh 5vw; /* 5% of viewport height/width */\n}\n\n/* Square element that maintains aspect ratio */\n.square {\n  width: 20vmin; /* 20% of smaller dimension */\n  height: 20vmin;\n}\n```\n\n**Safe Usage with Limits:**\n\n```css\n/* Always set minimum and maximum values */\n.responsive-text {\n  font-size: clamp(1rem, 3vw, 2.5rem);\n  /* Minimum 1rem, scales with 3vw, maximum 2.5rem */\n}\n\n.container {\n  width: min(90vw, 1200px);\n  /* 90% of viewport width, but never more than 1200px */\n}\n\n.sidebar {\n  height: max(50vh, 400px);\n  /* 50% of viewport height, but at least 400px */\n}\n```\n\n**Best Practices:**\n\n**✅ Good for:**\n- Full-screen sections\n- Hero banners\n- Modal overlays\n- Responsive spacing\n- Creative layouts\n\n**❌ Avoid for:**\n- Small UI elements (buttons, icons)\n- Body text (can become unreadable)\n- Navigation elements\n- When precise sizing is needed\n\n**Mobile Considerations:**\n\n```css\n/* Account for mobile browser chrome */\n.mobile-hero {\n  height: 100vh;\n  height: 100dvh; /* Dynamic viewport height - new */\n}\n\n/* Responsive breakpoints with viewport units */\n@media (max-width: 768px) {\n  .hero {\n    font-size: 8vw; /* Larger on mobile */\n  }\n}\n```\n\n**Reference:** [MDN Viewport Units](https://developer.mozilla.org/en-US/docs/Web/CSS/length#viewport-percentage_lengths)",
        "difficulty": "Medium",
        "category": "Preprocessors & Resets",
        "type": "CSS",
        "tags": [
            "CSS",
            "Viewport Units",
            "Responsive",
            "vw",
            "vh"
        ]
    },
    {
        "id": 53,
        "question": "What is the difference between Reset CSS and Normalize CSS? When should you use each?",
        "solution": "**Reset CSS** and **Normalize CSS** are two approaches to handle browser default styling inconsistencies.\n\n**Key Differences:**\n\n| Aspect | Reset CSS | Normalize CSS |\n|--------|-----------|---------------|\n| **Approach** | Remove all default styles | Fix inconsistencies, keep useful defaults |\n| **Philosophy** | Start from zero | Start from consistent base |\n| **File Size** | Smaller (~2KB) | Larger (~7KB) |\n| **Accessibility** | May remove helpful defaults | Preserves accessibility features |\n| **Maintenance** | More custom styling needed | Less custom styling required |\n\n**Reset CSS Example:**\n\n```css\n/* Modern CSS Reset */\n*, *::before, *::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  line-height: 1.5;\n  font-family: system-ui, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\nul, ol {\n  list-style: none;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n\nbutton, input, select, textarea {\n  font: inherit;\n  border: none;\n  background: none;\n}\n```\n\n**Normalize CSS Example:**\n\n```css\n/* Normalize.css (excerpt) */\nhtml {\n  line-height: 1.15; /* Correct line height */\n  -webkit-text-size-adjust: 100%; /* Prevent iOS font scaling */\n}\n\nbody {\n  margin: 0; /* Remove default margin */\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; /* Consistent margins */\n}\n\nbutton {\n  font-family: inherit;\n  font-size: 100%;\n  line-height: 1.15;\n  margin: 0;\n  overflow: visible;\n}\n\nbutton::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\nbutton:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n```\n\n**When to Use Each:**\n\n**Use Reset CSS when:**\n- Building custom design systems\n- Want complete control over styling\n- Working with unique, non-standard designs\n- Team prefers styling from scratch\n\n**Use Normalize CSS when:**\n- Want to preserve useful browser defaults\n- Working with content-heavy sites\n- Prioritizing accessibility\n- Building on existing frameworks\n- Need quick, consistent starting point\n\n**Modern Hybrid Approach:**\n\n```css\n/* Best of both worlds */\n\n/* Reset for layout */\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\nbody, h1, h2, h3, h4, p, ul, ol {\n  margin: 0;\n}\n\n/* Normalize for functionality */\nbutton, input, select, textarea {\n  font: inherit;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Accessibility preservation */\na:focus, button:focus {\n  outline: 2px solid currentColor;\n  outline-offset: 2px;\n}\n\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n```\n\n**Implementation:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Option 1: Normalize via CDN -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\">\n  \n  <!-- Option 2: Custom reset -->\n  <link rel=\"stylesheet\" href=\"reset.css\">\n  \n  <!-- Your styles -->\n  <link rel=\"stylesheet\" href=\"main.css\">\n</head>\n<body>\n  <h1>Consistent heading</h1>\n  <p>Predictable paragraph styling</p>\n</body>\n</html>\n```\n\n**Popular Solutions:**\n- **Eric Meyer's Reset**: Classic reset approach\n- **Normalize.css**: Most popular normalize solution\n- **Modern CSS Reset**: Lightweight, accessibility-focused\n- **Tailwind Preflight**: Modern reset for utility-first CSS\n\n**Reference:** [Normalize.css](https://necolas.github.io/normalize.css/)",
        "difficulty": "Medium",
        "category": "Preprocessors & Resets",
        "type": "CSS",
        "tags": [
            "CSS",
            "Reset",
            "Normalize",
            "Browser Defaults",
            "Cross-browser"
        ]
    },
    {
        "id": 54,
        "question": "How do you test a webpage in different browsers? What tools and techniques are available?",
        "solution": "**Browser Testing** ensures websites work consistently across different browsers, devices, and operating systems.\n\n**Testing Approaches:**\n\n| Method | Description | Tools | Best For |\n|--------|-------------|-------|----------|\n| **Manual Testing** | Test in real browsers | Browser DevTools | Development phase |\n| **Automated Testing** | Script-based testing | Playwright, Selenium | CI/CD pipelines |\n| **Cloud Services** | Remote browser testing | BrowserStack, LambdaTest | Production testing |\n| **Visual Testing** | Screenshot comparison | Percy, Chromatic | UI regression |\n\n**Built-in Browser Tools:**\n\n```javascript\n// Chrome DevTools - Responsive testing\n// F12 → Device Toolbar (Ctrl+Shift+M)\n\n// Test viewport dimensions\nconsole.log('Viewport:', window.innerWidth, 'x', window.innerHeight);\n\n// Firefox Responsive Design Mode\n// F12 → Responsive Design Mode (Ctrl+Shift+M)\n\n// Safari Web Inspector\n// Develop → Show Web Inspector → Responsive Design Mode\n```\n\n**Feature Detection (Better than Browser Detection):**\n\n```css\n/* CSS Feature Queries */\n@supports (display: grid) {\n  .container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@supports not (display: grid) {\n  .container {\n    display: flex;\n    flex-wrap: wrap;\n  }\n}\n\n/* Progressive Enhancement */\n.button {\n  background: #007bff; /* Fallback */\n  background: linear-gradient(45deg, #007bff, #0056b3); /* Enhancement */\n}\n```\n\n```javascript\n// JavaScript Feature Detection\nconst features = {\n  localStorage: typeof Storage !== 'undefined',\n  geolocation: 'geolocation' in navigator,\n  canvas: (() => {\n    const canvas = document.createElement('canvas');\n    return !!(canvas.getContext && canvas.getContext('2d'));\n  })()\n};\n\n// Use with fallbacks\nif (features.localStorage) {\n  localStorage.setItem('theme', 'dark');\n} else {\n  document.cookie = 'theme=dark';\n}\n```\n\n**Automated Testing with Playwright:**\n\n```javascript\nconst { chromium, firefox, webkit } = require('playwright');\n\nasync function crossBrowserTest() {\n  const browsers = [chromium, firefox, webkit];\n  \n  for (const browserType of browsers) {\n    const browser = await browserType.launch();\n    const page = await browser.newPage();\n    \n    // Test different viewports\n    const viewports = [\n      { width: 1920, height: 1080 }, // Desktop\n      { width: 768, height: 1024 },  // Tablet\n      { width: 375, height: 667 }    // Mobile\n    ];\n    \n    for (const viewport of viewports) {\n      await page.setViewportSize(viewport);\n      await page.goto('https://yourwebsite.com');\n      \n      // Take screenshot\n      await page.screenshot({\n        path: `${browserType.name()}-${viewport.width}x${viewport.height}.png`\n      });\n      \n      // Test functionality\n      await page.click('.menu-button');\n      await page.waitForSelector('.menu-open');\n    }\n    \n    await browser.close();\n  }\n}\n```\n\n**Cloud Testing Services:**\n\n```javascript\n// BrowserStack integration\nconst { Builder } = require('selenium-webdriver');\n\nconst capabilities = {\n  'browserName': 'Chrome',\n  'browserVersion': 'latest',\n  'os': 'Windows',\n  'osVersion': '10',\n  'browserstack.user': process.env.BROWSERSTACK_USERNAME,\n  'browserstack.key': process.env.BROWSERSTACK_ACCESS_KEY\n};\n\nconst driver = new Builder()\n  .usingServer('http://hub-cloud.browserstack.com/wd/hub')\n  .withCapabilities(capabilities)\n  .build();\n```\n\n**Testing Checklist:**\n\n**Browsers to Test:**\n- Chrome (latest + 2 previous versions)\n- Firefox (latest + 2 previous versions)\n- Safari (latest + 1 previous version)\n- Edge (latest version)\n- Mobile browsers (Chrome Mobile, Safari Mobile)\n\n**Viewports to Test:**\n- Mobile: 320px - 768px\n- Tablet: 768px - 1024px\n- Desktop: 1024px+\n- Large screens: 1920px+\n\n**What to Test:**\n- Layout responsiveness\n- Interactive elements (buttons, forms, navigation)\n- Animations and transitions\n- Font rendering\n- Image loading and optimization\n- JavaScript functionality\n- Accessibility features\n\n**Validation Tools:**\n- HTML Validator: [W3C Markup Validator](https://validator.w3.org/)\n- CSS Validator: [W3C CSS Validator](https://jigsaw.w3.org/css-validator/)\n- Accessibility: [WAVE Web Accessibility Evaluator](https://wave.webaim.org/)\n- Performance: [Google PageSpeed Insights](https://pagespeed.web.dev/)\n\n**Best Practices:**\n- Start with mobile-first design\n- Use progressive enhancement over graceful degradation\n- Test early and often during development\n- Automate repetitive testing tasks\n- Use feature detection instead of browser detection\n- Test on real devices when possible\n- Monitor analytics for actual user browser data\n- Keep a testing matrix updated with supported browsers\n\n**Reference:** [Can I Use](https://caniuse.com/) for browser feature support",
        "difficulty": "Hard",
        "category": "Block, Inline, and Box Sizing",
        "type": "CSS",
        "tags": [
            "CSS",
            "Browser Testing",
            "Cross-browser",
            "DevTools",
            "Automation"
        ]
    },
    {
        "id": 55,
        "question": "What is the difference between a pseudo-class and a pseudo-element in CSS? Provide examples of each.",
        "solution": "**Pseudo-class** selects elements in a specific state, while **pseudo-element** styles a specific part of an element.\n\n**Pseudo-classes** (single colon `:`):\n- Select elements based on their state or position\n- Examples: `:hover`, `:active`, `:focus`, `:first-child`, `:nth-child()`\n\n**Pseudo-elements** (double colon `::`):\n- Style specific parts of an element\n- Examples: `::before`, `::after`, `::first-line`, `::first-letter`\n\n```css\n/* Pseudo-class examples */\na:hover {\n  color: red; /* Changes color when hovering over a link */\n}\n\nli:first-child {\n  font-weight: bold; /* Styles the first list item */\n}\n\ninput:focus {\n  border: 2px solid blue; /* Styles focused input */\n}\n\n/* Pseudo-element examples */\np::before {\n  content: \"→ \"; /* Adds content before paragraph */\n  color: blue;\n}\n\np::first-letter {\n  font-size: 2em; /* Makes first letter larger */\n  float: left;\n}\n\n.tooltip::after {\n  content: attr(data-tooltip); /* Shows tooltip content */\n  position: absolute;\n}\n```\n\n**Key Difference**: Pseudo-classes select existing elements in certain states, while pseudo-elements create virtual elements that don't exist in HTML.",
        "difficulty": "Medium",
        "category": "CSS Selectors",
        "type": "CSS",
        "tags": [
            "CSS",
            "Pseudo-class",
            "Pseudo-element",
            "Selectors"
        ]
    },
    {
        "id": 56,
        "question": "Explain the different CSS units (absolute vs relative). When should you use each type?",
        "solution": "CSS units are categorized into **absolute** and **relative** units:\n\n**Absolute Units** (fixed size):\n- `px` - Pixels (most common)\n- `pt` - Points (1pt = 1/72 inch)\n- `cm`, `mm`, `in` - Physical measurements\n\n**Relative Units** (relative to something else):\n- `em` - Relative to parent element's font-size\n- `rem` - Relative to root element's font-size\n- `%` - Relative to parent element\n- `vw` - 1% of viewport width\n- `vh` - 1% of viewport height\n- `vmin/vmax` - Smaller/larger of vw or vh\n\n```css\n/* Examples */\n.container {\n  width: 800px;        /* Absolute - always 800px */\n  max-width: 90%;      /* Relative - 90% of parent */\n  padding: 2rem;       /* Relative - 2x root font-size */\n  margin: 1em;         /* Relative - 1x parent font-size */\n}\n\n.hero-section {\n  height: 100vh;       /* Full viewport height */\n  width: 100vw;        /* Full viewport width */\n}\n\n.responsive-font {\n  font-size: 4vw;      /* Scales with viewport */\n  min-font-size: 16px; /* Minimum size */\n}\n```\n\n**When to use:**\n- **px**: Borders, shadows, precise layouts\n- **rem**: Font sizes, spacing (preferred for scalability)\n- **em**: Component-based spacing that should scale with local font-size\n- **%**: Fluid layouts, responsive widths\n- **vw/vh**: Full-screen sections, responsive typography",
        "difficulty": "Medium",
        "category": "CSS Units",
        "type": "CSS",
        "tags": [
            "CSS",
            "Units",
            "Responsive Design",
            "Typography"
        ]
    },
    {
        "id": 57,
        "question": "Do margin-top and margin-bottom affect inline elements? Explain with examples.",
        "solution": "**No, vertical margins (margin-top and margin-bottom) do NOT affect inline elements.** Only horizontal margins (margin-left and margin-right) work on inline elements.\n\n```css\n.inline-element {\n  margin-top: 20px;    /* No effect */\n  margin-bottom: 20px; /* No effect */\n  margin-left: 10px;   /* Works */\n  margin-right: 10px;  /* Works */\n  background: lightblue;\n}\n\n.inline-block-element {\n  display: inline-block;\n  margin-top: 20px;    /* Works! */\n  margin-bottom: 20px; /* Works! */\n  background: lightcoral;\n}\n```\n\n```html\n<p>This is a paragraph with \n<span class=\"inline-element\">inline span</span> \nand <span class=\"inline-block-element\">inline-block span</span> elements.</p>\n```\n\n**Why this happens:**\n- Inline elements flow horizontally within the text line\n- They don't break the line flow, so vertical spacing doesn't apply\n- The line height is determined by the `line-height` property\n\n**Solutions for vertical spacing on inline elements:**\n```css\n/* Option 1: Change display property */\n.solution1 {\n  display: inline-block; /* Now vertical margins work */\n}\n\n/* Option 2: Use padding instead */\n.solution2 {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n/* Option 3: Use line-height for vertical spacing */\n.solution3 {\n  line-height: 2; /* Increases vertical space */\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Box Model",
        "type": "CSS",
        "tags": [
            "CSS",
            "Margin",
            "Inline Elements",
            "Box Model"
        ]
    },
    {
        "id": 58,
        "question": "Explain the CSS position property and its different values with practical examples.",
        "solution": "The `position` property controls how an element is positioned in the document:\n\n**1. static (default)**\n- Normal document flow\n- `top`, `right`, `bottom`, `left` have no effect\n\n**2. relative**\n- Positioned relative to its normal position\n- Still occupies original space in flow\n\n**3. absolute**\n- Removed from document flow\n- Positioned relative to nearest positioned ancestor\n\n**4. fixed**\n- Removed from document flow\n- Positioned relative to viewport\n- Stays in place when scrolling\n\n**5. sticky**\n- Hybrid of relative and fixed\n- Acts as relative until scroll threshold, then becomes fixed\n\n```css\n/* Examples */\n.container {\n  position: relative; /* Creates positioning context */\n  height: 200px;\n  border: 2px solid #ccc;\n}\n\n.static-box {\n  position: static; /* Default behavior */\n  background: lightblue;\n}\n\n.relative-box {\n  position: relative;\n  top: 10px;     /* Moves 10px down from normal position */\n  left: 20px;    /* Moves 20px right from normal position */\n  background: lightgreen;\n}\n\n.absolute-box {\n  position: absolute;\n  top: 0;        /* 0px from top of positioned parent */\n  right: 0;      /* 0px from right of positioned parent */\n  width: 100px;\n  background: lightcoral;\n}\n\n.fixed-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background: navy;\n  z-index: 1000;\n}\n\n.sticky-sidebar {\n  position: sticky;\n  top: 20px;     /* Becomes fixed when 20px from top */\n  background: lightyellow;\n}\n```\n\n```html\n<header class=\"fixed-header\">Fixed Header</header>\n<div class=\"container\">\n  <div class=\"static-box\">Static</div>\n  <div class=\"relative-box\">Relative</div>\n  <div class=\"absolute-box\">Absolute</div>\n</div>\n<div class=\"sticky-sidebar\">Sticky Sidebar</div>\n```",
        "difficulty": "Medium",
        "category": "CSS Positioning",
        "type": "CSS",
        "tags": [
            "CSS",
            "Position",
            "Layout",
            "Absolute",
            "Relative",
            "Fixed",
            "Sticky"
        ]
    },
    {
        "id": 59,
        "question": "What is a stacking context and how does z-index work in CSS?",
        "solution": "A **stacking context** is a 3D conceptualization of HTML elements along the z-axis. Elements within the same stacking context are stacked according to their `z-index` values.\n\n**Creating a Stacking Context:**\n- Root element (`<html>`)\n- `position: absolute/relative/fixed/sticky` with `z-index` other than `auto`\n- `opacity` less than 1\n- `transform` other than `none`\n- `filter` other than `none`\n- `isolation: isolate`\n\n**Key Rule**: `z-index` only works within the same stacking context!\n\n```css\n/* Example 1: Basic z-index */\n.box1 {\n  position: relative;\n  z-index: 2;\n  background: red;\n}\n\n.box2 {\n  position: relative;\n  z-index: 1;\n  background: blue;\n  margin-top: -20px; /* Overlaps box1 */\n}\n/* box1 appears on top despite being first in HTML */\n\n/* Example 2: Stacking context issue */\n.parent1 {\n  position: relative;\n  z-index: 1;\n  opacity: 0.9; /* Creates stacking context */\n}\n\n.child1 {\n  position: relative;\n  z-index: 9999; /* Won't help! */\n  background: red;\n}\n\n.parent2 {\n  position: relative;\n  z-index: 2;\n  opacity: 0.9; /* Creates stacking context */\n}\n\n.child2 {\n  position: relative;\n  z-index: 1;\n  background: blue;\n}\n/* child2 appears above child1 because parent2 > parent1 */\n```\n\n```html\n<div class=\"parent1\">\n  <div class=\"child1\">Child 1 (z-index: 9999)</div>\n</div>\n<div class=\"parent2\">\n  <div class=\"child2\">Child 2 (z-index: 1)</div>\n</div>\n```\n\n**Best Practices:**\n- Use `z-index` sparingly\n- Create intentional stacking contexts with `isolation: isolate`\n- Use consistent z-index scales (100s, 1000s)\n- Document your z-index hierarchy",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "z-index",
            "Stacking Context",
            "Layering",
            "Position"
        ]
    },
    {
        "id": 60,
        "question": "What is DOM reflow in CSS and how can you minimize it for better performance?",
        "solution": "**DOM Reflow** (or layout) is when the browser recalculates the positions and dimensions of elements on the page. It's an expensive operation that can cause performance issues.\n\n**What triggers reflow:**\n- Changing element dimensions (`width`, `height`, `padding`, `margin`)\n- Adding/removing DOM elements\n- Changing CSS classes that affect layout\n- Reading layout properties (`offsetHeight`, `clientWidth`, `getComputedStyle()`)\n- Window resizing\n- Font loading\n\n**What triggers repaint only:**\n- Changing colors (`color`, `background-color`)\n- Changing `visibility`\n- Changing `outline`\n\n```javascript\n// Bad: Causes multiple reflows\nconst element = document.getElementById('myDiv');\nelement.style.width = '100px';    // Reflow\nelement.style.height = '100px';   // Reflow\nelement.style.padding = '10px';   // Reflow\nconst height = element.offsetHeight; // Forces reflow to get current height\n\n// Better: Batch DOM changes\nconst element = document.getElementById('myDiv');\nelement.style.cssText = 'width: 100px; height: 100px; padding: 10px;';\n\n// Better: Use CSS classes\nelement.className = 'new-size'; // Single reflow\n```\n\n```css\n/* Use transform instead of changing position */\n/* Bad: Triggers reflow */\n.animate-position {\n  transition: left 0.3s;\n}\n.animate-position:hover {\n  left: 100px;\n}\n\n/* Good: Uses GPU, no reflow */\n.animate-transform {\n  transition: transform 0.3s;\n}\n.animate-transform:hover {\n  transform: translateX(100px);\n}\n```\n\n**Performance optimization techniques:**\n```css\n/* 1. Use will-change for animations */\n.animated-element {\n  will-change: transform;\n}\n\n/* 2. Use contain property */\n.independent-component {\n  contain: layout style paint;\n}\n\n/* 3. Use transform and opacity for animations */\n.smooth-animation {\n  transform: translateX(0);\n  opacity: 1;\n  transition: transform 0.3s, opacity 0.3s;\n}\n```\n\n**Best practices:**\n- Batch DOM modifications\n- Use `transform` and `opacity` for animations\n- Avoid reading layout properties in loops\n- Use `requestAnimationFrame()` for smooth animations\n- Consider using CSS containment",
        "difficulty": "Hard",
        "category": "CSS Performance",
        "type": "CSS",
        "tags": [
            "CSS",
            "Performance",
            "Reflow",
            "DOM",
            "Optimization"
        ]
    },
    {
        "id": 61,
        "question": "Explain the box-sizing property in CSS. What's the difference between content-box and border-box?",
        "solution": "The `box-sizing` property defines how the total width and height of an element is calculated.\n\n**1. content-box (default)**\n- Width/height applies only to content\n- Padding and border are added to the total size\n- Total width = width + padding + border\n\n**2. border-box**\n- Width/height includes content, padding, and border\n- More intuitive for layout calculations\n- Total width = width (includes everything)\n\n```css\n/* Example comparison */\n.content-box {\n  box-sizing: content-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid black;\n  /* Total width: 200 + 40 + 10 = 250px */\n}\n\n.border-box {\n  box-sizing: border-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid black;\n  /* Total width: exactly 200px */\n  /* Content width: 200 - 40 - 10 = 150px */\n}\n```\n\n**Universal border-box (recommended):**\n```css\n/* Apply to all elements */\n* {\n  box-sizing: border-box;\n}\n\n/* More specific approach */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Inheritance method */\nhtml {\n  box-sizing: border-box;\n}\n*, \n*::before, \n*::after {\n  box-sizing: inherit;\n}\n```\n\n**Practical example:**\n```css\n/* Without border-box: doesn't work as expected */\n.column {\n  width: 50%;\n  padding: 20px;\n  border: 1px solid #ccc;\n  float: left;\n  /* Total width > 50%, causes wrapping */\n}\n\n/* With border-box: works perfectly */\n.column-fixed {\n  box-sizing: border-box;\n  width: 50%;\n  padding: 20px;\n  border: 1px solid #ccc;\n  float: left;\n  /* Total width = exactly 50% */\n}\n```\n\n**Benefits of border-box:**\n- Predictable sizing behavior\n- Easier responsive design\n- Simpler grid calculations\n- More intuitive padding/border handling",
        "difficulty": "Medium",
        "category": "CSS Box Model",
        "type": "CSS",
        "tags": [
            "CSS",
            "Box Model",
            "box-sizing",
            "border-box",
            "Layout"
        ]
    },
    {
        "id": 62,
        "question": "How do you center a div inside another div? Show multiple methods.",
        "solution": "There are several ways to center a div, each with different use cases:\n\n**1. Flexbox (recommended for most cases):**\n```css\n.parent {\n  display: flex;\n  justify-content: center; /* Horizontal centering */\n  align-items: center;     /* Vertical centering */\n  height: 400px;\n}\n\n.child {\n  width: 200px;\n  height: 100px;\n  background: lightblue;\n}\n```\n\n**2. CSS Grid:**\n```css\n.parent {\n  display: grid;\n  place-items: center; /* Centers both horizontally and vertically */\n  height: 400px;\n}\n\n/* Alternative grid method */\n.parent-alt {\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  height: 400px;\n}\n```\n\n**3. Absolute positioning with transform:**\n```css\n.parent {\n  position: relative;\n  height: 400px;\n}\n\n.child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 100px;\n}\n```\n\n**4. Absolute positioning with margins (fixed dimensions):**\n```css\n.parent {\n  position: relative;\n  height: 400px;\n}\n\n.child {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  width: 200px;  /* Must have fixed dimensions */\n  height: 100px;\n}\n```\n\n**5. Text-align + line-height (for single-line content):**\n```css\n.parent {\n  text-align: center;\n  line-height: 400px; /* Same as height */\n  height: 400px;\n}\n\n.child {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: normal;\n}\n```\n\n**6. Table-cell method:**\n```css\n.parent {\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n  width: 500px;\n  height: 400px;\n}\n\n.child {\n  display: inline-block;\n}\n```\n\n**When to use each method:**\n- **Flexbox**: Most flexible, works with any content size\n- **Grid**: Great for complex layouts\n- **Absolute + transform**: When you need to overlay content\n- **Absolute + margin**: When child has fixed dimensions\n- **Line-height**: Only for single-line text content\n- **Table-cell**: Legacy support for older browsers",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Centering",
            "Flexbox",
            "Grid",
            "Position",
            "Layout"
        ]
    },
    {
        "id": 63,
        "question": "What are CSS Media Queries? Explain different media types, features, and show examples of responsive breakpoints.",
        "solution": "**CSS Media Queries** allow you to apply different styles based on device characteristics, enabling responsive web design.\n\n**Basic Syntax:**\n```css\n@media [media-type] and [media-feature] {\n  /* CSS rules */\n}\n```\n\n**Media Types:**\n- `all` - All devices (default)\n- `screen` - Devices with screens\n- `print` - Print preview/printing\n- `speech` - Screen readers\n\n**Common Media Features:**\n- `width`, `min-width`, `max-width` - Viewport width\n- `height`, `min-height`, `max-height` - Viewport height\n- `orientation` - Portrait or landscape\n- `aspect-ratio` - Width/height ratio\n- `hover` - Can hover over elements\n- `pointer` - Accuracy of pointing device\n\n**Logical Operators:**\n- `and` - Combines conditions\n- `,` (comma) - OR operator\n- `not` - Negates condition\n\n```css\n/* Mobile First Approach (recommended) */\n/* Base styles for mobile */\n.container {\n  width: 100%;\n  padding: 10px;\n  font-size: 14px;\n}\n\n/* Tablet styles */\n@media screen and (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n    font-size: 16px;\n  }\n  \n  .grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 20px;\n  }\n}\n\n/* Desktop styles */\n@media screen and (min-width: 1024px) {\n  .container {\n    max-width: 980px;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* Large desktop */\n@media screen and (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n```\n\n**Advanced Examples:**\n```css\n/* Orientation-based styles */\n@media (orientation: landscape) {\n  .sidebar {\n    width: 25%;\n    float: left;\n  }\n}\n\n/* High-density displays */\n@media screen and (-webkit-min-device-pixel-ratio: 2),\n       screen and (min-resolution: 192dpi) {\n  .logo {\n    background-image: url('logo@2x.png');\n    background-size: 100px 50px;\n  }\n}\n\n/* Print styles */\n@media print {\n  .navigation,\n  .sidebar {\n    display: none;\n  }\n  \n  body {\n    font-family: serif;\n    color: black;\n  }\n  \n  a::after {\n    content: \" (\" attr(href) \")\";\n  }\n}\n\n/* Hover capability detection */\n@media (hover: hover) {\n  .button:hover {\n    background-color: #007bff;\n  }\n}\n\n/* Touch device styles */\n@media (hover: none) and (pointer: coarse) {\n  .button {\n    padding: 15px; /* Larger touch targets */\n  }\n}\n```\n\n**Common Breakpoints:**\n```css\n/* Extra small devices (phones) */\n@media (max-width: 575.98px) { ... }\n\n/* Small devices (landscape phones) */\n@media (min-width: 576px) { ... }\n\n/* Medium devices (tablets) */\n@media (min-width: 768px) { ... }\n\n/* Large devices (desktops) */\n@media (min-width: 992px) { ... }\n\n/* Extra large devices (large desktops) */\n@media (min-width: 1200px) { ... }\n```",
        "difficulty": "Medium",
        "category": "Responsive Design",
        "type": "CSS",
        "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Breakpoints",
            "Mobile First"
        ]
    },
    {
        "id": 64,
        "question": "What are the different ways to hide elements with CSS? Explain the differences between each method.",
        "solution": "There are several ways to hide elements in CSS, each with different behavior:\n\n**1. `display: none`**\n- Completely removes element from document flow\n- Takes up no space\n- Not accessible to screen readers\n- Cannot be targeted by JavaScript events\n\n**2. `visibility: hidden`**\n- Hides element but preserves its space\n- Still in document flow\n- Not accessible to screen readers\n- Can still be targeted by JavaScript\n\n**3. `opacity: 0`**\n- Makes element transparent\n- Still takes up space and receives events\n- Accessible to screen readers\n- Can be clicked/interacted with\n\n**4. `clip-path` or `clip`**\n- Clips the element to hide it\n- Takes up space\n- Accessible to screen readers\n\n```css\n/* Different hiding methods */\n.hide-display {\n  display: none;\n  /* Element completely gone, no space taken */\n}\n\n.hide-visibility {\n  visibility: hidden;\n  /* Element invisible but space preserved */\n}\n\n.hide-opacity {\n  opacity: 0;\n  /* Element transparent but still interactive */\n}\n\n.hide-clip {\n  clip-path: inset(100%);\n  /* Element clipped but space preserved */\n}\n\n.hide-position {\n  position: absolute;\n  left: -9999px;\n  /* Moves element off-screen */\n}\n\n.hide-size {\n  width: 0;\n  height: 0;\n  overflow: hidden;\n  /* Shrinks element to nothing */\n}\n\n.hide-text {\n  text-indent: -9999px;\n  overflow: hidden;\n  /* Hides text content specifically */\n}\n```\n\n**Accessibility considerations:**\n```css\n/* Screen reader only (visually hidden but accessible) */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Hide from screen readers but keep visible */\n.visual-only {\n  aria-hidden=\"true\";\n}\n```\n\n**Use cases:**\n\n| Method | Use Case |\n|--------|----------|\n| `display: none` | Toggle elements, responsive design |\n| `visibility: hidden` | Maintain layout while hiding |\n| `opacity: 0` | Fade animations, hover effects |\n| `clip-path` | Creative reveal animations |\n| `position: absolute` | Accessible hiding |\n| `.sr-only` | Screen reader only content |\n\n**Animation considerations:**\n```css\n/* display: none cannot be animated */\n.fade-toggle {\n  opacity: 1;\n  transition: opacity 0.3s ease;\n}\n\n.fade-toggle.hidden {\n  opacity: 0;\n  /* Can use visibility: hidden after transition */\n  transition: opacity 0.3s ease, visibility 0s 0.3s;\n  visibility: hidden;\n}\n\n/* For slide animations */\n.slide-up {\n  max-height: 500px;\n  overflow: hidden;\n  transition: max-height 0.3s ease;\n}\n\n.slide-up.hidden {\n  max-height: 0;\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Visibility",
        "type": "CSS",
        "tags": [
            "CSS",
            "Visibility",
            "Display",
            "Opacity",
            "Accessibility",
            "Animation"
        ]
    },
    {
        "id": 65,
        "question": "What does the `:root` selector select in CSS and how is it commonly used?",
        "solution": "The `:root` selector targets the document's root element (`<html>`) and is primarily used for defining global CSS custom properties (variables).\n\n**Basic Syntax:**\n```css\n:root {\n  --variable-name: value;\n}\n\n/* Usage */\nelement {\n  property: var(--variable-name);\n}\n```\n\n**Common Use Cases:**\n```css\n/* Global variables */\n:root {\n  --primary-color: #007bff;\n  --font-size: 16px;\n  --spacing: 1rem;\n}\n\n.button {\n  background: var(--primary-color);\n  font-size: var(--font-size);\n  padding: var(--spacing);\n}\n\n/* Theme switching */\n:root {\n  --bg-color: #fff;\n  --text-color: #333;\n}\n\n:root.dark-theme {\n  --bg-color: #333;\n  --text-color: #fff;\n}\n\nbody {\n  background: var(--bg-color);\n  color: var(--text-color);\n}\n```\n\n**JavaScript Integration:**\n```javascript\n// Get variable\ngetComputedStyle(document.documentElement)\n  .getPropertyValue('--primary-color');\n\n// Set variable\ndocument.documentElement.style\n  .setProperty('--primary-color', '#ff0000');\n```\n\n**Key Benefits:** Global scope, easy theming, dynamic updates, better maintainability, inheritance support.",
        "difficulty": "Medium",
        "category": "CSS Variables",
        "type": "CSS",
        "tags": [
            "CSS",
            ":root",
            "CSS Variables",
            "Custom Properties",
            "Theming"
        ]
    },
    {
        "id": 66,
        "question": "What is Web Accessibility (a11y) in CSS? What are the key practices for making websites accessible?",
        "solution": "**Web Accessibility (a11y)** ensures websites are usable by people with disabilities, including visual, auditory, motor, and cognitive impairments.\n\n**Essential CSS Accessibility Practices:**\n\n**Color and Contrast:**\n\n```css\n/* WCAG AA requires 4.5:1 contrast ratio */\n.text {\n  color: #333333;        /* Dark text */\n  background: #ffffff;   /* Light background */\n}\n\n/* Don't rely solely on color */\n.error {\n  color: #d32f2f;\n  border-left: 4px solid #d32f2f; /* Visual indicator */\n}\n\n.error::before {\n  content: \"⚠ \";        /* Icon for context */\n}\n```\n\n**Focus Management:**\n\n```css\n/* Visible focus indicators */\n:focus {\n  outline: 2px solid #0066cc;\n  outline-offset: 2px;\n}\n\n/* Custom focus styles */\n.button:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.3);\n}\n\n/* Skip links for keyboard navigation */\n.skip-link {\n  position: absolute;\n  top: -40px;\n  background: #000;\n  color: #fff;\n  padding: 8px;\n}\n\n.skip-link:focus {\n  top: 6px;\n}\n```\n\n**Screen Reader Support:**\n\n```css\n/* Visually hidden but accessible to screen readers */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n}\n```\n\n**Motion and User Preferences:**\n\n```css\n/* Respect user's motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Support high contrast mode */\n@media (prefers-contrast: high) {\n  .button {\n    border: 2px solid;\n  }\n}\n```\n\n**Scalable Design:**\n\n```css\n/* Use relative units for scalable text */\n.text {\n  font-size: 1rem;       /* Scales with user preferences */\n  line-height: 1.5;      /* Good readability */\n}\n\n/* Minimum touch target size (44px × 44px) */\n.button {\n  min-height: 44px;\n  min-width: 44px;\n  padding: 12px 16px;\n}\n```\n\n**Key Accessibility Checklist:**\n\n| Requirement | Implementation |\n|-------------|----------------|\n| **Color Contrast** | 4.5:1 ratio for normal text, 3:1 for large text |\n| **Focus Indicators** | Visible outline on all interactive elements |\n| **Touch Targets** | Minimum 44px × 44px |\n| **Text Scaling** | Use rem/em units, support 200% zoom |\n| **Motion Sensitivity** | Respect `prefers-reduced-motion` |\n| **Screen Readers** | Use `.sr-only` for additional context |\n\n**Testing Methods:**\n- Use keyboard-only navigation\n- Test with screen readers (NVDA, JAWS, VoiceOver)\n- Check color contrast with tools like WebAIM\n- Validate with accessibility auditing tools\n- Test with real users with disabilities\n\n**Reference:** [WCAG 2.1 Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)",
        "difficulty": "Medium",
        "category": "Web Accessibility",
        "type": "CSS",
        "tags": [
            "CSS",
            "Accessibility",
            "a11y",
            "WCAG",
            "Screen Readers",
            "Focus Management"
        ]
    },
    {
        "id": 67,
        "question": "What is CSS Grid Layout? Explain the key concepts and show how to create a basic grid layout.",
        "solution": "**CSS Grid** is a 2D layout system that allows you to create complex layouts with rows and columns.\n\n**Key Concepts:**\n- **Grid Container**: Parent element with `display: grid`\n- **Grid Items**: Direct children of the container\n- **Grid Lines**: Dividing lines that create rows and columns\n- **Grid Tracks**: Space between two grid lines (rows/columns)\n- **Grid Areas**: Rectangular space bounded by four grid lines\n\n```css\n/* Basic Grid Setup */\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 1fr 100px; /* 3 columns */\n  grid-template-rows: 80px 1fr 60px;      /* 3 rows */\n  gap: 20px;                              /* Space between items */\n  height: 100vh;\n}\n\n/* Grid item positioning */\n.header {\n  grid-column: 1 / -1;  /* Span all columns */\n  grid-row: 1;\n  background: #f0f0f0;\n}\n\n.sidebar {\n  grid-column: 1;\n  grid-row: 2;\n  background: #e0e0e0;\n}\n\n.main {\n  grid-column: 2;\n  grid-row: 2;\n  background: #d0d0d0;\n}\n\n.aside {\n  grid-column: 3;\n  grid-row: 2;\n  background: #c0c0c0;\n}\n\n.footer {\n  grid-column: 1 / -1;  /* Span all columns */\n  grid-row: 3;\n  background: #b0b0b0;\n}\n```\n\n```html\n<div class=\"grid-container\">\n  <header class=\"header\">Header</header>\n  <nav class=\"sidebar\">Sidebar</nav>\n  <main class=\"main\">Main Content</main>\n  <aside class=\"aside\">Aside</aside>\n  <footer class=\"footer\">Footer</footer>\n</div>\n```\n\n**Responsive Grid with auto-fit:**\n```css\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  padding: 20px;\n}\n\n.card {\n  background: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n```\n\n**Grid Template Areas (Named Grid):**\n```css\n.layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 150px;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Grid",
            "Layout",
            "Responsive Design",
            "2D Layout"
        ]
    },
    {
        "id": 68,
        "question": "What is CSS Flexbox? Explain the main axis, cross axis, and common flexbox properties with examples.",
        "solution": "**CSS Flexbox** is a 1D layout method for arranging items in rows or columns with flexible sizing.\n\n**Key Concepts:**\n- **Flex Container**: Parent with `display: flex`\n- **Flex Items**: Direct children of flex container\n- **Main Axis**: Primary axis (horizontal by default)\n- **Cross Axis**: Perpendicular to main axis (vertical by default)\n\n```css\n/* Basic Flexbox Setup */\n.flex-container {\n  display: flex;\n  /* flex-direction: row (default) | row-reverse | column | column-reverse */\n  flex-direction: row;\n  /* justify-content: aligns items along main axis */\n  justify-content: space-between;\n  /* align-items: aligns items along cross axis */\n  align-items: center;\n  /* flex-wrap: allows items to wrap */\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 20px;\n}\n\n.flex-item {\n  /* flex-grow: how much to grow */\n  flex-grow: 1;\n  /* flex-shrink: how much to shrink */\n  flex-shrink: 1;\n  /* flex-basis: initial size before free space distribution */\n  flex-basis: 200px;\n  /* Shorthand: flex: grow shrink basis */\n  flex: 1 1 200px;\n}\n```\n\n**Common Alignment Patterns:**\n```css\n/* Center everything */\n.center-all {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n\n/* Navigation bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n\n/* Card layout */\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n.card {\n  flex: 1 1 300px; /* Grow, shrink, min-width */\n  min-height: 200px;\n}\n```\n\n**Justify-content values:**\n```css\n.flex-start    { justify-content: flex-start; }    /* Start of main axis */\n.flex-end      { justify-content: flex-end; }      /* End of main axis */\n.center        { justify-content: center; }        /* Center of main axis */\n.space-between { justify-content: space-between; } /* Equal space between */\n.space-around  { justify-content: space-around; }  /* Equal space around */\n.space-evenly  { justify-content: space-evenly; }  /* Equal space everywhere */\n```\n\n**Align-items values:**\n```css\n.stretch    { align-items: stretch; }     /* Fill cross axis (default) */\n.flex-start { align-items: flex-start; }  /* Start of cross axis */\n.flex-end   { align-items: flex-end; }    /* End of cross axis */\n.center     { align-items: center; }      /* Center of cross axis */\n.baseline   { align-items: baseline; }    /* Baseline alignment */\n```\n\n**Individual item alignment:**\n```css\n.special-item {\n  align-self: flex-end; /* Override container's align-items */\n  order: -1;            /* Change visual order */\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Alignment",
            "1D Layout"
        ]
    },
    {
        "id": 69,
        "question": "What are CSS animations and transitions? Show examples of each and explain when to use them.",
        "solution": "**CSS Transitions** animate property changes smoothly over time, while **CSS Animations** provide more complex, keyframe-based animations.\n\n**CSS Transitions:**\n```css\n/* Basic transition */\n.button {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  /* transition: property duration timing-function delay */\n  transition: background-color 0.3s ease;\n}\n\n.button:hover {\n  background-color: #0056b3;\n}\n\n/* Multiple properties */\n.card {\n  transform: scale(1);\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n  transform: scale(1.05);\n  box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n}\n\n/* All properties */\n.smooth-element {\n  transition: all 0.3s ease;\n}\n```\n\n**CSS Animations (Keyframes):**\n```css\n/* Define keyframes */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Complex animation with percentages */\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transform: translate3d(0, 0, 0);\n  }\n  40%, 43% {\n    transform: translate3d(0, -20px, 0);\n  }\n  70% {\n    transform: translate3d(0, -10px, 0);\n  }\n  90% {\n    transform: translate3d(0, -4px, 0);\n  }\n}\n\n/* Apply animations */\n.fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.bounce-element {\n  animation: bounce 1s ease infinite;\n}\n\n/* Animation shorthand */\n.loading-spinner {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n```\n\n**Timing Functions:**\n```css\n.ease-examples {\n  /* Built-in timing functions */\n  transition-timing-function: ease;        /* Default */\n  transition-timing-function: linear;      /* Constant speed */\n  transition-timing-function: ease-in;     /* Slow start */\n  transition-timing-function: ease-out;    /* Slow end */\n  transition-timing-function: ease-in-out; /* Slow start & end */\n  \n  /* Custom cubic-bezier */\n  transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  \n  /* Steps (for sprite animations) */\n  animation-timing-function: steps(8, end);\n}\n```\n\n**Performance Optimizations:**\n```css\n/* GPU-accelerated properties (best performance) */\n.optimized-animation {\n  /* Use transform instead of changing position */\n  transform: translateX(100px);\n  \n  /* Use opacity instead of changing display/visibility */\n  opacity: 0;\n  \n  /* Force GPU acceleration */\n  will-change: transform;\n  \n  transition: transform 0.3s ease, opacity 0.3s ease;\n}\n\n/* Remove will-change after animation */\n.optimized-animation.animation-complete {\n  will-change: auto;\n}\n```\n\n**Responsive Animations:**\n```css\n/* Respect user preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Conditional animations */\n@media (min-width: 768px) {\n  .desktop-only-animation {\n    animation: slideIn 0.5s ease;\n  }\n}\n```\n\n**When to use:**\n- **Transitions**: Hover effects, focus states, simple property changes\n- **Animations**: Loading spinners, complex sequences, continuous animations\n- **Performance**: Stick to `transform` and `opacity` for smooth 60fps animations",
        "difficulty": "Medium",
        "category": "CSS Animations",
        "type": "CSS",
        "tags": [
            "CSS",
            "Animation",
            "Transition",
            "Keyframes",
            "Performance"
        ]
    },
    {
        "id": 70,
        "question": "What are CSS preprocessors? Compare Sass/SCSS, Less, and Stylus with examples.",
        "solution": "**CSS Preprocessors** extend CSS with programming features like variables, nesting, and functions, then compile to regular CSS.\n\n**Popular Preprocessors Comparison:**\n\n| Feature | Sass/SCSS | Less | Stylus |\n|---------|-----------|------|--------|\n| **Variables** | `$color` | `@color` | `color` |\n| **Nesting** | ✅ | ✅ | ✅ |\n| **Mixins** | ✅ | ✅ | ✅ |\n| **Functions** | ✅ | Limited | ✅ |\n| **Popularity** | Most popular | Moderate | Less common |\n\n**Sass/SCSS Examples:**\n\n```scss\n// Variables\n$primary-color: #007bff;\n$font-size: 16px;\n$breakpoint: 768px;\n\n// Nesting\n.navbar {\n  background: $primary-color;\n  \n  .nav-link {\n    color: white;\n    \n    &:hover {\n      opacity: 0.8;\n    }\n    \n    &.active {\n      font-weight: bold;\n    }\n  }\n}\n\n// Mixins\n@mixin button($bg-color) {\n  background: $bg-color;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  \n  &:hover {\n    background: darken($bg-color, 10%);\n  }\n}\n\n.btn-primary {\n  @include button($primary-color);\n}\n\n// Functions\n@function px-to-rem($px) {\n  @return $px / $font-size * 1rem;\n}\n\n.container {\n  max-width: px-to-rem(1200px);\n}\n\n// Loops\n@for $i from 1 through 12 {\n  .col-#{$i} {\n    width: percentage($i / 12);\n  }\n}\n\n// Media queries\n@media (min-width: $breakpoint) {\n  .container {\n    max-width: 750px;\n  }\n}\n```\n\n**Less Examples:**\n\n```less\n// Variables (using @)\n@primary-color: #007bff;\n@font-size: 16px;\n\n// Nesting\n.navbar {\n  background: @primary-color;\n  \n  .nav-link {\n    color: white;\n    \n    &:hover {\n      color: lighten(@primary-color, 20%);\n    }\n  }\n}\n\n// Mixins\n.button-style(@bg-color) {\n  background: @bg-color;\n  padding: 0.5rem 1rem;\n  \n  &:hover {\n    background: darken(@bg-color, 10%);\n  }\n}\n\n.btn-primary {\n  .button-style(@primary-color);\n}\n```\n\n**Stylus Examples:**\n\n```stylus\n// Variables (no symbols)\nprimary-color = #007bff\nfont-size = 16px\n\n// Nesting (optional braces)\n.navbar\n  background primary-color\n  \n  .nav-link\n    color white\n    \n    &:hover\n      color lighten(primary-color, 20%)\n\n// Mixins\nbutton-style(bg-color)\n  background bg-color\n  padding 0.5rem 1rem\n  \n  &:hover\n    background darken(bg-color, 10%)\n\n.btn-primary\n  button-style(primary-color)\n```\n\n**File Organization:**\n\n```scss\n// _variables.scss\n$primary-color: #007bff;\n$font-family: 'Arial', sans-serif;\n\n// _mixins.scss\n@mixin visually-hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n}\n\n// main.scss\n@import 'variables';\n@import 'mixins';\n@import 'base';\n@import 'components';\n```\n\n**Build Setup:**\n\n```bash\n# Install Sass\nnpm install -g sass\n\n# Compile\nsass input.scss output.css\n\n# Watch for changes\nsass --watch src/scss:dist/css\n```\n\n**Key Benefits:**\n- **Maintainability**: Variables and mixins reduce code duplication\n- **Organization**: Modular files with imports\n- **Functionality**: Mathematical operations and color functions\n- **Productivity**: Nesting and shortcuts speed development\n\n**When to Use:**\n- Large projects with complex styling\n- Teams needing consistent design tokens\n- Projects requiring mathematical calculations\n- Need for modular CSS architecture\n\n**Reference:** [Sass Documentation](https://sass-lang.com/documentation)",
        "difficulty": "Medium",
        "category": "CSS Tools",
        "type": "CSS",
        "tags": [
            "CSS",
            "Sass",
            "SCSS",
            "Less",
            "Stylus",
            "Preprocessor"
        ]
    },
    {
        "id": 71,
        "question": "What is CSS-in-JS? Explain different approaches and show examples with styled-components.",
        "solution": "**CSS-in-JS** is a styling approach where CSS is written using JavaScript, enabling dynamic styling and component-scoped styles.\n\n**Popular CSS-in-JS Libraries:**\n\n| Library | Approach | Key Features |\n|---------|----------|-------------|\n| **styled-components** | Template literals | Most popular, theme support |\n| **Emotion** | Similar syntax | Performance focused |\n| **JSS** | JavaScript objects | Framework agnostic |\n| **Stitches** | Near-zero runtime | Static extraction |\n\n**styled-components Examples:**\n\n```javascript\nimport styled, { css, ThemeProvider } from 'styled-components';\n\n// Basic styled component\nconst Button = styled.button`\n  background: #007bff;\n  color: white;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  \n  &:hover {\n    background: #0056b3;\n  }\n`;\n\n// Props-based styling\nconst StyledButton = styled.button`\n  background: ${props => props.primary ? '#007bff' : '#6c757d'};\n  padding: ${props => props.large ? '1rem 2rem' : '0.5rem 1rem'};\n  border: none;\n  border-radius: 4px;\n  color: white;\n  \n  ${props => props.outlined && css`\n    background: transparent;\n    color: ${props.primary ? '#007bff' : '#6c757d'};\n    border: 2px solid ${props.primary ? '#007bff' : '#6c757d'};\n  `}\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\n// Usage\nfunction ButtonDemo() {\n  return (\n    <div>\n      <Button>Basic Button</Button>\n      <StyledButton primary>Primary</StyledButton>\n      <StyledButton primary outlined>Outlined</StyledButton>\n      <StyledButton large disabled>Large Disabled</StyledButton>\n    </div>\n  );\n}\n```\n\n**Theming System:**\n\n```javascript\n// Theme definition\nconst theme = {\n  colors: {\n    primary: '#007bff',\n    secondary: '#6c757d',\n    success: '#28a745',\n    background: '#ffffff'\n  },\n  spacing: {\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem'\n  },\n  breakpoints: {\n    mobile: '576px',\n    tablet: '768px',\n    desktop: '992px'\n  }\n};\n\n// Themed component\nconst ThemedButton = styled.button`\n  background: ${props => props.theme.colors.primary};\n  padding: ${props => props.theme.spacing.md};\n  color: white;\n  border: none;\n  border-radius: 4px;\n  \n  @media (min-width: ${props => props.theme.breakpoints.tablet}) {\n    padding: ${props => props.theme.spacing.lg};\n  }\n`;\n\n// App with ThemeProvider\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ThemedButton>Themed Button</ThemedButton>\n    </ThemeProvider>\n  );\n}\n```\n\n**Advanced Features:**\n\n```javascript\n// Style inheritance\nconst BaseButton = styled.button`\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n\nconst PrimaryButton = styled(BaseButton)`\n  background: #007bff;\n  color: white;\n`;\n\n// Animations\nimport { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n`;\n\nconst AnimatedCard = styled.div`\n  animation: ${fadeIn} 0.5s ease-in;\n  padding: 1rem;\n  background: white;\n  border-radius: 8px;\n`;\n\n// Global styles\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  \n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n    background: ${props => props.theme.colors.background};\n  }\n`;\n```\n\n**Alternative Approaches:**\n\n```javascript\n// Emotion (similar to styled-components)\nimport styled from '@emotion/styled';\n\nconst EmotionButton = styled.button`\n  background: #007bff;\n  color: white;\n  padding: 0.5rem 1rem;\n`;\n\n// JSS (object syntax)\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  button: {\n    background: '#007bff',\n    color: 'white',\n    padding: '0.5rem 1rem',\n    border: 'none',\n    borderRadius: '4px'\n  }\n});\n\nfunction JSSButton() {\n  const classes = useStyles();\n  return <button className={classes.button}>JSS Button</button>;\n}\n```\n\n**Pros and Cons:**\n\n| Advantages | Disadvantages |\n|------------|---------------|\n| ✅ Component-scoped styles | ❌ Runtime overhead |\n| ✅ Dynamic styling with props | ❌ Learning curve |\n| ✅ Automatic vendor prefixing | ❌ Bundle size increase |\n| ✅ Dead code elimination | ❌ SSR complexity |\n| ✅ Theme system support | ❌ Debugging challenges |\n| ✅ TypeScript integration | ❌ Performance cost |\n\n**When to Use CSS-in-JS:**\n- **Component libraries** requiring dynamic themes\n- **React applications** with complex state-based styling\n- **Design systems** needing consistent theming\n- **Teams** preferring JavaScript-first approach\n\n**When to Avoid:**\n- **Simple static websites** without dynamic styling needs\n- **Performance-critical applications** where every millisecond matters\n- **Teams** preferring traditional CSS workflows\n\n**Performance Tips:**\n```javascript\n// Use styled-components compiler for production\n// babel-plugin-styled-components\n\n// Avoid creating styled components inside render\n// ❌ Bad\nfunction Component() {\n  const StyledDiv = styled.div`color: red;`;\n  return <StyledDiv />;\n}\n\n// ✅ Good\nconst StyledDiv = styled.div`color: red;`;\nfunction Component() {\n  return <StyledDiv />;\n}\n```\n\n**Reference:** [styled-components Documentation](https://styled-components.com/docs)",
        "difficulty": "Hard",
        "category": "CSS-in-JS",
        "type": "CSS",
        "tags": [
            "CSS",
            "CSS-in-JS",
            "styled-components",
            "React",
            "JavaScript"
        ]
    },
    {
        "id": 72,
        "question": "What are CSS custom properties (CSS variables)? Show advanced use cases and dynamic manipulation.",
        "solution": "**CSS Custom Properties** (CSS Variables) are reusable values that can be defined once and used throughout CSS, with dynamic JavaScript manipulation support.\n\n**Basic Syntax:**\n- **Define:** `--property-name: value`\n- **Use:** `var(--property-name, fallback)`\n- **Scope:** `:root` (global) or element selectors (local)\n\n**Fundamental Examples:**\n\n```css\n/* Define global variables */\n:root {\n  --primary-color: #007bff;\n  --font-size-base: 16px;\n  --spacing-unit: 1rem;\n  --border-radius: 4px;\n}\n\n/* Use variables with fallbacks */\n.button {\n  background: var(--primary-color);\n  font-size: var(--font-size-base);\n  padding: var(--spacing-unit);\n  border-radius: var(--border-radius);\n  color: var(--text-color, white); /* fallback: white */\n}\n\n/* Component-scoped variables */\n.card {\n  --card-padding: 1.5rem;\n  --card-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  \n  padding: var(--card-padding);\n  box-shadow: var(--card-shadow);\n}\n\n/* Override variables for variants */\n.card--large {\n  --card-padding: 2rem;\n}\n\n.card--compact {\n  --card-padding: 0.75rem;\n  --card-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n```\n\n**Advanced Use Cases:**\n\n```css\n/* 1. Dynamic Theming System */\n:root {\n  --bg-color: #ffffff;\n  --text-color: #333333;\n  --accent-color: #007bff;\n}\n\n[data-theme=\"dark\"] {\n  --bg-color: #1a1a1a;\n  --text-color: #ffffff;\n  --accent-color: #4dabf7;\n}\n\nbody {\n  background: var(--bg-color);\n  color: var(--text-color);\n  transition: background 0.3s, color 0.3s;\n}\n\n/* 2. Mathematical Calculations */\n:root {\n  --base-font-size: 16px;\n  --type-scale: 1.25;\n  --spacing-base: 1rem;\n}\n\n.text-sm { font-size: calc(var(--base-font-size) / var(--type-scale)); }\n.text-md { font-size: var(--base-font-size); }\n.text-lg { font-size: calc(var(--base-font-size) * var(--type-scale)); }\n.text-xl { font-size: calc(var(--base-font-size) * var(--type-scale) * var(--type-scale)); }\n\n/* Spacing system */\n.m-1 { margin: calc(var(--spacing-base) * 0.25); }\n.m-2 { margin: calc(var(--spacing-base) * 0.5); }\n.m-3 { margin: var(--spacing-base); }\n.m-4 { margin: calc(var(--spacing-base) * 1.5); }\n\n/* 3. State-based Styling */\n.interactive-button {\n  --btn-bg: var(--primary-color);\n  --btn-scale: 1;\n  \n  background: var(--btn-bg);\n  transform: scale(var(--btn-scale));\n  transition: all 0.2s ease;\n}\n\n.interactive-button:hover {\n  --btn-bg: var(--primary-dark, #0056b3);\n  --btn-scale: 1.05;\n}\n\n.interactive-button:active {\n  --btn-scale: 0.95;\n}\n\n.interactive-button:disabled {\n  --btn-bg: var(--gray-400);\n  --btn-scale: 1;\n}\n```\n\n**JavaScript Integration:**\n\n```javascript\n// Get CSS variable values\nconst rootStyles = getComputedStyle(document.documentElement);\nconst primaryColor = rootStyles.getPropertyValue('--primary-color').trim();\n\n// Set CSS variable values\nfunction updateTheme(colorScheme) {\n  const root = document.documentElement;\n  \n  if (colorScheme === 'dark') {\n    root.style.setProperty('--bg-color', '#1a1a1a');\n    root.style.setProperty('--text-color', '#ffffff');\n    root.style.setProperty('--accent-color', '#4dabf7');\n  } else {\n    root.style.setProperty('--bg-color', '#ffffff');\n    root.style.setProperty('--text-color', '#333333');\n    root.style.setProperty('--accent-color', '#007bff');\n  }\n}\n\n// Dynamic theme switching\nfunction toggleTheme() {\n  const currentTheme = document.documentElement.getAttribute('data-theme');\n  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n  \n  document.documentElement.setAttribute('data-theme', newTheme);\n  localStorage.setItem('theme', newTheme);\n}\n\n// Responsive variable updates\nfunction updateResponsiveVariables() {\n  const width = window.innerWidth;\n  const root = document.documentElement;\n  \n  if (width < 576) {\n    root.style.setProperty('--container-padding', '1rem');\n    root.style.setProperty('--font-size-base', '14px');\n  } else if (width < 768) {\n    root.style.setProperty('--container-padding', '1.5rem');\n    root.style.setProperty('--font-size-base', '16px');\n  } else {\n    root.style.setProperty('--container-padding', '2rem');\n    root.style.setProperty('--font-size-base', '18px');\n  }\n}\n\nwindow.addEventListener('resize', updateResponsiveVariables);\n\n// Animation with variables\nfunction animateProgress(percentage) {\n  document.documentElement.style.setProperty('--progress-width', percentage + '%');\n}\n```\n\n**Design System Implementation:**\n\n```css\n/* Color palette */\n:root {\n  --color-primary-50: #eff6ff;\n  --color-primary-500: #3b82f6;\n  --color-primary-900: #1e3a8a;\n  \n  --color-gray-50: #f9fafb;\n  --color-gray-500: #6b7280;\n  --color-gray-900: #111827;\n}\n\n/* Semantic color assignments */\n:root {\n  --color-background: var(--color-gray-50);\n  --color-text: var(--color-gray-900);\n  --color-accent: var(--color-primary-500);\n}\n\n/* Component tokens */\n.button {\n  --button-bg: var(--color-accent);\n  --button-text: white;\n  --button-padding: var(--spacing-md);\n  --button-radius: var(--border-radius-md);\n  \n  background: var(--button-bg);\n  color: var(--button-text);\n  padding: var(--button-padding);\n  border-radius: var(--button-radius);\n}\n```\n\n**Key Features:**\n\n| Feature | Description | Example |\n|---------|-------------|----------|\n| **Inheritance** | Variables cascade down DOM tree | Parent sets `--color`, children inherit |\n| **Scope** | Local or global variable definitions | `:root` vs `.component` |\n| **Fallbacks** | Default values when variable undefined | `var(--color, blue)` |\n| **Calc() Support** | Mathematical operations with variables | `calc(var(--base) * 2)` |\n| **Runtime Updates** | JavaScript can modify values dynamically | `setProperty('--color', 'red')` |\n\n**Common Use Cases:**\n- **Design Systems**: Consistent color palettes and spacing\n- **Theme Switching**: Light/dark mode implementations\n- **Component Variants**: Size and style variations\n- **Responsive Design**: Dynamic breakpoint-based values\n- **Animation Control**: Parameterized animations and transitions\n\n**Browser Support:** \n- ✅ Modern browsers (Chrome 49+, Firefox 31+, Safari 9.1+)\n- ❌ IE 11 (limited support)\n- Use `CSS.supports('--custom: value')` for feature detection\n\n**Performance Benefits:**\n- Reduced CSS duplication\n- Efficient theme switching without CSS recompilation\n- Better maintainability of design tokens\n\n**Reference:** [MDN CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)",
        "difficulty": "Medium",
        "category": "CSS Variables",
        "type": "CSS",
        "tags": [
            "CSS",
            "Custom Properties",
            "CSS Variables",
            "JavaScript",
            "Dynamic Styling"
        ]
    },
    {
        "id": 73,
        "question": "What is Critical CSS and how do you optimize CSS for web performance?",
        "solution": "**Critical CSS** is the minimum CSS needed to render above-the-fold content, inlined to eliminate render-blocking and improve Core Web Vitals.\n\n**Critical CSS Strategy:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Inline critical CSS for immediate rendering -->\n  <style>\n    /* Essential styles for above-the-fold content */\n    body {\n      margin: 0;\n      font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n      line-height: 1.6;\n    }\n    \n    .header {\n      background: #333;\n      color: white;\n      padding: 1rem;\n      position: sticky;\n      top: 0;\n    }\n    \n    .hero {\n      height: 100vh;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      text-align: center;\n    }\n    \n    .hero h1 {\n      font-size: clamp(2rem, 5vw, 4rem);\n      margin: 0;\n      font-weight: 700;\n    }\n  </style>\n  \n  <!-- Load non-critical CSS asynchronously -->\n  <link rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n  <noscript><link rel=\"stylesheet\" href=\"styles.css\"></noscript>\n</head>\n<body>\n  <header class=\"header\">Navigation</header>\n  <section class=\"hero\">\n    <h1>Welcome</h1>\n  </section>\n  <!-- Rest of content -->\n</body>\n</html>\n```\n\n**CSS Performance Optimization Techniques:**\n\n**1. Remove Unused CSS:**\n\n```bash\n# Using PurgeCSS\nnpx purgecss --css styles.css --content \"*.html\" \"*.js\" --output purged.css\n\n# Using UnCSS\nuncss http://localhost:3000 > cleaned.css\n\n# Webpack with PurgeCSSPlugin\nconst PurgeCSSPlugin = require('purgecss-webpack-plugin');\n```\n\n**2. Optimize CSS Selectors:**\n\n```css\n/* ❌ Slow - overly specific selectors */\ndiv.container .sidebar ul li a:hover {\n  color: red;\n}\n\n/* ✅ Fast - simple, specific selectors */\n.nav-link:hover {\n  color: red;\n}\n\n/* ❌ Avoid expensive selectors */\n*[title] { } /* Universal attribute selector */\n.nav > * { } /* Universal child selector */\n:nth-child(odd) { } /* Complex pseudo-selectors */\n\n/* ✅ Efficient selectors */\n.nav-item { }\n.nav-item--active { }\n.text-center { }\n```\n\n**3. CSS Loading Strategies:**\n\n```html\n<!-- Strategy 1: Critical + Async Non-Critical -->\n<style>/* Critical CSS inline */</style>\n<link rel=\"preload\" href=\"non-critical.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n\n<!-- Strategy 2: Media-based Loading -->\n<link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\n<link rel=\"stylesheet\" href=\"mobile.css\" media=\"(max-width: 767px)\">\n<link rel=\"stylesheet\" href=\"desktop.css\" media=\"(min-width: 768px)\">\n\n<!-- Strategy 3: Resource Hints -->\n<link rel=\"preload\" href=\"fonts.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n<link rel=\"prefetch\" href=\"next-page.css\">\n<link rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com\">\n```\n\n**4. Build-Time Optimization:**\n\n```javascript\n// webpack.config.js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash:8].css',\n      chunkFilename: '[name].[contenthash:8].chunk.css',\n    }),\n  ],\n  optimization: {\n    minimizer: [\n      new CssMinimizerPlugin({\n        minimizerOptions: {\n          preset: ['default', {\n            discardComments: { removeAll: true },\n          }],\n        },\n      }),\n    ],\n  },\n};\n\n// postcss.config.js\nmodule.exports = {\n  plugins: [\n    require('autoprefixer'),\n    require('cssnano')({\n      preset: 'default',\n    }),\n  ],\n};\n```\n\n**5. Efficient CSS Architecture:**\n\n```css\n/* Component-based with BEM methodology */\n.card {\n  padding: 1rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.card__header {\n  margin-bottom: 1rem;\n  font-weight: 600;\n}\n\n.card--large {\n  padding: 2rem;\n}\n\n/* Utility classes for common patterns */\n.visually-hidden {\n  position: absolute !important;\n  width: 1px !important;\n  height: 1px !important;\n  overflow: hidden !important;\n  clip: rect(1px, 1px, 1px, 1px) !important;\n}\n\n.sr-only { /* screen reader only */\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n```\n\n**6. Performance Monitoring:**\n\n```javascript\n// Measure CSS performance\nfunction measureCSSPerformance() {\n  const perfEntries = performance.getEntriesByType('resource');\n  \n  perfEntries\n    .filter(entry => entry.name.includes('.css'))\n    .forEach(entry => {\n      console.log(`CSS: ${entry.name}`);\n      console.log(`Load time: ${entry.duration}ms`);\n      console.log(`Transfer size: ${entry.transferSize} bytes`);\n    });\n}\n\n// Critical CSS extraction detection\nfunction identifyAboveFoldElements() {\n  const viewportHeight = window.innerHeight;\n  const criticalElements = [];\n  \n  document.querySelectorAll('*').forEach(element => {\n    const rect = element.getBoundingClientRect();\n    if (rect.top < viewportHeight && rect.bottom > 0) {\n      criticalElements.push({\n        element: element.tagName.toLowerCase(),\n        classes: Array.from(element.classList),\n        top: rect.top\n      });\n    }\n  });\n  \n  return criticalElements;\n}\n\n// Web Vitals monitoring\nfunction measureWebVitals() {\n  new PerformanceObserver((list) => {\n    for (const entry of list.getEntries()) {\n      if (entry.name === 'first-contentful-paint') {\n        console.log('FCP:', entry.startTime);\n      }\n      if (entry.name === 'largest-contentful-paint') {\n        console.log('LCP:', entry.startTime);\n      }\n    }\n  }).observe({ entryTypes: ['paint', 'largest-contentful-paint'] });\n}\n```\n\n**Critical CSS Tools:**\n\n| Tool | Purpose | Usage |\n|------|---------|-------|\n| **Critical** | Extract critical CSS | `critical src/index.html --base dist/ --css dist/styles.css` |\n| **Penthouse** | Generate critical CSS | `const critical = await penthouse({url, css})` |\n| **PurgeCSS** | Remove unused CSS | `purgecss --css style.css --content index.html` |\n| **UnCSS** | Remove unused CSS | `uncss index.html > cleaned.css` |\n\n**Performance Checklist:**\n\n✅ **Critical CSS Optimization:**\n- Inline critical CSS < 14KB\n- Async load non-critical CSS\n- Eliminate render-blocking resources\n\n✅ **File Size Optimization:**\n- Minify and compress CSS\n- Remove unused CSS (tree-shaking)\n- Use efficient selectors\n- Optimize images in CSS\n\n✅ **Loading Strategy:**\n- Implement resource hints\n- Use HTTP/2 server push for critical resources\n- Enable gzip/brotli compression\n- Set proper cache headers\n\n✅ **Architecture:**\n- Follow CSS methodologies (BEM, OOCSS)\n- Use CSS containment for complex layouts\n- Implement CSS custom properties for theming\n- Avoid deep nesting (max 3 levels)\n\n**Performance Impact:**\n- **Before optimization**: FCP 2.5s, LCP 4.2s\n- **After optimization**: FCP 1.2s, LCP 2.1s\n- **Improvement**: ~50% faster rendering, better Core Web Vitals scores\n\n**Reference:** [Web.dev CSS Performance](https://web.dev/fast/#optimize-your-css)",
        "difficulty": "Hard",
        "category": "CSS Performance",
        "type": "CSS",
        "tags": [
            "CSS",
            "Performance",
            "Critical CSS",
            "Optimization",
            "Web Vitals"
        ]
    },
    {
        "id": 74,
        "question": "What are CSS Container Queries? How do they differ from Media Queries and when should you use them?",
        "solution": "**CSS Container Queries** enable styling based on a container's size rather than the viewport, revolutionizing component-based responsive design.\n\n**Core Concepts:**\n- **Container Query:** Responds to parent container dimensions\n- **Media Query:** Responds to viewport/device characteristics\n- **Containment Context:** Element that establishes query boundaries\n\n**Basic Container Query Syntax:**\n\n```css\n/* Step 1: Define containment context */\n.card-container {\n  container-type: inline-size; /* width only */\n  container-name: card;        /* optional name */\n}\n\n/* Shorthand syntax */\n.card-container {\n  container: card / inline-size;\n}\n\n/* Step 2: Query the container */\n@container card (min-width: 300px) {\n  .card {\n    display: flex;\n    gap: 1rem;\n  }\n  \n  .card__image {\n    width: 120px;\n    flex-shrink: 0;\n  }\n  \n  .card__content {\n    flex: 1;\n  }\n}\n\n@container card (min-width: 500px) {\n  .card__title {\n    font-size: 1.5rem;\n  }\n  \n  .card__description {\n    display: block; /* Show full text */\n  }\n}\n```\n\n**Practical Responsive Card Example:**\n\n```css\n/* Container setup */\n.responsive-card {\n  container: card / inline-size;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  overflow: hidden;\n}\n\n/* Small container (< 300px) - Stacked layout */\n@container card (max-width: 299px) {\n  .card {\n    text-align: center;\n  }\n  \n  .card__image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n  }\n  \n  .card__content {\n    padding: 1rem;\n  }\n  \n  .card__title {\n    font-size: 1.25rem;\n    margin-bottom: 0.5rem;\n  }\n  \n  .card__description {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Medium container (300px-499px) - Horizontal layout */\n@container card (min-width: 300px) and (max-width: 499px) {\n  .card {\n    display: flex;\n    align-items: center;\n    text-align: left;\n  }\n  \n  .card__image {\n    width: 100px;\n    height: 100px;\n    object-fit: cover;\n    flex-shrink: 0;\n  }\n  \n  .card__content {\n    padding: 1rem;\n    flex: 1;\n  }\n  \n  .card__title {\n    font-size: 1.125rem;\n    margin-bottom: 0.5rem;\n  }\n}\n\n/* Large container (≥ 500px) - Enhanced layout */\n@container card (min-width: 500px) {\n  .card {\n    display: flex;\n  }\n  \n  .card__image {\n    width: 200px;\n    height: 200px;\n    object-fit: cover;\n  }\n  \n  .card__content {\n    padding: 2rem;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n  \n  .card__title {\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n  }\n  \n  .card__description {\n    font-size: 1rem;\n    line-height: 1.6;\n    margin-bottom: 1rem;\n  }\n  \n  .card__actions {\n    margin-top: auto;\n  }\n}\n```\n\n**Container Types:**\n\n```css\n/* inline-size: queries width only (most common) */\n.container-width {\n  container-type: inline-size;\n}\n\n/* size: queries both width and height */\n.container-both {\n  container-type: size;\n}\n\n/* normal: no containment (default) */\n.container-none {\n  container-type: normal;\n}\n```\n\n**Advanced Container Query Features:**\n\n```css\n/* Multiple breakpoints */\n.widget-container {\n  container: widget / inline-size;\n}\n\n@container widget (min-width: 200px) {\n  .widget {\n    padding: 1rem;\n    background: #f8f9fa;\n  }\n}\n\n@container widget (min-width: 400px) {\n  .widget {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n  }\n}\n\n@container widget (min-width: 600px) {\n  .widget {\n    grid-template-columns: repeat(3, 1fr);\n    padding: 2rem;\n  }\n}\n\n/* Height-based queries */\n.tall-container {\n  container: tall / size;\n  height: 400px;\n}\n\n@container tall (min-height: 300px) {\n  .content {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n  }\n}\n\n/* Logical operators */\n@container (min-width: 300px) and (max-width: 600px) {\n  .element { background: lightblue; }\n}\n\n@container (min-width: 400px) or (min-height: 300px) {\n  .element { border: 2px solid blue; }\n}\n\n/* Unnamed container queries */\n.anonymous-container {\n  container-type: inline-size;\n}\n\n@container (min-width: 300px) {\n  .child { color: blue; }\n}\n```\n\n**Container Queries vs Media Queries:**\n\n| Aspect | Container Queries | Media Queries |\n|--------|-------------------|---------------|\n| **Target** | Parent container size | Viewport/device features |\n| **Use Case** | Component-level responsive design | Page-level layouts |\n| **Context** | Element-specific | Global |\n| **Reusability** | High - components adapt anywhere | Limited - viewport dependent |\n| **Best For** | Card layouts, widgets, components | Navigation, typography, page structure |\n\n**When to Use Each:**\n\n```css\n/* Use Container Queries for: */\n.component {\n  container: component / inline-size;\n}\n\n@container component (min-width: 300px) {\n  /* Component responds to its available space */\n  .component { display: flex; }\n}\n\n/* Use Media Queries for: */\n@media (min-width: 768px) {\n  /* Global layout changes */\n  .sidebar { display: block; }\n  body { font-size: 18px; }\n}\n\n@media (prefers-color-scheme: dark) {\n  /* System preferences */\n  :root { --bg-color: #1a1a1a; }\n}\n\n@media print {\n  /* Print styles */\n  .no-print { display: none; }\n}\n```\n\n**JavaScript Integration:**\n\n```javascript\n// Feature detection\nif ('container' in document.documentElement.style) {\n  console.log('Container queries supported!');\n  document.documentElement.classList.add('supports-container-queries');\n} else {\n  console.log('Container queries not supported');\n  // Load polyfill or provide fallback\n}\n\n// Dynamic container resizing\nfunction resizeContainer(element, width) {\n  element.style.width = width + 'px';\n  // Container queries automatically respond\n}\n\n// Monitor container size changes\nconst resizeObserver = new ResizeObserver(entries => {\n  entries.forEach(entry => {\n    const { width, height } = entry.contentRect;\n    console.log(`Container resized: ${width}x${height}`);\n    \n    // Optional: Set custom properties based on size\n    entry.target.style.setProperty('--container-width', width + 'px');\n  });\n});\n\nresizeObserver.observe(document.querySelector('.card-container'));\n```\n\n**Browser Support & Fallbacks:**\n\n```css\n/* Progressive enhancement approach */\n.card {\n  /* Base styles for all browsers */\n  padding: 1rem;\n  background: white;\n  border-radius: 8px;\n}\n\n/* Media query fallback for older browsers */\n@media (min-width: 500px) {\n  .card {\n    display: flex;\n    gap: 1rem;\n  }\n}\n\n/* Container query enhancement for modern browsers */\n@supports (container-type: inline-size) {\n  .card-container {\n    container: card / inline-size;\n  }\n  \n  /* Override media query with container query */\n  @container card (min-width: 300px) {\n    .card {\n      display: flex;\n      gap: 1rem;\n    }\n  }\n}\n```\n\n**Real-World Use Cases:**\n- **Design System Components**: Cards, buttons, forms that adapt to any container\n- **Dashboard Widgets**: Components that resize based on available grid space\n- **Content Cards**: Blog posts, product cards that work in sidebars or main content\n- **Navigation Components**: Menus that adapt to container width\n- **Form Elements**: Input groups that stack/flow based on available space\n\n**Browser Support:** \n- ✅ Chrome 105+, Firefox 110+, Safari 16+\n- ❌ IE, older browsers\n- Use `@supports (container-type: inline-size)` for feature detection\n\nContainer Queries represent the future of truly responsive, component-driven design systems.\n\n**Reference:** [MDN Container Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries)",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Container Queries",
            "Responsive Design",
            "Component Design",
            "Modern CSS"
        ]
    },
    {
        "id": 75,
        "question": "What are modern CSS layout techniques? Compare CSS Grid, Flexbox, and when to use each.",
        "solution": "**Modern CSS Layout** provides three main systems: **CSS Grid** for 2D layouts, **Flexbox** for 1D layouts, and **Subgrid** for nested grid alignment.\n\n**Quick Comparison:**\n\n| Feature | CSS Grid | Flexbox | Best Use Case |\n|---------|----------|---------|---------------|\n| **Dimension** | 2D (rows + columns) | 1D (single axis) | Grid: Page layout, Flex: Components |\n| **Content Flow** | Container-driven | Content-driven | Grid: Fixed structure, Flex: Dynamic content |\n| **Alignment** | Both axes simultaneously | One axis at a time | Grid: Complex alignment, Flex: Simple centering |\n| **Responsive** | Built-in with auto-fit/fill | Requires media queries | Grid: Auto-responsive, Flex: Manual breakpoints |\n\n**CSS Grid - 2D Layout System:**\n\n```css\n/* Basic Grid Setup */\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n/* Named Grid Areas (Semantic Layout) */\n.page-layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 150px;\n  grid-template-rows: auto 1fr auto;\n  gap: 1rem;\n  min-height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n\n/* Responsive Grid Areas */\n@media (max-width: 768px) {\n  .page-layout {\n    grid-template-areas:\n      \"header\"\n      \"main\"\n      \"sidebar\"\n      \"aside\"\n      \"footer\";\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Advanced Grid Features */\n.masonry-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1rem;\n}\n\n.featured-item {\n  grid-column: span 2; /* Span 2 columns */\n  grid-row: span 2;    /* Span 2 rows */\n}\n\n/* Dashboard Layout */\n.dashboard {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: 1rem;\n}\n\n.widget-large { grid-column: span 6; }\n.widget-medium { grid-column: span 4; }\n.widget-small { grid-column: span 2; }\n```\n\n**Flexbox - 1D Layout System:**\n\n```css\n/* Basic Flexbox Setup */\n.flex-container {\n  display: flex;\n  justify-content: space-between; /* Main axis */\n  align-items: center;            /* Cross axis */\n  gap: 1rem;\n  flex-wrap: wrap;\n}\n\n/* Flexible Items */\n.flex-item {\n  flex: 1 1 200px; /* grow shrink basis */\n}\n\n/* Navigation Bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.nav-brand {\n  flex-shrink: 0;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n\n.nav-actions {\n  display: flex;\n  gap: 1rem;\n  margin-left: auto;\n}\n\n/* Card Layouts */\n.card-grid {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.card {\n  flex: 1 1 300px; /* Responsive cards */\n  min-height: 200px;\n  background: white;\n  border-radius: 8px;\n  padding: 1rem;\n}\n\n/* Perfect Centering */\n.center-everything {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n}\n\n/* Media Object Pattern */\n.media {\n  display: flex;\n  gap: 1rem;\n  align-items: flex-start;\n}\n\n.media__figure {\n  flex-shrink: 0; /* Don't shrink image */\n}\n\n.media__body {\n  flex: 1; /* Take remaining space */\n}\n```\n\n**CSS Subgrid (Modern Feature):**\n\n```css\n/* Main grid */\n.card-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n}\n\n/* Nested grid inherits parent columns */\n.card {\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  grid-column: span 1;\n  grid-template-columns: subgrid; /* Inherits parent's column sizing */\n}\n\n/* Aligned across all cards */\n.card__title { grid-row: 1; }\n.card__content { grid-row: 2; }\n.card__actions { grid-row: 3; }\n```\n\n**When to Use Each:**\n\n**Use CSS Grid for:**\n\n```css\n/* Page-level layouts */\n.app-layout {\n  display: grid;\n  grid-template-areas:\n    \"sidebar header\"\n    \"sidebar main\";\n  grid-template-columns: 250px 1fr;\n  grid-template-rows: auto 1fr;\n}\n\n/* Image galleries */\n.photo-gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n}\n\n/* Complex card layouts */\n.dashboard-widgets {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  grid-auto-rows: minmax(200px, auto);\n  gap: 1rem;\n}\n\n/* Form layouts */\n.form-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n}\n\n.form-group--full {\n  grid-column: 1 / -1; /* Span all columns */\n}\n```\n\n**Use Flexbox for:**\n\n```css\n/* Component-level layouts */\n.button-group {\n  display: flex;\n  gap: 0.5rem;\n}\n\n/* Form controls */\n.input-group {\n  display: flex;\n  align-items: stretch;\n}\n\n.input-group input {\n  flex: 1;\n}\n\n.input-group button {\n  flex-shrink: 0;\n}\n\n/* Breadcrumb navigation */\n.breadcrumb {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n/* Flexible content areas */\n.content-wrapper {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.content-wrapper main {\n  flex: 1; /* Take remaining space */\n}\n\n/* Responsive stacking */\n.feature-list {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n@media (min-width: 768px) {\n  .feature-list {\n    flex-direction: row;\n  }\n  \n  .feature-item {\n    flex: 1;\n  }\n}\n```\n\n**Hybrid Layouts (Best of Both):**\n\n```css\n/* Grid for page structure, Flexbox for components */\n.modern-layout {\n  display: grid;\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n  grid-template-columns: 250px 1fr;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n/* Flexbox header */\n.header {\n  grid-area: header;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n/* Grid main content */\n.main {\n  grid-area: main;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  padding: 2rem;\n}\n\n/* Flexbox cards */\n.card {\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-radius: 8px;\n  padding: 1.5rem;\n}\n\n.card__header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.card__content {\n  flex: 1;\n}\n\n.card__actions {\n  display: flex;\n  gap: 1rem;\n  margin-top: 1rem;\n}\n```\n\n**Modern Layout Patterns:**\n\n```css\n/* Holy Grail Layout (Grid) */\n.holy-grail {\n  display: grid;\n  grid-template:\n    \"header header header\" auto\n    \"nav main aside\" 1fr\n    \"footer footer footer\" auto\n    / 200px 1fr 200px;\n  min-height: 100vh;\n}\n\n/* Pancake Stack (Flexbox) */\n.pancake-stack {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.pancake-stack > main {\n  flex: 1;\n}\n\n/* Sidebar Layout with Intrinsic Sizing */\n.sidebar-content {\n  display: grid;\n  grid-template-columns: minmax(250px, 25%) 1fr;\n  gap: 2rem;\n}\n\n/* RAM (Repeat, Auto, Minmax) Pattern */\n.ram-layout {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1rem;\n}\n\n/* Line Up Pattern */\n.lineup {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1rem;\n}\n```\n\n**Performance & Best Practices:**\n\n```css\n/* Efficient Grid */\n.efficient-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  /* Avoid complex grid-template-areas for better performance */\n}\n\n/* Efficient Flexbox */\n.efficient-flex {\n  display: flex;\n  gap: 1rem; /* Prefer gap over margins */\n  /* Avoid nested flex containers when possible */\n}\n\n/* Use logical properties for internationalization */\n.international {\n  margin-inline-start: 1rem; /* Instead of margin-left */\n  padding-block: 1rem;       /* Instead of padding-top/bottom */\n}\n```\n\n**Decision Framework:**\n\n1. **Start with the content**: Does it flow in one direction? → **Flexbox**\n2. **Need 2D control**: Rows AND columns? → **CSS Grid**\n3. **Component spacing**: Internal component layout? → **Flexbox**\n4. **Page structure**: Overall page layout? → **CSS Grid**\n5. **Dynamic content**: Unknown number of items? → **Flexbox**\n6. **Fixed structure**: Known layout areas? → **CSS Grid**\n\n**Modern Workflow:**\n1. Use **Grid** for page-level layouts and structured content\n2. Use **Flexbox** for component-level layouts and content flow\n3. Combine both for complex, maintainable layouts\n4. Consider **Container Queries** for truly responsive components\n5. Use **Subgrid** for consistent alignment across nested grids\n\n**Browser Support:**\n- **CSS Grid**: 95%+ (IE 11 with -ms- prefix)\n- **Flexbox**: 98%+ (IE 10+ with prefixes)\n- **Subgrid**: 75%+ (Firefox 71+, Safari 16+, Chrome 117+)\n\n**Reference:** [CSS Layout Cookbook](https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_cookbook)",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Grid",
            "Flexbox",
            "Layout",
            "Modern CSS",
            "Responsive Design"
        ]
    },
    {
        "id": 76,
        "question": "What's the difference between `transform: translate()` and absolute positioning for moving elements? Which is more performant?",
        "solution": "`transform: translate()` is significantly more performant than absolute positioning for animations and element movement.\n\n**Performance Differences:**\n\n**`transform: translate()` (GPU-accelerated):**\n- Handled by the GPU (Graphics Processing Unit)\n- Does NOT trigger layout/reflow or repaint\n- Moves element in its own layer\n- Ideal for animations\n\n**Absolute positioning (CPU-bound):**\n- Handled by the CPU\n- Triggers layout recalculation (reflow)\n- Can cause other elements to reposition\n- More expensive for animations\n\n```css\n/* High performance - GPU accelerated */\n.transform-move {\n  transform: translateX(100px);\n  transition: transform 0.3s ease;\n}\n\n.transform-move:hover {\n  transform: translateX(200px);\n}\n\n/* Lower performance - triggers reflow */\n.position-move {\n  position: relative;\n  left: 100px;\n  transition: left 0.3s ease;\n}\n\n.position-move:hover {\n  left: 200px;\n}\n\n/* Best practice for smooth animations */\n.smooth-animation {\n  will-change: transform; /* Hints browser to optimize */\n  transform: translate3d(0, 0, 0); /* Force GPU layer */\n}\n```\n\n**Use Cases:**\n- **Transform**: Animations, hover effects, smooth transitions\n- **Positioning**: Static layouts, document flow changes\n\n**Key Rule**: Use `transform` for movement animations, `position` for layout structure.",
        "difficulty": "Medium",
        "category": "CSS Performance",
        "type": "CSS",
        "tags": [
            "CSS",
            "Transform",
            "Position",
            "Performance",
            "GPU",
            "Animation"
        ]
    },
    {
        "id": 77,
        "question": "Does one stylesheet block another from downloading? How do browsers handle multiple CSS files?",
        "solution": "**No, stylesheets do NOT block each other from downloading.** Browsers download multiple CSS files in parallel, but they are processed sequentially and can block rendering.\n\n**How Browser Handles CSS:**\n\n**1. Parallel Download:**\n```html\n<!-- These download simultaneously */\n<link rel=\"stylesheet\" href=\"style1.css\">\n<link rel=\"stylesheet\" href=\"style2.css\">\n<link rel=\"stylesheet\" href=\"style3.css\">\n```\n\n**2. Sequential Processing:**\n- Files are applied in the order they appear in HTML\n- Later stylesheets can override earlier ones\n- All CSS must be parsed before rendering begins\n\n**3. Render Blocking:**\n```html\n<!-- Blocks rendering until all CSS is loaded */\n<head>\n  <link rel=\"stylesheet\" href=\"large-file.css\">\n  <link rel=\"stylesheet\" href=\"small-file.css\">\n</head>\n<!-- Page won't render until both files are ready */\n```\n\n**Optimization Techniques:**\n```html\n<!-- Critical CSS inline for faster rendering */\n<style>\n  /* Critical above-the-fold styles */\n  body { font-family: Arial; }\n  .header { background: #333; }\n</style>\n\n<!-- Non-critical CSS loaded asynchronously */\n<link rel=\"preload\" href=\"non-critical.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n\n<!-- Media queries for conditional loading */\n<link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\n<link rel=\"stylesheet\" href=\"mobile.css\" media=\"(max-width: 768px)\">\n```\n\n**Best Practices:**\n- Minimize CSS files (combine when possible)\n- Load critical CSS inline\n- Use `preload` for important stylesheets\n- Consider conditional loading with media queries",
        "difficulty": "Medium",
        "category": "CSS Loading",
        "type": "CSS",
        "tags": [
            "CSS",
            "Performance",
            "Loading",
            "Render Blocking",
            "Optimization"
        ]
    },
    {
        "id": 78,
        "question": "What is Feature Detection in CSS? How do you use `@supports` to provide fallbacks for newer CSS features?",
        "solution": "**Feature Detection** in CSS uses the `@supports` rule to test if a browser supports specific CSS properties before applying styles. This enables progressive enhancement and graceful fallbacks.\n\n**Basic Syntax:**\n```css\n@supports (property: value) {\n  /* Styles applied if feature is supported */\n}\n\n@supports not (property: value) {\n  /* Fallback styles for unsupported features */\n}\n```\n\n**Practical Examples:**\n\n**1. CSS Grid with Flexbox Fallback:**\n```css\n/* Default flexbox layout */\n.container {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n/* Grid layout for supporting browsers */\n@supports (display: grid) {\n  .container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n  }\n}\n```\n\n**2. CSS Custom Properties Fallback:**\n```css\n.element {\n  color: blue; /* Fallback */\n}\n\n@supports (--css: variables) {\n  .element {\n    --primary-color: #007bff;\n    color: var(--primary-color);\n  }\n}\n```\n\n**3. Complex Feature Detection:**\n```css\n/* Multiple conditions with logical operators */\n@supports (display: flex) and (gap: 20px) {\n  .flex-container {\n    display: flex;\n    gap: 20px; /* Modern flexbox gap property */\n  }\n}\n\n@supports not ((display: flex) and (gap: 20px)) {\n  .flex-container {\n    display: flex;\n  }\n  \n  .flex-container > * {\n    margin-right: 20px; /* Manual spacing fallback */\n  }\n}\n```\n\n**4. Modern CSS Features:**\n```css\n/* Container queries fallback */\n@supports not (container-type: inline-size) {\n  .card {\n    width: 100%;\n  }\n  \n  @media (min-width: 768px) {\n    .card {\n      width: 50%;\n    }\n  }\n}\n\n@supports (container-type: inline-size) {\n  .container {\n    container-type: inline-size;\n  }\n  \n  @container (min-width: 400px) {\n    .card {\n      width: 50%;\n    }\n  }\n}\n```\n\n**Best Practices:**\n- Always provide fallbacks for newer features\n- Test with older browsers that don't support `@supports`\n- Use progressive enhancement approach\n- Combine with JavaScript feature detection when needed",
        "difficulty": "Medium",
        "category": "CSS Feature Detection",
        "type": "CSS",
        "tags": [
            "CSS",
            "@supports",
            "Feature Detection",
            "Progressive Enhancement",
            "Fallbacks"
        ]
    }
]