[
    {
        "id": 1,
        "question": "What is the difference between HTML tags and elements?",
        "solution": "```html\n<h1>Heading 1</h1>\n```\n\n**Solution:**\nHTML elements are defined by a starting tag, content, and a closing tag. In the example above, `<h1>Heading 1</h1>` is an element, while `<h1>` is the starting tag and `</h1>` is the closing tag. Tags are the markup that define the element boundaries, while elements include the tags plus any content between them.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 2,
        "question": "How do you define tags and attributes in HTML?",
        "solution": "```html\n<p align=\"center\">Interview questions</p>\n<img src=\"image.jpg\" alt=\"description\" width=\"300\">\n<a href=\"https://example.com\" target=\"_blank\">Click here</a>\n```\n\n**Solution:**\nTags define how content is formatted and are enclosed in angle brackets. Attributes provide additional properties for tags and are written as name-value pairs inside the opening tag. In the examples, `align`, `src`, `alt`, `width`, `href`, and `target` are all attributes that modify the behavior or appearance of their respective elements.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 3,
        "question": "What are void elements in HTML and provide examples?",
        "solution": "```html\n<br>\n<img src=\"image.jpg\" alt=\"description\">\n<hr>\n<input type=\"text\">\n<meta charset=\"UTF-8\">\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n**Solution:**\nVoid elements (also known as empty elements) are HTML elements that do not have closing tags because they don't contain content. They are self-closing and include elements like `<br>` for line breaks, `<img>` for images, `<hr>` for horizontal rules, `<input>` for form inputs, `<meta>` for metadata, and `<link>` for external resources.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 4,
        "question": "What is the advantage of collapsing white space in HTML?",
        "solution": "```html\n<p>\n  This text has\n  multiple spaces and newlines,\n  but it will render as a single line.\n</p>\n\n<!-- Output: This text has multiple spaces and newlines, but it will render as a single line. -->\n```\n\n**Solution:**\nBrowsers collapse multiple whitespace characters (spaces, newlines, tabs) into a single space character. This allows developers to indent and format their HTML code for better readability without affecting the final rendered output. It enables clean, well-structured code while maintaining consistent visual presentation regardless of the source formatting.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 5,
        "question": "How do you display reserved characters in HTML using entities?",
        "solution": "```html\n<!-- To display \"<h1>\" as text -->\n<p>&lt;h1&gt; is a tag.</p>\n\n<!-- To display \"Ben & Jerry's\" -->\n<p>Ben &amp; Jerry's</p>\n\n<!-- To display quotes -->\n<p>He said &quot;Hello&quot; to me.</p>\n\n<!-- Non-breaking space -->\n<p>Word1&nbsp;&nbsp;&nbsp;Word2</p>\n```\n\n**Solution:**\nReserved characters in HTML must be replaced with character entities to be displayed correctly. Common entities include `&lt;` for `<`, `&gt;` for `>`, `&amp;` for `&`, `&quot;` for `\"`, `&apos;` for `'`, and `&nbsp;` for non-breaking spaces. You can also use numeric entities like `&#60;` for `<`. These prevent browsers from interpreting the characters as HTML markup.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 6,
        "question": "What are the different types of lists in HTML?",
        "solution": "```html\n<!-- Ordered List -->\n<ol>\n  <li>First item</li>\n  <li>Second item</li>\n</ol>\n\n<!-- Unordered List -->\n<ul>\n  <li>Bullet point 1</li>\n  <li>Bullet point 2</li>\n</ul>\n\n<!-- Definition List -->\n<dl>\n  <dt>HTML</dt>\n  <dd>HyperText Markup Language</dd>\n  <dt>CSS</dt>\n  <dd>Cascading Style Sheets</dd>\n</dl>\n```\n\n**Solution:**\nHTML supports three types of lists: **Ordered Lists** (`<ol>`) create numbered lists, **Unordered Lists** (`<ul>`) create bulleted lists, and **Definition Lists** (`<dl>`) create lists of terms (`<dt>`) and their definitions (`<dd>`). Each list item in ordered and unordered lists uses the `<li>` tag. Definition lists are useful for glossaries, dictionaries, or any term-definition pairs.",
        "difficulty": "Easy",
        "category": "Basic HTML",
        "type": "HTML"
    },
    {
        "id": 7,
        "question": "How do you use the 'class' attribute in HTML?",
        "solution": "```html\n<p class=\"highlight important\">This paragraph is highlighted and important.</p>\n<div class=\"container\">\n  <span class=\"highlight\">This span is also highlighted</span>\n</div>\n\n<style>\n.highlight { background-color: yellow; }\n.important { font-weight: bold; }\n.container { padding: 20px; }\n</style>\n```\n\n**Solution:**\nThe `class` attribute specifies one or more class names for an element, which are used to target elements with CSS for styling or with JavaScript for manipulation. Multiple classes can be applied to a single element by separating them with spaces. Classes are reusable across multiple elements and are the primary way to apply consistent styling to groups of elements.",
        "difficulty": "Easy",
        "category": "Attributes and Structure",
        "type": "HTML"
    },
    {
        "id": 8,
        "question": "What is the difference between 'id' and 'class' attributes?",
        "solution": "```html\n<!-- 'id' is unique -->\n<div id=\"main-header\">\n  <h1>Welcome</h1>\n</div>\n\n<!-- 'class' can be reused -->\n<p class=\"highlight-text\">This is an important paragraph.</p>\n<span class=\"highlight-text\">This is an important note.</span>\n\n<script>\n// JavaScript can target by ID\ndocument.getElementById('main-header').style.color = 'blue';\n\n// CSS can target both\n#main-header { background: #f0f0f0; }\n.highlight-text { color: red; }\n</script>\n```\n\n**Solution:**\nThe `class` attribute can be used on multiple elements and is primarily for applying CSS styles to groups of elements. The `id` attribute must be unique within the entire HTML page and is used to target a single, specific element for CSS styling or JavaScript manipulation. IDs have higher CSS specificity than classes and are commonly used with `document.getElementById()` in JavaScript.",
        "difficulty": "Medium",
        "category": "Attributes and Structure",
        "type": "HTML"
    },
    {
        "id": 9,
        "question": "How do you create a form with file upload using multipart form data?",
        "solution": "```html\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\" required>\n  \n  <label for=\"avatar\">Profile Picture:</label>\n  <input type=\"file\" id=\"avatar\" name=\"avatar\" accept=\"image/*\">\n  \n  <label for=\"document\">Document:</label>\n  <input type=\"file\" id=\"document\" name=\"document\" accept=\".pdf,.doc,.docx\">\n  \n  <input type=\"submit\" value=\"Upload\">\n</form>\n```\n\n**Solution:**\nThe `enctype=\"multipart/form-data\"` attribute is required when a form includes file uploads using `<input type=\"file\">`. This encoding type ensures that form data is sent in multiple parts, with file data included as binary attachments. Without this encoding type, file uploads will not work properly. The `accept` attribute can be used to restrict file types that users can select.",
        "difficulty": "Medium",
        "category": "Forms",
        "type": "HTML"
    },
    {
        "id": 10,
        "question": "How do you create a semantic HTML5 layout structure?",
        "solution": "```html\n<body>\n  <header>\n    <h1>My Website</h1>\n    <nav>\n      <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about\">About</a></li>\n        <li><a href=\"/contact\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main>\n    <article>\n      <header>\n        <h2>Article Title</h2>\n        <time datetime=\"2023-10-13\">October 13, 2023</time>\n      </header>\n      <section>\n        <h3>Introduction</h3>\n        <p>This is the main content of the article.</p>\n      </section>\n      <section>\n        <h3>Details</h3>\n        <p>More detailed information here.</p>\n      </section>\n    </article>\n    \n    <aside>\n      <h3>Related Links</h3>\n      <ul>\n        <li><a href=\"#\">Related Article 1</a></li>\n        <li><a href=\"#\">Related Article 2</a></li>\n      </ul>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2023 My Website. All rights reserved.</p>\n  </footer>\n</body>\n```\n\n**Solution:**\nHTML5 provides semantic elements that improve accessibility and SEO. `<header>` contains introductory content, `<nav>` contains navigation links, `<main>` represents the dominant content (only one per page), `<article>` contains self-contained content, `<section>` groups related content with headings, `<aside>` contains sidebar content, and `<footer>` contains closing information. These elements make the document structure more meaningful to browsers, search engines, and assistive technologies.",
        "difficulty": "Medium",
        "category": "Attributes and Structure",
        "type": "HTML"
    },
    {
        "id": 11,
        "question": "How do you optimize website asset loading for better performance?",
        "solution": "```html\n<!-- Lazy load an image -->\n<img src=\"image.jpg\" loading=\"lazy\" alt=\"Descriptive text\">\n\n<!-- Defer script execution -->\n<script src=\"script.js\" defer></script>\n\n<!-- Load script asynchronously -->\n<script src=\"script.js\" async></script>\n\n<!-- Preload critical resources -->\n<link rel=\"preload\" href=\"critical.css\" as=\"style\">\n<link rel=\"preload\" href=\"hero-image.jpg\" as=\"image\">\n```\n\n**Solution:**\nOptimizing asset loading improves performance through several techniques: Use CDN hosting for faster delivery, enable file compression (Gzip/Brotli), minify CSS and JS files, implement lazy loading for images with `loading=\"lazy\"`, use `defer` and `async` attributes for scripts to prevent blocking, and preload critical resources. These optimizations reduce load times and enhance user experience.",
        "difficulty": "Medium",
        "category": "Performance Optimization",
        "type": "HTML"
    },
    {
        "id": 12,
        "question": "What are the different HTML formatting tags and their purposes?",
        "solution": "```html\n<p>This is <b>bold</b> and this is <strong>strong</strong>.</p>\n<p>This is <i>italic</i> and this is <em>emphasized</em>.</p>\n<p>This is <mark>highlighted</mark> text.</p>\n<p>This is <small>smaller text</small> for fine print.</p>\n<p>This text is <del>deleted</del> and this is <ins>inserted</ins>.</p>\n<p>Chemical formula: H<sub>2</sub>O</p>\n<p>Mathematical expression: E=MC<sup>2</sup></p>\n```\n\n**Solution:**\nHTML provides various formatting tags: `<b>` for bold (visual only), `<strong>` for strong importance (semantic), `<i>` for italic (visual only), `<em>` for emphasis (semantic), `<mark>` for highlighting, `<small>` for smaller text, `<del>` for deleted text, `<ins>` for inserted text, `<sub>` for subscript, and `<sup>` for superscript. Semantic tags (`<strong>`, `<em>`) are preferred as they convey meaning to screen readers and search engines.",
        "difficulty": "Easy",
        "category": "Text Formatting",
        "type": "HTML"
    },
    {
        "id": 13,
        "question": "What are the different types of HTML doctypes?",
        "solution": "```html\n<!-- HTML5 (Recommended) -->\n<!DOCTYPE html>\n\n<!-- HTML 4.01 Strict -->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<!-- HTML 4.01 Transitional -->\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n\n<!-- XHTML 1.0 Strict -->\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n```\n\n**Solution:**\nBefore HTML5, doctypes specified the HTML version and rules. Strict doctypes enforced clean markup without deprecated elements, Transitional doctypes allowed some deprecated elements for backward compatibility, and Frameset doctypes supported frames. HTML5 simplified this with just `<!DOCTYPE html>`, which is required to enable standards-compliant rendering mode in browsers.",
        "difficulty": "Easy",
        "category": "Document Structure",
        "type": "HTML"
    },
    {
        "id": 14,
        "question": "What is the difference between `<strong>`, `<b>`, `<em>`, and `<i>` tags?",
        "solution": "```html\n<!-- Visual formatting -->\n<p>This is <b>bold text</b> and this is <i>italic text</i>.</p>\n\n<!-- Semantic formatting -->\n<p>This is <strong>strongly important</strong> and this is <em>emphasized</em>.</p>\n\n<!-- Styling with CSS -->\n<style>\n  .bold { font-weight: bold; }\n  .italic { font-style: italic; }\n</style>\n<p>This is <span class=\"bold\">styled bold</span> text.</p>\n```\n\n**Solution:**\n`<b>` and `<i>` are purely visual tags that apply bold and italic styling without semantic meaning. `<strong>` and `<em>` are semantic tags that indicate importance and emphasis respectively, which screen readers and search engines understand. While they render similarly by default, semantic tags are preferred for accessibility and SEO. CSS classes are recommended for purely visual styling.",
        "difficulty": "Medium",
        "category": "Semantic HTML",
        "type": "HTML"
    },
    {
        "id": 15,
        "question": "What is the difference between `<head>` and `<body>` sections?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Metadata - not displayed on page -->\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Page Title</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <script src=\"analytics.js\"></script>\n  <style>\n    body { font-family: Arial, sans-serif; }\n  </style>\n</head>\n<body>\n  <!-- Visible content -->\n  <header>\n    <h1>Welcome to My Website</h1>\n    <nav>\n      <a href=\"/home\">Home</a>\n      <a href=\"/about\">About</a>\n    </nav>\n  </header>\n  <main>\n    <p>This content is visible to users.</p>\n  </main>\n</body>\n</html>\n```\n\n**Solution:**\nThe `<head>` section contains metadata about the HTML document that is not displayed on the page, including title, character encoding, stylesheets, scripts, and meta tags for SEO. The `<body>` section contains all visible content that users see and interact with, such as text, images, links, and other elements. The head provides information for browsers and search engines, while the body provides the user interface.",
        "difficulty": "Easy",
        "category": "Document Structure",
        "type": "HTML"
    },
    {
        "id": 16,
        "question": "How can you display a webpage inside another webpage?",
        "solution": "```html\n<!-- Basic iframe -->\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\"></iframe>\n\n<!-- Iframe with additional attributes -->\n<iframe \n  src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n  width=\"560\" \n  height=\"315\" \n  frameborder=\"0\" \n  allowfullscreen\n  title=\"YouTube video player\">\n</iframe>\n\n<!-- Responsive iframe -->\n<div style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\">\n  <iframe \n    src=\"https://www.example.com\" \n    style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n    title=\"Embedded content\">\n  </iframe>\n</div>\n```\n\n**Solution:**\nUse the `<iframe>` (Inline Frame) element to embed another HTML document within the current page. The `src` attribute specifies the URL of the page to embed. Important attributes include `width`, `height`, `title` for accessibility, `allowfullscreen` for media content, and `sandbox` for security restrictions. Consider responsive design techniques for mobile compatibility and always include fallback content.",
        "difficulty": "Medium",
        "category": "Document Embedding",
        "type": "HTML"
    },
    {
        "id": 17,
        "question": "What is the difference between cell padding and cell spacing in HTML tables?",
        "solution": "```html\n<!-- HTML table with deprecated attributes -->\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"5\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n</table>\n\n<!-- Modern CSS approach -->\n<style>\n.modern-table {\n  border-collapse: separate;\n  border-spacing: 10px; /* Equivalent to cellspacing */\n}\n\n.modern-table td, .modern-table th {\n  padding: 15px; /* Equivalent to cellpadding */\n  border: 1px solid #ccc;\n}\n</style>\n\n<table class=\"modern-table\">\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n</table>\n```\n\n**Solution:**\nCell spacing controls the space between adjacent table cells, while cell padding controls the space between cell content and its border. The HTML attributes `cellspacing` and `cellpadding` are deprecated in HTML5. Use CSS instead: `border-spacing` property for cell spacing (requires `border-collapse: separate`) and `padding` property on `td`/`th` elements for cell padding.",
        "difficulty": "Medium",
        "category": "Tables",
        "type": "HTML"
    },
    {
        "id": 18,
        "question": "How do you span rows or columns in HTML tables?",
        "solution": "```html\n<table border=\"1\">\n  <tr>\n    <th colspan=\"2\">Full Name</th>\n    <th rowspan=\"2\">Age</th>\n  </tr>\n  <tr>\n    <th>First</th>\n    <th>Last</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>Doe</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td colspan=\"3\">Total: 1 person</td>\n  </tr>\n</table>\n\n<!-- Complex table example -->\n<table border=\"1\">\n  <tr>\n    <th>Product</th>\n    <th colspan=\"2\">Sales</th>\n    <th rowspan=\"2\">Total</th>\n  </tr>\n  <tr>\n    <td rowspan=\"2\">Laptops</td>\n    <td>Q1</td>\n    <td>100</td>\n  </tr>\n  <tr>\n    <td>Q2</td>\n    <td>150</td>\n    <td>250</td>\n  </tr>\n</table>\n```\n\n**Solution:**\nUse `colspan` attribute to make a cell span multiple columns and `rowspan` attribute to make a cell span multiple rows. The value specifies how many columns or rows the cell should span. When using these attributes, remember to adjust the number of cells in affected rows to maintain proper table structure. This is useful for creating headers that cover multiple columns or data cells that group related information.",
        "difficulty": "Medium",
        "category": "Tables",
        "type": "HTML"
    },
    {
        "id": 19,
        "question": "How can you change an inline element to a block element?",
        "solution": "```html\n<!-- Inline elements by default -->\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<span>Inline span</span>\n\n<!-- Converting to block elements -->\n<style>\n.block-link {\n  display: block;\n  background-color: lightblue;\n  padding: 10px;\n  margin: 5px 0;\n  text-decoration: none;\n}\n\n.block-span {\n  display: block;\n  background-color: lightgreen;\n  padding: 8px;\n  margin: 3px 0;\n}\n\n/* Other display options */\n.inline-block {\n  display: inline-block;\n  width: 100px;\n  height: 50px;\n  background-color: lightyellow;\n  margin: 5px;\n}\n</style>\n\n<a href=\"#\" class=\"block-link\">Block Link 1</a>\n<a href=\"#\" class=\"block-link\">Block Link 2</a>\n<span class=\"block-span\">Block span</span>\n\n<span class=\"inline-block\">Inline-block 1</span>\n<span class=\"inline-block\">Inline-block 2</span>\n```\n\n**Solution:**\nUse the CSS `display` property to change element behavior. Set `display: block` to make inline elements behave like block elements (full width, new line). You can also use `display: inline-block` to get block-like properties while staying inline, or `display: flex`/`display: grid` for modern layout control. This allows you to modify the default display behavior of any HTML element.",
        "difficulty": "Easy",
        "category": "CSS Display",
        "type": "HTML"
    },
    {
        "id": 20,
        "question": "What are the different ways to apply CSS styles to HTML elements?",
        "solution": "```html\n<!-- 1. External CSS (Recommended) -->\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<!-- 2. Internal CSS -->\n<head>\n  <style>\n    .internal-style {\n      color: blue;\n      font-size: 16px;\n    }\n    \n    #header {\n      background-color: #f0f0f0;\n      padding: 20px;\n    }\n  </style>\n</head>\n\n<!-- 3. Inline CSS (Highest specificity) -->\n<p style=\"color: red; font-weight: bold;\">This text is red and bold.</p>\n\n<!-- styles.css file content -->\n/*\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n*/\n```\n\n**Solution:**\nThere are three ways to apply CSS: **External CSS** using `<link>` tag (most maintainable, cacheable, recommended for production), **Internal CSS** using `<style>` tag in the head (good for single-page styles or testing), and **Inline CSS** using the `style` attribute (highest specificity, but poor maintainability). External CSS promotes separation of concerns and better performance through caching.",
        "difficulty": "Easy",
        "category": "CSS Integration",
        "type": "HTML"
    },
    {
        "id": 21,
        "question": "What is the difference between `display: none` and `visibility: hidden`?",
        "solution": "```html\n<style>\n.display-none {\n  display: none; /* Removes from document flow */\n}\n\n.visibility-hidden {\n  visibility: hidden; /* Hidden but occupies space */\n}\n\n.opacity-zero {\n  opacity: 0; /* Transparent but occupies space and can receive events */\n}\n</style>\n\n<div>First paragraph.</div>\n<div class=\"display-none\">This paragraph is not displayed and takes no space.</div>\n<div class=\"visibility-hidden\">This paragraph is hidden but still takes up space.</div>\n<div class=\"opacity-zero\">This paragraph is transparent but still takes up space.</div>\n<div>Last paragraph.</div>\n\n<!-- JavaScript demonstration -->\n<script>\n// Element with display: none cannot be measured\nconsole.log(document.querySelector('.display-none').offsetHeight); // 0\n\n// Element with visibility: hidden can be measured\nconsole.log(document.querySelector('.visibility-hidden').offsetHeight); // actual height\n</script>\n```\n\n**Solution:**\n`display: none` completely removes the element from the document flow - it takes up no space and cannot be measured. `visibility: hidden` hides the element but it still occupies its original space in the layout. Additionally, `opacity: 0` makes an element transparent but it remains in the flow and can still receive events. Use `display: none` for conditional rendering and `visibility: hidden` when you need to maintain layout spacing.",
        "difficulty": "Medium",
        "category": "CSS Display",
        "type": "HTML"
    },
    {
        "id": 22,
        "question": "What is the difference between `<link>` and `<a>` tags?",
        "solution": "```html\n<!-- <link> tag - Defines relationships to external resources -->\n<head>\n  <!-- Linking stylesheets -->\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  \n  <!-- Preloading resources -->\n  <link rel=\"preload\" href=\"font.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n  \n  <!-- Favicon -->\n  <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n  \n  <!-- RSS feed -->\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS Feed\" href=\"feed.xml\">\n  \n  <!-- Canonical URL -->\n  <link rel=\"canonical\" href=\"https://example.com/page\">\n</head>\n\n<!-- <a> tag - Creates hyperlinks -->\n<body>\n  <!-- Navigation links -->\n  <a href=\"/home\">Home</a>\n  <a href=\"/about\">About Us</a>\n  <a href=\"mailto:contact@example.com\">Email Us</a>\n  <a href=\"tel:+1234567890\">Call Us</a>\n  \n  <!-- External links -->\n  <a href=\"https://example.com\" target=\"_blank\" rel=\"noopener\">External Site</a>\n  \n  <!-- Anchor links -->\n  <a href=\"#section1\">Go to Section 1</a>\n  \n  <!-- Download links -->\n  <a href=\"document.pdf\" download>Download PDF</a>\n</body>\n```\n\n**Solution:**\nThe `<link>` tag defines relationships between the current document and external resources, typically used in the `<head>` for stylesheets, fonts, icons, and metadata. It's not clickable and doesn't create visible content. The `<a>` (anchor) tag creates clickable hyperlinks for navigation, appearing in the `<body>` section. `<link>` establishes resource relationships while `<a>` creates user interaction points for navigation.",
        "difficulty": "Easy",
        "category": "HTML Links",
        "type": "HTML"
    },
    {
        "id": 23,
        "question": "How do you include JavaScript code in HTML documents?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- External JavaScript file -->\n  <script src=\"app.js\" defer></script>\n  \n  <!-- External JavaScript with async loading -->\n  <script src=\"analytics.js\" async></script>\n  \n  <!-- Internal JavaScript -->\n  <script>\n    console.log(\"Script in head - runs immediately\");\n    \n    function initPage() {\n      console.log(\"Page initialization function\");\n    }\n  </script>\n</head>\n<body>\n  <h1 onclick=\"handleClick()\">Click me</h1>\n  <button id=\"myButton\">Modern Event Handling</button>\n  \n  <!-- Inline event handler -->\n  <button onclick=\"alert('Inline event handler')\">Alert Button</button>\n  \n  <!-- Script at end of body (recommended) -->\n  <script>\n    // This runs after DOM is loaded\n    document.getElementById('myButton').addEventListener('click', function() {\n      alert('Modern event handling');\n    });\n    \n    function handleClick() {\n      console.log('Header clicked');\n    }\n  </script>\n</body>\n</html>\n```\n\n**Solution:**\nJavaScript can be included using the `<script>` tag in three ways: **External files** with `src` attribute (recommended for reusability), **Internal scripts** within `<script>` tags, and **Inline event handlers** in HTML attributes. Use `defer` for scripts that need DOM access, `async` for independent scripts, or place scripts at the end of `<body>` for optimal performance. Modern practice favors external files with event listeners over inline handlers.",
        "difficulty": "Easy",
        "category": "JavaScript Integration",
        "type": "HTML"
    },
    {
        "id": 24,
        "question": "When should you place scripts in `<head>` versus `<body>`?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Critical scripts that must run before page content -->\n  <script src=\"polyfills.js\"></script>\n  \n  <!-- Non-blocking scripts with defer -->\n  <script src=\"main.js\" defer></script>\n  \n  <!-- Independent scripts with async -->\n  <script src=\"analytics.js\" async></script>\n  \n  <!-- Inline critical JavaScript -->\n  <script>\n    // Feature detection\n    if (!window.fetch) {\n      document.write('<script src=\"fetch-polyfill.js\"><\\/script>');\n    }\n  </script>\n</head>\n<body>\n  <header>\n    <h1 id=\"title\">My Website</h1>\n  </header>\n  \n  <main>\n    <p id=\"content\">Page content here</p>\n  </main>\n  \n  <!-- Scripts that need DOM elements (recommended) -->\n  <script>\n    // This runs after DOM elements are available\n    document.getElementById('title').style.color = 'blue';\n    document.getElementById('content').addEventListener('click', function() {\n      alert('Content clicked!');\n    });\n  </script>\n  \n  <!-- External script at end of body -->\n  <script src=\"ui-interactions.js\"></script>\n</body>\n</html>\n```\n\n**Solution:**\nPlace scripts in `<head>` for critical functionality that must run before page content loads (polyfills, feature detection), but use `defer` or `async` to prevent blocking. Place scripts at the end of `<body>` for DOM manipulation and user interactions, ensuring HTML elements are available when scripts execute. The `defer` attribute loads scripts in parallel but executes after HTML parsing, while `async` loads and executes immediately, potentially blocking rendering.",
        "difficulty": "Medium",
        "category": "JavaScript Integration",
        "type": "HTML"
    },
    {
        "id": 25,
        "question": "How do you create an HTML form with different input types?",
        "solution": "```html\n<form action=\"/submit\" method=\"post\" enctype=\"multipart/form-data\">\n  <!-- Text inputs -->\n  <label for=\"name\">Full Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" required placeholder=\"Enter your name\">\n  \n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\" required>\n  \n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"8\">\n  \n  <!-- Number and range inputs -->\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" id=\"age\" name=\"age\" min=\"18\" max=\"100\">\n  \n  <label for=\"rating\">Rating (1-10):</label>\n  <input type=\"range\" id=\"rating\" name=\"rating\" min=\"1\" max=\"10\" value=\"5\">\n  \n  <!-- Date inputs -->\n  <label for=\"birthdate\">Birth Date:</label>\n  <input type=\"date\" id=\"birthdate\" name=\"birthdate\">\n  \n  <!-- Selection inputs -->\n  <label for=\"country\">Country:</label>\n  <select id=\"country\" name=\"country\" required>\n    <option value=\"\">Select a country</option>\n    <option value=\"us\">United States</option>\n    <option value=\"uk\">United Kingdom</option>\n    <option value=\"ca\">Canada</option>\n  </select>\n  \n  <!-- Radio buttons -->\n  <fieldset>\n    <legend>Gender:</legend>\n    <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n    <label for=\"male\">Male</label>\n    \n    <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n    <label for=\"female\">Female</label>\n  </fieldset>\n  \n  <!-- Checkboxes -->\n  <label>\n    <input type=\"checkbox\" name=\"newsletter\" value=\"yes\">\n    Subscribe to newsletter\n  </label>\n  \n  <!-- File upload -->\n  <label for=\"avatar\">Profile Picture:</label>\n  <input type=\"file\" id=\"avatar\" name=\"avatar\" accept=\"image/*\">\n  \n  <!-- Textarea -->\n  <label for=\"message\">Message:</label>\n  <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Enter your message\"></textarea>\n  \n  <!-- Submit button -->\n  <button type=\"submit\">Submit Form</button>\n  <input type=\"reset\" value=\"Reset Form\">\n</form>\n```\n\n**Solution:**\nHTML forms use the `<form>` element with various input types for different data collection needs. Key attributes include `action` (submission URL), `method` (GET/POST), and `enctype` for file uploads. Input types include text, email, password, number, range, date, file, and more. Use `<label>` elements for accessibility, validation attributes like `required` and `min`/`max`, and organize related fields with `<fieldset>` and `<legend>` for better user experience.",
        "difficulty": "Medium",
        "category": "Forms",
        "type": "HTML"
    },
    {
        "id": 26,
        "question": "How do you handle events in HTML elements?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    .highlight { background-color: yellow; }\n    .button { padding: 10px; margin: 5px; cursor: pointer; }\n  </style>\n</head>\n<body>\n  <!-- Inline event handlers (not recommended for complex apps) -->\n  <button onclick=\"showAlert()\">Inline Click Handler</button>\n  <div onmouseover=\"this.style.backgroundColor='lightblue'\" \n       onmouseout=\"this.style.backgroundColor=''\">Hover me</div>\n  \n  <!-- Form events -->\n  <form onsubmit=\"return validateForm(event)\">\n    <input type=\"text\" onchange=\"handleInputChange(this)\" placeholder=\"Type something\">\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n  \n  <!-- Modern event handling (recommended) -->\n  <button id=\"modernButton\" class=\"button\">Modern Event Handling</button>\n  <div id=\"hoverTarget\" class=\"button\">Hover Target</div>\n  \n  <script>\n    // Inline event handler functions\n    function showAlert() {\n      alert('Button clicked using inline handler!');\n    }\n    \n    function handleInputChange(element) {\n      console.log('Input value changed to:', element.value);\n    }\n    \n    function validateForm(event) {\n      const input = event.target.querySelector('input[type=\"text\"]');\n      if (input.value.trim() === '') {\n        alert('Please enter some text');\n        event.preventDefault();\n        return false;\n      }\n      return true;\n    }\n    \n    // Modern event listeners (recommended approach)\n    document.getElementById('modernButton').addEventListener('click', function(event) {\n      console.log('Modern click handler executed');\n      event.target.textContent = 'Clicked!';\n    });\n    \n    // Multiple event listeners on same element\n    const hoverTarget = document.getElementById('hoverTarget');\n    \n    hoverTarget.addEventListener('mouseenter', function() {\n      this.classList.add('highlight');\n    });\n    \n    hoverTarget.addEventListener('mouseleave', function() {\n      this.classList.remove('highlight');\n    });\n    \n    // Event delegation for dynamic content\n    document.body.addEventListener('click', function(event) {\n      if (event.target.matches('.dynamic-button')) {\n        console.log('Dynamic button clicked');\n      }\n    });\n    \n    // Keyboard events\n    document.addEventListener('keydown', function(event) {\n      if (event.key === 'Escape') {\n        console.log('Escape key pressed');\n      }\n    });\n  </script>\n</body>\n</html>\n```\n\n**Solution:**\nEvents can be handled using inline event attributes (like `onclick`, `onmouseover`) directly in HTML elements, but the modern recommended approach is using `addEventListener` in JavaScript. This method allows multiple listeners per event, better separation of concerns, and more control over event behavior. Common events include click, submit, change, mouseenter/leave, and keydown. Use event delegation for dynamic content and always consider accessibility when implementing interactions.",
        "difficulty": "Medium",
        "category": "Events",
        "type": "HTML"
    },
    {
        "id": 27,
        "question": "What are the main advantages of HTML5 over previous versions?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>HTML5 Features Demo</title>\n</head>\n<body>\n  <!-- Semantic elements -->\n  <header>\n    <nav>\n      <a href=\"#home\">Home</a>\n      <a href=\"#about\">About</a>\n    </nav>\n  </header>\n  \n  <main>\n    <article>\n      <section>\n        <!-- Native multimedia support -->\n        <video controls width=\"320\" height=\"240\">\n          <source src=\"video.mp4\" type=\"video/mp4\">\n          <source src=\"video.webm\" type=\"video/webm\">\n          Your browser does not support the video tag.\n        </video>\n        \n        <audio controls>\n          <source src=\"audio.mp3\" type=\"audio/mpeg\">\n          <source src=\"audio.ogg\" type=\"audio/ogg\">\n          Your browser does not support the audio element.\n        </audio>\n        \n        <!-- Enhanced form controls -->\n        <form>\n          <input type=\"email\" placeholder=\"email@example.com\" required>\n          <input type=\"date\" required>\n          <input type=\"number\" min=\"1\" max=\"100\">\n          <input type=\"range\" min=\"0\" max=\"100\" value=\"50\">\n          <input type=\"color\" value=\"#ff0000\">\n          <input type=\"search\" placeholder=\"Search...\">\n        </form>\n        \n        <!-- Canvas for graphics -->\n        <canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000;\">\n          Your browser does not support the canvas element.\n        </canvas>\n        \n        <!-- SVG graphics -->\n        <svg width=\"100\" height=\"100\">\n          <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" />\n        </svg>\n      </section>\n    </article>\n    \n    <aside>\n      <!-- Web storage example -->\n      <button onclick=\"saveData()\">Save to Local Storage</button>\n      <button onclick=\"loadData()\">Load from Local Storage</button>\n      <div id=\"storage-result\"></div>\n    </aside>\n  </main>\n  \n  <footer>\n    <p>&copy; 2023 HTML5 Demo</p>\n  </footer>\n  \n  <script>\n    // Canvas drawing\n    const canvas = document.getElementById('myCanvas');\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#FF0000';\n    ctx.fillRect(0, 0, 80, 100);\n    \n    // Web storage\n    function saveData() {\n      localStorage.setItem('user', 'John Doe');\n      sessionStorage.setItem('session', 'active');\n      document.getElementById('storage-result').textContent = 'Data saved!';\n    }\n    \n    function loadData() {\n      const user = localStorage.getItem('user') || 'No user';\n      const session = sessionStorage.getItem('session') || 'No session';\n      document.getElementById('storage-result').textContent = `User: ${user}, Session: ${session}`;\n    }\n    \n    // Geolocation API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        console.log('Latitude:', position.coords.latitude);\n        console.log('Longitude:', position.coords.longitude);\n      });\n    }\n  </script>\n</body>\n</html>\n```\n\n**Solution:**\nHTML5 introduced major improvements including: **Semantic elements** (`<header>`, `<nav>`, `<main>`, `<article>`, `<section>`, `<aside>`, `<footer>`) for better document structure and accessibility, **native multimedia support** with `<video>` and `<audio>` tags eliminating plugin dependencies, **enhanced form controls** with new input types like email, date, and number, **client-side storage** with localStorage and sessionStorage, **graphics capabilities** with `<canvas>` and `<svg>`, **offline capabilities** with Application Cache, and **improved APIs** like Geolocation, Web Workers, and WebSockets for rich web applications.",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 28,
        "question": "How do you include audio and video content in HTML5?",
        "solution": "```html\n<!-- Basic Audio Element -->\n<audio controls>\n  <source src=\"audio.mp3\" type=\"audio/mpeg\">\n  <source src=\"audio.ogg\" type=\"audio/ogg\">\n  <source src=\"audio.wav\" type=\"audio/wav\">\n  Your browser does not support the audio element.\n</audio>\n\n<!-- Advanced Audio with Attributes -->\n<audio controls autoplay muted loop preload=\"auto\">\n  <source src=\"podcast.mp3\" type=\"audio/mpeg\">\n  <p>Your browser doesn't support HTML5 audio. <a href=\"podcast.mp3\">Download the audio file</a>.</p>\n</audio>\n\n<!-- Basic Video Element -->\n<video controls width=\"640\" height=\"360\">\n  <source src=\"video.mp4\" type=\"video/mp4\">\n  <source src=\"video.webm\" type=\"video/webm\">\n  <source src=\"video.ogg\" type=\"video/ogg\">\n  Your browser does not support the video tag.\n</video>\n\n<!-- Advanced Video with Features -->\n<video controls width=\"100%\" height=\"auto\" poster=\"thumbnail.jpg\" preload=\"metadata\">\n  <source src=\"movie.mp4\" type=\"video/mp4\">\n  <source src=\"movie.webm\" type=\"video/webm\">\n  \n  <!-- Subtitles/Captions -->\n  <track kind=\"subtitles\" src=\"subtitles-en.vtt\" srclang=\"en\" label=\"English\">\n  <track kind=\"subtitles\" src=\"subtitles-es.vtt\" srclang=\"es\" label=\"Español\">\n  <track kind=\"captions\" src=\"captions.vtt\" srclang=\"en\" label=\"English Captions\">\n  \n  <!-- Fallback content -->\n  <p>Your browser doesn't support HTML5 video. <a href=\"movie.mp4\">Download the video file</a>.</p>\n</video>\n\n<!-- JavaScript Control -->\n<video id=\"myVideo\" controls>\n  <source src=\"demo.mp4\" type=\"video/mp4\">\n</video>\n\n<div>\n  <button onclick=\"playVideo()\">Play</button>\n  <button onclick=\"pauseVideo()\">Pause</button>\n  <button onclick=\"setVolume(0.5)\">50% Volume</button>\n  <button onclick=\"skipToTime(30)\">Skip to 30s</button>\n</div>\n\n<script>\nconst video = document.getElementById('myVideo');\n\nfunction playVideo() {\n  video.play();\n}\n\nfunction pauseVideo() {\n  video.pause();\n}\n\nfunction setVolume(level) {\n  video.volume = level;\n}\n\nfunction skipToTime(seconds) {\n  video.currentTime = seconds;\n}\n\n// Event listeners\nvideo.addEventListener('loadstart', () => console.log('Started loading'));\nvideo.addEventListener('canplay', () => console.log('Can start playing'));\nvideo.addEventListener('ended', () => console.log('Video ended'));\n</script>\n```\n\n**Solution:**\nHTML5 provides native `<audio>` and `<video>` elements for multimedia content. Use multiple `<source>` elements for cross-browser compatibility with different formats (MP4, WebM, OGG). Important attributes include `controls` for playback controls, `autoplay` for automatic playback, `muted` to start muted, `loop` for continuous playback, `preload` for loading behavior, and `poster` for video thumbnails. Include `<track>` elements for subtitles and captions, and always provide fallback content for unsupported browsers.",
        "difficulty": "Medium",
        "category": "Multimedia",
        "type": "HTML"
    },
    {
        "id": 29,
        "question": "What is the difference between inline and block elements?",
        "solution": "```html\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    .demo-container {\n      border: 2px solid #333;\n      margin: 10px 0;\n      padding: 10px;\n    }\n    \n    .inline-demo {\n      background-color: lightblue;\n      padding: 5px;\n      margin: 10px;\n      border: 1px solid blue;\n    }\n    \n    .block-demo {\n      background-color: lightgreen;\n      padding: 5px;\n      margin: 10px;\n      border: 1px solid green;\n    }\n    \n    .width-height-test {\n      width: 200px;\n      height: 50px;\n      background-color: lightyellow;\n    }\n  </style>\n</head>\n<body>\n  <!-- Inline Elements Demo -->\n  <div class=\"demo-container\">\n    <h3>Inline Elements (flow horizontally)</h3>\n    <span class=\"inline-demo\">Span 1</span>\n    <span class=\"inline-demo\">Span 2</span>\n    <a href=\"#\" class=\"inline-demo\">Link</a>\n    <strong class=\"inline-demo\">Strong</strong>\n    <em class=\"inline-demo\">Emphasis</em>\n    <code class=\"inline-demo\">Code</code>\n  </div>\n  \n  <!-- Block Elements Demo -->\n  <div class=\"demo-container\">\n    <h3>Block Elements (stack vertically)</h3>\n    <div class=\"block-demo\">Div 1</div>\n    <div class=\"block-demo\">Div 2</div>\n    <p class=\"block-demo\">Paragraph</p>\n    <h4 class=\"block-demo\">Heading 4</h4>\n    <section class=\"block-demo\">Section</section>\n  </div>\n  \n  <!-- Width/Height Behavior -->\n  <div class=\"demo-container\">\n    <h3>Width/Height Behavior</h3>\n    <p>Inline elements ignore width/height:</p>\n    <span class=\"width-height-test inline-demo\">Inline with width/height</span>\n    \n    <p>Block elements respect width/height:</p>\n    <div class=\"width-height-test block-demo\">Block with width/height</div>\n  </div>\n  \n  <!-- CSS Display Property Override -->\n  <div class=\"demo-container\">\n    <h3>CSS Display Property Override</h3>\n    <style>\n      .span-as-block {\n        display: block;\n        background-color: lightcoral;\n        width: 200px;\n        height: 40px;\n        margin: 5px 0;\n      }\n      \n      .div-as-inline {\n        display: inline;\n        background-color: lightpink;\n        padding: 5px;\n      }\n      \n      .inline-block-demo {\n        display: inline-block;\n        background-color: lightsalmon;\n        width: 100px;\n        height: 50px;\n        margin: 5px;\n        vertical-align: top;\n      }\n    </style>\n    \n    <span class=\"span-as-block\">Span as block</span>\n    <span class=\"span-as-block\">Another span as block</span>\n    \n    <div class=\"div-as-inline\">Div as inline</div>\n    <div class=\"div-as-inline\">Another div as inline</div>\n    \n    <p>Inline-block combines both behaviors:</p>\n    <div class=\"inline-block-demo\">IB 1</div>\n    <div class=\"inline-block-demo\">IB 2</div>\n    <div class=\"inline-block-demo\">IB 3</div>\n  </div>\n</body>\n</html>\n```\n\n**Solution:**\n**Inline elements** flow horizontally, only take up necessary width, ignore width/height properties, and don't start on new lines. Examples include `<span>`, `<a>`, `<strong>`, `<em>`, `<img>`. **Block elements** stack vertically, take full available width, respect width/height properties, and always start on new lines. Examples include `<div>`, `<p>`, `<h1>-<h6>`, `<section>`, `<article>`. Use CSS `display` property to override default behavior: `display: block`, `display: inline`, or `display: inline-block` for hybrid behavior.",
        "difficulty": "Easy",
        "category": "CSS Display",
        "type": "HTML"
    },
    {
        "id": 30,
        "question": "What is the difference between `<figure>` and `<img>` elements?",
        "solution": "```html\n<!-- Basic img tag -->\n<img src=\"photo.jpg\" alt=\"A beautiful sunset\" width=\"300\" height=\"200\">\n\n<!-- Figure with image and caption -->\n<figure>\n  <img src=\"chart.png\" alt=\"Sales data for Q3 2023\" width=\"400\" height=\"300\">\n  <figcaption>Fig.1 - Quarterly sales showing 25% growth compared to Q2</figcaption>\n</figure>\n\n<!-- Figure with multiple images -->\n<figure>\n  <img src=\"before.jpg\" alt=\"Before renovation\" width=\"200\" height=\"150\">\n  <img src=\"after.jpg\" alt=\"After renovation\" width=\"200\" height=\"150\">\n  <figcaption>Before and after kitchen renovation project</figcaption>\n</figure>\n\n<!-- Figure with code block -->\n<figure>\n  <pre><code>\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet('World'));\n  </code></pre>\n  <figcaption>Example 1: Basic JavaScript greeting function</figcaption>\n</figure>\n\n<!-- Figure with table -->\n<figure>\n  <table border=\"1\">\n    <tr>\n      <th>Year</th>\n      <th>Revenue</th>\n      <th>Growth</th>\n    </tr>\n    <tr>\n      <td>2021</td>\n      <td>$100M</td>\n      <td>-</td>\n    </tr>\n    <tr>\n      <td>2022</td>\n      <td>$125M</td>\n      <td>25%</td>\n    </tr>\n    <tr>\n      <td>2023</td>\n      <td>$156M</td>\n      <td>24.8%</td>\n    </tr>\n  </table>\n  <figcaption>Table 1: Company revenue growth over three years</figcaption>\n</figure>\n\n<!-- Figure with video -->\n<figure>\n  <video controls width=\"320\" height=\"240\">\n    <source src=\"tutorial.mp4\" type=\"video/mp4\">\n    Your browser does not support the video tag.\n  </video>\n  <figcaption>Video tutorial: How to create responsive layouts</figcaption>\n</figure>\n\n<!-- Styling figures -->\n<style>\nfigure {\n  margin: 20px 0;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  text-align: center;\n}\n\nfigcaption {\n  margin-top: 10px;\n  font-style: italic;\n  font-size: 0.9em;\n  color: #666;\n  text-align: center;\n}\n\nfigure img {\n  max-width: 100%;\n  height: auto;\n}\n</style>\n```\n\n**Solution:**\nThe `<img>` tag is used solely for embedding images into a document. The `<figure>` element is a semantic container for self-contained content (images, diagrams, code snippets, tables, videos) that is referenced from the main text and can be moved to different parts of the document without affecting the flow. `<figure>` can contain an `<img>` plus an optional `<figcaption>` for descriptive text. Use `<img>` for decorative or inline images, and `<figure>` when the content needs a caption or represents a complete unit of information that could stand alone.",
        "difficulty": "Medium",
        "category": "Semantic HTML",
        "type": "HTML"
    },
    {
        "id": 31,
        "question": "How do you specify metadata in HTML? What are the different types of meta tags and their purposes?",
        "solution": "```html\n<!-- Basic metadata tags -->\n<head>\n  <!-- Character encoding -->\n  <meta charset=\"UTF-8\">\n  \n  <!-- Page description for search engines -->\n  <meta name=\"description\" content=\"Free Web tutorials\">\n  \n  <!-- Keywords for SEO -->\n  <meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n  \n  <!-- Author information -->\n  <meta name=\"author\" content=\"John Doe\">\n  \n  <!-- Viewport for responsive design -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \n  <!-- Open Graph meta tags for social media -->\n  <meta property=\"og:title\" content=\"My Website\">\n  <meta property=\"og:description\" content=\"A description of my website\">\n  <meta property=\"og:image\" content=\"https://example.com/image.jpg\">\n  \n  <!-- Twitter Card meta tags -->\n  <meta name=\"twitter:card\" content=\"summary_large_image\">\n  <meta name=\"twitter:title\" content=\"My Website\">\n  \n  <!-- Robots meta tag for search engine crawling -->\n  <meta name=\"robots\" content=\"index, follow\">\n  \n  <!-- Theme color for mobile browsers -->\n  <meta name=\"theme-color\" content=\"#317EFB\">\n</head>\n```\n\n**Key Meta Tag Types:**\n\n| Meta Tag | Purpose | Example |\n|----------|---------|----------|\n| `charset` | Character encoding | `<meta charset=\"UTF-8\">` |\n| `viewport` | Responsive design | `<meta name=\"viewport\" content=\"width=device-width\">` |\n| `description` | SEO description | `<meta name=\"description\" content=\"Page description\">` |\n| `keywords` | SEO keywords | `<meta name=\"keywords\" content=\"html, css\">` |\n| `author` | Page author | `<meta name=\"author\" content=\"John Doe\">` |\n| `robots` | Search engine instructions | `<meta name=\"robots\" content=\"noindex\">` |",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 32,
        "question": "What is the difference between `<datalist>` and `<select>` elements? When would you use each?",
        "solution": "```html\n<!-- Datalist - provides suggestions but allows custom input -->\n<label for=\"browser\">Choose your browser from the list:</label>\n<input list=\"browsers\" id=\"browser\" name=\"browser\" placeholder=\"Type or select...\">\n<datalist id=\"browsers\">\n  <option value=\"Edge\">\n  <option value=\"Firefox\">\n  <option value=\"Chrome\">\n  <option value=\"Safari\">\n  <option value=\"Opera\">\n</datalist>\n\n<!-- Select - fixed dropdown with predefined options only -->\n<label for=\"cars\">Choose a car:</label>\n<select id=\"cars\" name=\"cars\">\n  <option value=\"volvo\">Volvo</option>\n  <option value=\"saab\">Saab</option>\n  <option value=\"mercedes\">Mercedes</option>\n  <option value=\"audi\">Audi</option>\n</select>\n\n<!-- Multiple selection with datalist -->\n<label for=\"skills\">Enter your skills:</label>\n<input list=\"skill-options\" id=\"skills\" name=\"skills\" multiple>\n<datalist id=\"skill-options\">\n  <option value=\"JavaScript\">\n  <option value=\"Python\">\n  <option value=\"Java\">\n  <option value=\"C++\">\n</datalist>\n```\n\n**Key Differences:**\n\n| Feature | `<datalist>` | `<select>` |\n|---------|--------------|------------|\n| **Input Type** | Text input with suggestions | Dropdown menu |\n| **User Input** | Can type custom values | Must choose from predefined options |\n| **Flexibility** | High - accepts any input | Low - restricted to options |\n| **Use Case** | Search fields, autocomplete | Fixed choices like country, gender |\n| **Validation** | Accepts any value | Only accepts listed values |\n| **Appearance** | Input field with dropdown hints | Traditional dropdown |\n\n**When to Use:**\n- **`<datalist>`**: Search boxes, tags, flexible input with suggestions\n- **`<select>`**: Fixed categories, required choices, form validation",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 33,
        "question": "What is an Image Map in HTML? How do you create clickable areas on an image?",
        "solution": "```html\n<!-- Image map with different clickable areas -->\n<img src=\"workplace.jpg\" alt=\"Workplace\" usemap=\"#workmap\" width=\"400\" height=\"379\">\n\n<map name=\"workmap\">\n  <!-- Rectangular area -->\n  <area shape=\"rect\" coords=\"34,44,270,350\" alt=\"Computer\" href=\"computer.html\">\n  \n  <!-- Circular area -->\n  <area shape=\"circle\" coords=\"337,300,44\" alt=\"Coffee\" href=\"coffee.html\">\n  \n  <!-- Polygonal area -->\n  <area shape=\"poly\" coords=\"140,121,181,116,204,160,204,222,191,270,140,329,85,355,58,352,37,322,40,259,103,161,128,147\" alt=\"Phone\" href=\"phone.html\">\n  \n  <!-- Default area for unmapped regions -->\n  <area shape=\"default\" alt=\"Office\" href=\"office.html\">\n</map>\n\n<!-- Responsive image map -->\n<style>\n  .responsive-map {\n    position: relative;\n    display: inline-block;\n  }\n  \n  .responsive-map img {\n    max-width: 100%;\n    height: auto;\n  }\n</style>\n\n<div class=\"responsive-map\">\n  <img src=\"image.jpg\" alt=\"Interactive Image\" usemap=\"#responsivemap\">\n  <map name=\"responsivemap\">\n    <area shape=\"rect\" coords=\"10,10,100,100\" href=\"#section1\" alt=\"Section 1\">\n    <area shape=\"circle\" coords=\"200,150,50\" href=\"#section2\" alt=\"Section 2\">\n  </map>\n</div>\n\n<!-- JavaScript for dynamic image maps -->\n<script>\n  // Add click events to areas\n  document.querySelectorAll('area').forEach(area => {\n    area.addEventListener('click', function(e) {\n      e.preventDefault();\n      console.log('Clicked area:', this.alt);\n      // Custom handling\n    });\n  });\n</script>\n```\n\n**Shape Types and Coordinates:**\n\n| Shape | Coordinates | Description |\n|-------|-------------|-------------|\n| `rect` | `x1,y1,x2,y2` | Rectangle: top-left and bottom-right corners |\n| `circle` | `x,y,radius` | Circle: center point and radius |\n| `poly` | `x1,y1,x2,y2,...` | Polygon: series of x,y coordinate pairs |\n| `default` | N/A | Covers entire image (fallback) |\n\n**Use Cases:**\n- Interactive floor plans\n- Navigation menus on images\n- Product catalogs with clickable items\n- Educational diagrams\n- Interactive maps and infographics",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 34,
        "question": "What are Semantic Elements in HTML5? Provide examples and explain their benefits.",
        "solution": "```html\n<!-- Complete semantic HTML5 document structure -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Semantic HTML Example</title>\n</head>\n<body>\n  <!-- Main header of the page -->\n  <header>\n    <h1>My Website</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#home\">Home</a></li>\n        <li><a href=\"#about\">About</a></li>\n        <li><a href=\"#contact\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n\n  <!-- Main content area -->\n  <main>\n    <!-- Independent, self-contained content -->\n    <article>\n      <header>\n        <h2>Article Title</h2>\n        <p>Published on <time datetime=\"2024-01-15\">January 15, 2024</time></p>\n      </header>\n      \n      <!-- Thematic grouping of content -->\n      <section>\n        <h3>Introduction</h3>\n        <p>This is the main content of the article.</p>\n      </section>\n      \n      <section>\n        <h3>Main Content</h3>\n        <p>More detailed information here.</p>\n        \n        <!-- Figure with caption -->\n        <figure>\n          <img src=\"diagram.jpg\" alt=\"Process diagram\">\n          <figcaption>Figure 1: Process workflow diagram</figcaption>\n        </figure>\n      </section>\n      \n      <footer>\n        <p>Article tags: \n          <mark>HTML5</mark>, \n          <mark>Semantic</mark>, \n          <mark>Web Development</mark>\n        </p>\n      </footer>\n    </article>\n    \n    <!-- Related content -->\n    <aside>\n      <h3>Related Articles</h3>\n      <ul>\n        <li><a href=\"#\">Understanding HTML5</a></li>\n        <li><a href=\"#\">CSS Best Practices</a></li>\n      </ul>\n    </aside>\n  </main>\n  \n  <!-- Page footer -->\n  <footer>\n    <address>\n      Contact: <a href=\"mailto:info@example.com\">info@example.com</a>\n    </address>\n    <p><small>&copy; 2024 My Website. All rights reserved.</small></p>\n  </footer>\n</body>\n</html>\n```\n\n**Key Semantic Elements:**\n\n| Element | Purpose | Example Use |\n|---------|---------|-------------|\n| `<header>` | Introductory content | Site header, article header |\n| `<nav>` | Navigation links | Main menu, breadcrumbs |\n| `<main>` | Primary content | Main content area (one per page) |\n| `<article>` | Self-contained content | Blog post, news article |\n| `<section>` | Thematic content grouping | Chapters, tabs |\n| `<aside>` | Sidebar content | Related links, ads |\n| `<footer>` | Closing content | Copyright, contact info |\n| `<figure>` | Self-contained content | Images, diagrams, code |\n| `<figcaption>` | Figure caption | Image description |\n| `<time>` | Date/time | Publication dates |\n| `<mark>` | Highlighted text | Search results, important terms |\n| `<address>` | Contact information | Author details |\n\n**Benefits of Semantic HTML:**\n1. **Accessibility**: Screen readers understand content structure\n2. **SEO**: Search engines better understand page content\n3. **Maintainability**: Code is more readable and organized\n4. **Future-proofing**: Semantic meaning is preserved\n5. **Styling**: CSS can target semantic elements consistently",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 35,
        "question": "How do you show tabular data in HTML? Demonstrate proper table structure with accessibility features.",
        "solution": "```html\n<!-- Complete table with all accessibility features -->\n<table>\n  <!-- Table caption for accessibility -->\n  <caption>Employee Sales Data for Q1 2024</caption>\n  \n  <!-- Column groups for styling -->\n  <colgroup>\n    <col span=\"1\" class=\"name-col\">\n    <col span=\"3\" class=\"data-cols\">\n  </colgroup>\n  \n  <!-- Table header -->\n  <thead>\n    <tr>\n      <th scope=\"col\" id=\"name\">Employee Name</th>\n      <th scope=\"col\" id=\"jan\">January</th>\n      <th scope=\"col\" id=\"feb\">February</th>\n      <th scope=\"col\" id=\"mar\">March</th>\n      <th scope=\"col\" id=\"total\">Total</th>\n    </tr>\n  </thead>\n  \n  <!-- Table body -->\n  <tbody>\n    <tr>\n      <th scope=\"row\" headers=\"name\">John Smith</th>\n      <td headers=\"name jan\">$15,000</td>\n      <td headers=\"name feb\">$18,000</td>\n      <td headers=\"name mar\">$22,000</td>\n      <td headers=\"name total\"><strong>$55,000</strong></td>\n    </tr>\n    <tr>\n      <th scope=\"row\" headers=\"name\">Jane Doe</th>\n      <td headers=\"name jan\">$20,000</td>\n      <td headers=\"name feb\">$19,000</td>\n      <td headers=\"name mar\">$25,000</td>\n      <td headers=\"name total\"><strong>$64,000</strong></td>\n    </tr>\n    <tr>\n      <th scope=\"row\" headers=\"name\">Mike Johnson</th>\n      <td headers=\"name jan\">$12,000</td>\n      <td headers=\"name feb\">$15,000</td>\n      <td headers=\"name mar\">$18,000</td>\n      <td headers=\"name total\"><strong>$45,000</strong></td>\n    </tr>\n  </tbody>\n  \n  <!-- Table footer -->\n  <tfoot>\n    <tr>\n      <th scope=\"row\">Totals</th>\n      <td><strong>$47,000</strong></td>\n      <td><strong>$52,000</strong></td>\n      <td><strong>$65,000</strong></td>\n      <td><strong>$164,000</strong></td>\n    </tr>\n  </tfoot>\n</table>\n\n<!-- Complex table with merged cells -->\n<table border=\"1\">\n  <caption>Product Specifications</caption>\n  <thead>\n    <tr>\n      <th rowspan=\"2\">Product</th>\n      <th colspan=\"2\">Dimensions</th>\n      <th rowspan=\"2\">Weight</th>\n      <th rowspan=\"2\">Price</th>\n    </tr>\n    <tr>\n      <th>Width</th>\n      <th>Height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Laptop</th>\n      <td>14 inches</td>\n      <td>0.8 inches</td>\n      <td>3.2 lbs</td>\n      <td>$999</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Monitor</th>\n      <td>24 inches</td>\n      <td>15 inches</td>\n      <td>8.5 lbs</td>\n      <td>$299</td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- Responsive table with CSS -->\n<style>\n  .responsive-table {\n    overflow-x: auto;\n  }\n  \n  table {\n    border-collapse: collapse;\n    width: 100%;\n    margin: 20px 0;\n  }\n  \n  th, td {\n    border: 1px solid #ddd;\n    padding: 12px;\n    text-align: left;\n  }\n  \n  th {\n    background-color: #f2f2f2;\n    font-weight: bold;\n  }\n  \n  tbody tr:nth-child(even) {\n    background-color: #f9f9f9;\n  }\n  \n  tbody tr:hover {\n    background-color: #f5f5f5;\n  }\n  \n  caption {\n    font-size: 1.2em;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n  \n  /* Mobile responsive */\n  @media (max-width: 768px) {\n    table, thead, tbody, th, td, tr {\n      display: block;\n    }\n    \n    thead tr {\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n    }\n    \n    tr {\n      border: 1px solid #ccc;\n      margin-bottom: 10px;\n    }\n    \n    td {\n      border: none;\n      position: relative;\n      padding-left: 50%;\n    }\n    \n    td:before {\n      content: attr(data-label) \": \";\n      position: absolute;\n      left: 6px;\n      width: 45%;\n      font-weight: bold;\n    }\n  }\n</style>\n\n<div class=\"responsive-table\">\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Phone</th>\n        <th>Department</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td data-label=\"Name\">John Doe</td>\n        <td data-label=\"Email\">john@example.com</td>\n        <td data-label=\"Phone\">555-0123</td>\n        <td data-label=\"Department\">Engineering</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n```\n\n**Table Structure Elements:**\n\n| Element | Purpose | Required |\n|---------|---------|----------|\n| `<table>` | Container for tabular data | Yes |\n| `<caption>` | Table title/description | Recommended |\n| `<thead>` | Header section | Optional but recommended |\n| `<tbody>` | Body content | Optional but recommended |\n| `<tfoot>` | Footer section | Optional |\n| `<tr>` | Table row | Yes |\n| `<th>` | Header cell | For headers |\n| `<td>` | Data cell | For data |\n| `<colgroup>` | Column grouping | For styling |\n\n**Accessibility Attributes:**\n- `scope=\"col/row\"`: Indicates header direction\n- `headers=\"id1 id2\"`: Links cells to specific headers\n- `caption`: Provides table description\n- `id` and `headers`: For complex table relationships",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 36,
        "question": "What is the difference between `<meter>` and `<progress>` elements? Provide practical examples of when to use each.",
        "solution": "```html\n<!-- Progress element for task completion -->\n<h3>Progress Examples</h3>\n\n<!-- File upload progress -->\n<label for=\"file-upload\">File Upload Progress:</label>\n<progress id=\"file-upload\" value=\"65\" max=\"100\">65%</progress>\n<p>65% complete</p>\n\n<!-- Form completion progress -->\n<label for=\"form-progress\">Form Completion:</label>\n<progress id=\"form-progress\" value=\"3\" max=\"5\">Step 3 of 5</progress>\n<p>Step 3 of 5 completed</p>\n\n<!-- Indeterminate progress (loading) -->\n<label for=\"loading\">Loading...</label>\n<progress id=\"loading\">Loading...</progress>\n\n<!-- JavaScript-controlled progress -->\n<button onclick=\"updateProgress()\">Start Download</button>\n<br><br>\n<label for=\"download\">Download Progress:</label>\n<progress id=\"download\" value=\"0\" max=\"100\">0%</progress>\n<span id=\"progress-text\">0%</span>\n\n<script>\nlet downloadProgress = 0;\nfunction updateProgress() {\n  const progressBar = document.getElementById('download');\n  const progressText = document.getElementById('progress-text');\n  \n  const interval = setInterval(() => {\n    downloadProgress += 10;\n    progressBar.value = downloadProgress;\n    progressText.textContent = downloadProgress + '%';\n    \n    if (downloadProgress >= 100) {\n      clearInterval(interval);\n      progressText.textContent = 'Complete!';\n    }\n  }, 200);\n}\n</script>\n\n<!-- Meter element for measurements -->\n<h3>Meter Examples</h3>\n\n<!-- Disk usage meter -->\n<label for=\"disk-usage\">Disk Usage:</label>\n<meter id=\"disk-usage\" value=\"0.6\" min=\"0\" max=\"1\">60%</meter>\n<p>60% of disk space used</p>\n\n<!-- Temperature meter with optimal range -->\n<label for=\"temperature\">Room Temperature:</label>\n<meter id=\"temperature\" value=\"22\" min=\"0\" max=\"40\" optimum=\"20\" low=\"10\" high=\"30\">22°C</meter>\n<p>22°C (Optimal range)</p>\n\n<!-- Battery level meter -->\n<label for=\"battery\">Battery Level:</label>\n<meter id=\"battery\" value=\"85\" min=\"0\" max=\"100\" low=\"20\" high=\"80\">85%</meter>\n<p>85% battery remaining</p>\n\n<!-- Score/rating meter -->\n<label for=\"score\">Test Score:</label>\n<meter id=\"score\" value=\"8.5\" min=\"0\" max=\"10\" optimum=\"9\" low=\"6\" high=\"8\">8.5 out of 10</meter>\n<p>Score: 8.5/10</p>\n\n<!-- Performance meter with thresholds -->\n<label for=\"performance\">Website Performance:</label>\n<meter id=\"performance\" value=\"75\" min=\"0\" max=\"100\" low=\"40\" high=\"80\" optimum=\"90\">75/100</meter>\n<p>Performance Score: 75/100</p>\n\n<!-- Memory usage with color coding -->\n<style>\n  meter {\n    width: 200px;\n    height: 20px;\n  }\n  \n  /* Styling for different meter states */\n  meter::-webkit-meter-optimum-value {\n    background: green;\n  }\n  \n  meter::-webkit-meter-suboptimum-value {\n    background: orange;\n  }\n  \n  meter::-webkit-meter-even-less-good-value {\n    background: red;\n  }\n  \n  /* Progress bar styling */\n  progress {\n    width: 200px;\n    height: 20px;\n  }\n  \n  progress::-webkit-progress-bar {\n    background-color: #f0f0f0;\n    border-radius: 10px;\n  }\n  \n  progress::-webkit-progress-value {\n    background-color: #4CAF50;\n    border-radius: 10px;\n  }\n</style>\n\n<!-- Memory usage meter -->\n<label for=\"memory\">Memory Usage:</label>\n<meter id=\"memory\" value=\"12\" min=\"0\" max=\"16\" low=\"4\" high=\"14\" optimum=\"8\">12 GB</meter>\n<p>12 GB of 16 GB used</p>\n```\n\n**Key Differences:**\n\n| Aspect | `<progress>` | `<meter>` |\n|--------|--------------|----------|\n| **Purpose** | Shows completion progress of a task | Shows scalar measurement within a known range |\n| **Use Case** | File uploads, form completion, loading | Disk usage, scores, ratings, gauges |\n| **Semantic Meaning** | \"How much work is done?\" | \"Where does this value fall in the range?\" |\n| **Attributes** | `value`, `max` | `value`, `min`, `max`, `low`, `high`, `optimum` |\n| **Visual Indication** | Typically a filling bar | Can show optimal/suboptimal ranges with colors |\n| **Indeterminate State** | Supported (no value attribute) | Not applicable |\n\n**Progress Element Attributes:**\n- `value`: Current progress (0 to max)\n- `max`: Maximum value (default: 1)\n\n**Meter Element Attributes:**\n- `value`: Current measurement\n- `min`: Minimum value (default: 0)\n- `max`: Maximum value (default: 1)\n- `low`: Upper boundary of low range\n- `high`: Lower boundary of high range\n- `optimum`: Optimal value\n\n**When to Use:**\n- **Progress**: File uploads, downloads, form steps, loading states\n- **Meter**: System stats, ratings, scores, resource usage, performance metrics",
        "difficulty": "Medium",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 37,
        "question": "Explain HTML5 Drag and Drop functionality. How do you implement drag and drop with JavaScript?",
        "solution": "```html\n<!-- Basic Drag and Drop Example -->\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    .drag-item {\n      width: 100px;\n      height: 100px;\n      background-color: #4CAF50;\n      margin: 10px;\n      cursor: move;\n      display: inline-block;\n      text-align: center;\n      line-height: 100px;\n      color: white;\n      border-radius: 5px;\n    }\n    \n    .drop-zone {\n      width: 300px;\n      height: 150px;\n      border: 2px dashed #ccc;\n      margin: 20px;\n      padding: 20px;\n      text-align: center;\n      background-color: #f9f9f9;\n    }\n    \n    .drop-zone.dragover {\n      border-color: #4CAF50;\n      background-color: #e8f5e8;\n    }\n    \n    .container {\n      display: flex;\n      gap: 20px;\n      align-items: flex-start;\n    }\n  </style>\n</head>\n<body>\n  <h2>HTML5 Drag and Drop Example</h2>\n  \n  <div class=\"container\">\n    <!-- Draggable items -->\n    <div>\n      <h3>Draggable Items</h3>\n      <div class=\"drag-item\" draggable=\"true\" data-item=\"item1\">Item 1</div>\n      <div class=\"drag-item\" draggable=\"true\" data-item=\"item2\">Item 2</div>\n      <div class=\"drag-item\" draggable=\"true\" data-item=\"item3\">Item 3</div>\n    </div>\n    \n    <!-- Drop zones -->\n    <div>\n      <h3>Drop Zones</h3>\n      <div class=\"drop-zone\" data-zone=\"zone1\">\n        <p>Drop Zone 1</p>\n        <p>Drop items here</p>\n      </div>\n      <div class=\"drop-zone\" data-zone=\"zone2\">\n        <p>Drop Zone 2</p>\n        <p>Drop items here</p>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Advanced example: Sortable list -->\n  <h3>Sortable List</h3>\n  <ul id=\"sortable-list\">\n    <li draggable=\"true\" data-id=\"1\">Task 1: Complete project proposal</li>\n    <li draggable=\"true\" data-id=\"2\">Task 2: Review code changes</li>\n    <li draggable=\"true\" data-id=\"3\">Task 3: Update documentation</li>\n    <li draggable=\"true\" data-id=\"4\">Task 4: Test new features</li>\n  </ul>\n  \n  <!-- File drop zone -->\n  <h3>File Drop Zone</h3>\n  <div id=\"file-drop-zone\" class=\"drop-zone\">\n    <p>Drop files here or click to select</p>\n    <input type=\"file\" id=\"file-input\" multiple style=\"display: none;\">\n  </div>\n  <div id=\"file-list\"></div>\n\n<script>\n// Basic Drag and Drop Implementation\nclass DragDropManager {\n  constructor() {\n    this.draggedElement = null;\n    this.init();\n  }\n  \n  init() {\n    // Add event listeners to draggable items\n    document.querySelectorAll('.drag-item').forEach(item => {\n      item.addEventListener('dragstart', this.handleDragStart.bind(this));\n      item.addEventListener('dragend', this.handleDragEnd.bind(this));\n    });\n    \n    // Add event listeners to drop zones\n    document.querySelectorAll('.drop-zone').forEach(zone => {\n      zone.addEventListener('dragover', this.handleDragOver.bind(this));\n      zone.addEventListener('dragenter', this.handleDragEnter.bind(this));\n      zone.addEventListener('dragleave', this.handleDragLeave.bind(this));\n      zone.addEventListener('drop', this.handleDrop.bind(this));\n    });\n    \n    // Initialize sortable list\n    this.initSortableList();\n    \n    // Initialize file drop\n    this.initFileDropZone();\n  }\n  \n  // Drag event handlers\n  handleDragStart(e) {\n    this.draggedElement = e.target;\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', e.target.outerHTML);\n    e.dataTransfer.setData('text/plain', e.target.dataset.item);\n    \n    // Add visual feedback\n    e.target.style.opacity = '0.5';\n    \n    console.log('Drag started:', e.target.dataset.item);\n  }\n  \n  handleDragEnd(e) {\n    e.target.style.opacity = '1';\n    this.draggedElement = null;\n  }\n  \n  handleDragOver(e) {\n    e.preventDefault(); // Allow drop\n    e.dataTransfer.dropEffect = 'move';\n  }\n  \n  handleDragEnter(e) {\n    e.preventDefault();\n    e.target.classList.add('dragover');\n  }\n  \n  handleDragLeave(e) {\n    // Only remove class if we're leaving the drop zone entirely\n    if (!e.target.contains(e.relatedTarget)) {\n      e.target.classList.remove('dragover');\n    }\n  }\n  \n  handleDrop(e) {\n    e.preventDefault();\n    e.target.classList.remove('dragover');\n    \n    const itemData = e.dataTransfer.getData('text/plain');\n    const zoneData = e.target.dataset.zone;\n    \n    if (this.draggedElement) {\n      // Clone the dragged element\n      const clone = this.draggedElement.cloneNode(true);\n      clone.style.opacity = '1';\n      \n      // Add to drop zone\n      e.target.appendChild(clone);\n      \n      console.log(`Dropped ${itemData} into ${zoneData}`);\n      \n      // Optional: Remove original element\n      // this.draggedElement.remove();\n    }\n  }\n  \n  // Sortable list implementation\n  initSortableList() {\n    const sortableList = document.getElementById('sortable-list');\n    let draggedItem = null;\n    \n    sortableList.addEventListener('dragstart', (e) => {\n      draggedItem = e.target;\n      e.target.style.opacity = '0.5';\n    });\n    \n    sortableList.addEventListener('dragend', (e) => {\n      e.target.style.opacity = '1';\n      draggedItem = null;\n    });\n    \n    sortableList.addEventListener('dragover', (e) => {\n      e.preventDefault();\n      const afterElement = this.getDragAfterElement(sortableList, e.clientY);\n      if (afterElement == null) {\n        sortableList.appendChild(draggedItem);\n      } else {\n        sortableList.insertBefore(draggedItem, afterElement);\n      }\n    });\n  }\n  \n  getDragAfterElement(container, y) {\n    const draggableElements = [...container.querySelectorAll('li:not(.dragging)')];\n    \n    return draggableElements.reduce((closest, child) => {\n      const box = child.getBoundingClientRect();\n      const offset = y - box.top - box.height / 2;\n      \n      if (offset < 0 && offset > closest.offset) {\n        return { offset: offset, element: child };\n      } else {\n        return closest;\n      }\n    }, { offset: Number.NEGATIVE_INFINITY }).element;\n  }\n  \n  // File drop zone implementation\n  initFileDropZone() {\n    const fileDropZone = document.getElementById('file-drop-zone');\n    const fileInput = document.getElementById('file-input');\n    const fileList = document.getElementById('file-list');\n    \n    // Click to select files\n    fileDropZone.addEventListener('click', () => {\n      fileInput.click();\n    });\n    \n    // File input change\n    fileInput.addEventListener('change', (e) => {\n      this.handleFiles(e.target.files);\n    });\n    \n    // Prevent default drag behaviors\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n      fileDropZone.addEventListener(eventName, (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      });\n    });\n    \n    // Highlight drop zone when item is dragged over it\n    ['dragenter', 'dragover'].forEach(eventName => {\n      fileDropZone.addEventListener(eventName, () => {\n        fileDropZone.classList.add('dragover');\n      });\n    });\n    \n    ['dragleave', 'drop'].forEach(eventName => {\n      fileDropZone.addEventListener(eventName, () => {\n        fileDropZone.classList.remove('dragover');\n      });\n    });\n    \n    // Handle dropped files\n    fileDropZone.addEventListener('drop', (e) => {\n      const files = e.dataTransfer.files;\n      this.handleFiles(files);\n    });\n  }\n  \n  handleFiles(files) {\n    const fileList = document.getElementById('file-list');\n    fileList.innerHTML = '<h4>Selected Files:</h4>';\n    \n    [...files].forEach(file => {\n      const fileItem = document.createElement('div');\n      fileItem.innerHTML = `\n        <p><strong>${file.name}</strong></p>\n        <p>Size: ${(file.size / 1024).toFixed(2)} KB</p>\n        <p>Type: ${file.type || 'Unknown'}</p>\n        <hr>\n      `;\n      fileList.appendChild(fileItem);\n    });\n  }\n}\n\n// Initialize drag and drop functionality\ndocument.addEventListener('DOMContentLoaded', () => {\n  new DragDropManager();\n});\n</script>\n\n<style>\n  #sortable-list {\n    list-style-type: none;\n    padding: 0;\n    max-width: 400px;\n  }\n  \n  #sortable-list li {\n    background-color: #f0f0f0;\n    margin: 5px 0;\n    padding: 10px;\n    border-radius: 5px;\n    cursor: move;\n    border: 1px solid #ddd;\n  }\n  \n  #sortable-list li:hover {\n    background-color: #e0e0e0;\n  }\n  \n  #file-drop-zone {\n    cursor: pointer;\n    transition: all 0.3s ease;\n  }\n  \n  #file-list {\n    margin-top: 20px;\n    padding: 10px;\n    background-color: #f9f9f9;\n    border-radius: 5px;\n  }\n</style>\n\n</body>\n</html>\n```\n\n**Key Drag and Drop Events:**\n\n| Event | Trigger | Purpose |\n|-------|---------|----------|\n| `dragstart` | Drag begins | Set drag data and visual feedback |\n| `drag` | During drag | Continuous feedback |\n| `dragenter` | Enter drop zone | Visual feedback for valid drop |\n| `dragover` | Over drop zone | Must prevent default to allow drop |\n| `dragleave` | Leave drop zone | Remove visual feedback |\n| `drop` | Item dropped | Handle the drop operation |\n| `dragend` | Drag ends | Clean up |\n\n**DataTransfer Methods:**\n- `setData(format, data)`: Store data for the drag operation\n- `getData(format)`: Retrieve data during drop\n- `setDragImage(element, x, y)`: Set custom drag image\n- `effectAllowed`: Set allowed drag effects\n- `dropEffect`: Set current drop effect\n\n**Use Cases:**\n- File uploads with drag and drop\n- Sortable lists and tables\n- Kanban boards\n- Image galleries\n- Form builders\n- Dashboard widgets",
        "difficulty": "Hard",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 38,
        "question": "What are the differences between SVG and Canvas in HTML5? When should you use each?",
        "solution": "```html\n<!-- SVG Examples -->\n<h2>SVG (Scalable Vector Graphics)</h2>\n\n<!-- Basic SVG shapes -->\n<svg width=\"300\" height=\"200\" style=\"border: 1px solid #ccc;\">\n  <!-- Rectangle -->\n  <rect x=\"10\" y=\"10\" width=\"100\" height=\"60\" fill=\"lightblue\" stroke=\"blue\" stroke-width=\"2\"/>\n  \n  <!-- Circle -->\n  <circle cx=\"200\" cy=\"50\" r=\"30\" fill=\"lightgreen\" stroke=\"green\" stroke-width=\"2\"/>\n  \n  <!-- Line -->\n  <line x1=\"10\" y1=\"100\" x2=\"280\" y2=\"100\" stroke=\"red\" stroke-width=\"3\"/>\n  \n  <!-- Path (complex shape) -->\n  <path d=\"M 50 150 Q 100 100 150 150 T 250 150\" stroke=\"purple\" stroke-width=\"3\" fill=\"none\"/>\n  \n  <!-- Text -->\n  <text x=\"50\" y=\"180\" font-family=\"Arial\" font-size=\"16\" fill=\"black\">SVG Text</text>\n</svg>\n\n<!-- Interactive SVG -->\n<svg width=\"300\" height=\"200\" style=\"border: 1px solid #ccc;\">\n  <rect id=\"interactive-rect\" x=\"50\" y=\"50\" width=\"80\" height=\"60\" \n        fill=\"orange\" cursor=\"pointer\" \n        onmouseover=\"this.setAttribute('fill', 'red')\" \n        onmouseout=\"this.setAttribute('fill', 'orange')\"/>\n  <text x=\"90\" y=\"85\" text-anchor=\"middle\" font-size=\"12\" fill=\"white\">Click me!</text>\n</svg>\n\n<!-- SVG with CSS animations -->\n<style>\n  .rotating-circle {\n    animation: rotate 2s linear infinite;\n    transform-origin: 100px 100px;\n  }\n  \n  @keyframes rotate {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n  \n  .hover-rect:hover {\n    fill: yellow;\n    transition: fill 0.3s ease;\n  }\n</style>\n\n<svg width=\"200\" height=\"200\">\n  <circle class=\"rotating-circle\" cx=\"100\" cy=\"100\" r=\"50\" fill=\"lightcoral\"/>\n  <rect class=\"hover-rect\" x=\"75\" y=\"75\" width=\"50\" height=\"50\" fill=\"lightblue\"/>\n</svg>\n\n<!-- Canvas Examples -->\n<h2>Canvas</h2>\n\n<!-- Basic Canvas -->\n<canvas id=\"basic-canvas\" width=\"300\" height=\"200\" style=\"border: 1px solid #ccc;\"></canvas>\n\n<!-- Interactive Canvas -->\n<canvas id=\"interactive-canvas\" width=\"400\" height=\"300\" style=\"border: 1px solid #ccc; cursor: crosshair;\"></canvas>\n<br>\n<button onclick=\"clearCanvas()\">Clear Canvas</button>\n<button onclick=\"changeColor()\">Change Color</button>\n\n<!-- Animation Canvas -->\n<canvas id=\"animation-canvas\" width=\"400\" height=\"200\" style=\"border: 1px solid #ccc;\"></canvas>\n\n<script>\n// Basic Canvas Drawing\nconst basicCanvas = document.getElementById('basic-canvas');\nconst basicCtx = basicCanvas.getContext('2d');\n\n// Draw rectangle\nbasicCtx.fillStyle = 'lightblue';\nbasicCtx.fillRect(10, 10, 100, 60);\nbasicCtx.strokeStyle = 'blue';\nbasicCtx.lineWidth = 2;\nbasicCtx.strokeRect(10, 10, 100, 60);\n\n// Draw circle\nbasicCtx.beginPath();\nbasicCtx.arc(200, 40, 30, 0, 2 * Math.PI);\nbasicCtx.fillStyle = 'lightgreen';\nbasicCtx.fill();\nbasicCtx.strokeStyle = 'green';\nbasicCtx.stroke();\n\n// Draw line\nbasicCtx.beginPath();\nbasicCtx.moveTo(10, 100);\nbasicCtx.lineTo(280, 100);\nbasicCtx.strokeStyle = 'red';\nbasicCtx.lineWidth = 3;\nbasicCtx.stroke();\n\n// Draw curved path\nbasicCtx.beginPath();\nbasicCtx.moveTo(50, 150);\nbasicCtx.quadraticCurveTo(100, 100, 150, 150);\nbasicCtx.quadraticCurveTo(200, 100, 250, 150);\nbasicCtx.strokeStyle = 'purple';\nbasicCtx.lineWidth = 3;\nbasicCtx.stroke();\n\n// Draw text\nbasicCtx.font = '16px Arial';\nbasicCtx.fillStyle = 'black';\nbasicCtx.fillText('Canvas Text', 50, 180);\n\n// Interactive Canvas (Drawing App)\nconst interactiveCanvas = document.getElementById('interactive-canvas');\nconst interactiveCtx = interactiveCanvas.getContext('2d');\nlet isDrawing = false;\nlet currentColor = 'black';\n\ninteractiveCanvas.addEventListener('mousedown', (e) => {\n  isDrawing = true;\n  const rect = interactiveCanvas.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const y = e.clientY - rect.top;\n  \n  interactiveCtx.beginPath();\n  interactiveCtx.moveTo(x, y);\n});\n\ninteractiveCanvas.addEventListener('mousemove', (e) => {\n  if (!isDrawing) return;\n  \n  const rect = interactiveCanvas.getBoundingClientRect();\n  const x = e.clientX - rect.left;\n  const y = e.clientY - rect.top;\n  \n  interactiveCtx.lineWidth = 3;\n  interactiveCtx.lineCap = 'round';\n  interactiveCtx.strokeStyle = currentColor;\n  interactiveCtx.lineTo(x, y);\n  interactiveCtx.stroke();\n  interactiveCtx.beginPath();\n  interactiveCtx.moveTo(x, y);\n});\n\ninteractiveCanvas.addEventListener('mouseup', () => {\n  isDrawing = false;\n  interactiveCtx.beginPath();\n});\n\nfunction clearCanvas() {\n  interactiveCtx.clearRect(0, 0, interactiveCanvas.width, interactiveCanvas.height);\n}\n\nfunction changeColor() {\n  const colors = ['red', 'blue', 'green', 'purple', 'orange', 'black'];\n  currentColor = colors[Math.floor(Math.random() * colors.length)];\n}\n\n// Canvas Animation\nconst animationCanvas = document.getElementById('animation-canvas');\nconst animationCtx = animationCanvas.getContext('2d');\n\nlet ballX = 50;\nlet ballY = 100;\nlet ballSpeedX = 3;\nlet ballSpeedY = 2;\nconst ballRadius = 20;\n\nfunction animate() {\n  // Clear canvas\n  animationCtx.clearRect(0, 0, animationCanvas.width, animationCanvas.height);\n  \n  // Update ball position\n  ballX += ballSpeedX;\n  ballY += ballSpeedY;\n  \n  // Bounce off walls\n  if (ballX + ballRadius > animationCanvas.width || ballX - ballRadius < 0) {\n    ballSpeedX = -ballSpeedX;\n  }\n  if (ballY + ballRadius > animationCanvas.height || ballY - ballRadius < 0) {\n    ballSpeedY = -ballSpeedY;\n  }\n  \n  // Draw ball\n  animationCtx.beginPath();\n  animationCtx.arc(ballX, ballY, ballRadius, 0, 2 * Math.PI);\n  animationCtx.fillStyle = 'lightcoral';\n  animationCtx.fill();\n  animationCtx.strokeStyle = 'red';\n  animationCtx.stroke();\n  \n  // Continue animation\n  requestAnimationFrame(animate);\n}\n\n// Start animation\nanimate();\n\n// Performance comparison example\nfunction performanceComparison() {\n  // SVG performance test\n  const svgContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svgContainer.setAttribute('width', '400');\n  svgContainer.setAttribute('height', '300');\n  \n  console.time('SVG Creation');\n  for (let i = 0; i < 1000; i++) {\n    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    circle.setAttribute('cx', Math.random() * 400);\n    circle.setAttribute('cy', Math.random() * 300);\n    circle.setAttribute('r', Math.random() * 10 + 2);\n    circle.setAttribute('fill', `hsl(${Math.random() * 360}, 50%, 50%)`);\n    svgContainer.appendChild(circle);\n  }\n  console.timeEnd('SVG Creation');\n  \n  // Canvas performance test\n  const canvas = document.createElement('canvas');\n  canvas.width = 400;\n  canvas.height = 300;\n  const ctx = canvas.getContext('2d');\n  \n  console.time('Canvas Creation');\n  for (let i = 0; i < 1000; i++) {\n    ctx.beginPath();\n    ctx.arc(\n      Math.random() * 400,\n      Math.random() * 300,\n      Math.random() * 10 + 2,\n      0,\n      2 * Math.PI\n    );\n    ctx.fillStyle = `hsl(${Math.random() * 360}, 50%, 50%)`;\n    ctx.fill();\n  }\n  console.timeEnd('Canvas Creation');\n}\n\n// Uncomment to run performance test\n// performanceComparison();\n</script>\n```\n\n**Comparison Table:**\n\n| Aspect | SVG | Canvas |\n|--------|-----|--------|\n| **Type** | Vector-based (XML) | Raster-based (Pixels) |\n| **Scalability** | Scales to any size without losing quality | Pixelates when scaled up |\n| **DOM Integration** | Each shape is a DOM element | Single DOM element |\n| **Interactivity** | CSS and JS can target individual elements | Manual hit detection required |\n| **Performance** | Good for simple graphics, slower with many elements | Fast for complex scenes and animations |\n| **Memory Usage** | Higher with many elements | Lower, fixed per canvas |\n| **Search/Accessibility** | Text is searchable and accessible | Content not accessible to screen readers |\n| **Styling** | CSS styling supported | Styling via JavaScript/Canvas API |\n| **File Size** | Larger for complex graphics | Smaller file size |\n| **Browser Support** | IE9+ (with polyfills for older) | All modern browsers |\n\n**When to Use SVG:**\n- ✅ Logos and icons\n- ✅ Simple illustrations and diagrams\n- ✅ Interactive data visualizations\n- ✅ Scalable graphics for responsive design\n- ✅ When you need CSS styling and animations\n- ✅ Accessibility is important\n- ✅ Print-quality graphics\n\n**When to Use Canvas:**\n- ✅ Games and real-time animations\n- ✅ Image editing and manipulation\n- ✅ Complex data visualizations with many data points\n- ✅ Performance-critical applications\n- ✅ Pixel-level image processing\n- ✅ Charts and graphs with thousands of data points\n- ✅ WebGL 3D graphics\n\n**Code Examples Summary:**\n- **SVG**: Declarative, XML-based, each element is interactive\n- **Canvas**: Imperative, JavaScript-based, single drawing surface\n- **Performance**: Canvas better for many elements, SVG better for few interactive elements\n- **Accessibility**: SVG has built-in accessibility, Canvas requires additional work",
        "difficulty": "Hard",
        "category": "HTML5 Features",
        "type": "HTML"
    },
    {
        "id": 39,
        "question": "What is the CSS Box Model? Explain each component and how it affects element sizing.",
        "solution": "The CSS Box Model describes how the rectangular boxes that are generated for elements in the document tree are laid out.\n\n**Box Model Components:**\n\n```css\n/* Visual representation */\n/*\n┌─────────────────────────────────┐\n│            Margin               │\n│  ┌─────────────────────────────┐ │\n│  │          Border             │ │\n│  │  ┌─────────────────────────┐ │ │\n│  │  │        Padding          │ │ │\n│  │  │  ┌─────────────────────┐ │ │ │\n│  │  │  │      Content        │ │ │ │\n│  │  │  └─────────────────────┘ │ │ │\n│  │  └─────────────────────────┘ │ │\n│  └─────────────────────────────┘ │\n└─────────────────────────────────┘\n*/\n\n.box {\n  width: 200px;           /* Content width */\n  height: 100px;          /* Content height */\n  padding: 20px;          /* Space inside border */\n  border: 5px solid blue; /* Border thickness */\n  margin: 15px;           /* Space outside border */\n}\n\n/* Total element size calculation: */\n/* Width = content + padding-left + padding-right + border-left + border-right */\n/* Height = content + padding-top + padding-bottom + border-top + border-bottom */\n/* Total width = 200 + 20 + 20 + 5 + 5 = 250px */\n/* Total height = 100 + 20 + 20 + 5 + 5 = 150px */\n```\n\n**Box-sizing Property:**\n\n```css\n/* Default behavior (content-box) */\n.content-box {\n  box-sizing: content-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid red;\n  /* Total width = 200 + 20 + 20 + 5 + 5 = 250px */\n}\n\n/* Border-box includes padding and border in width */\n.border-box {\n  box-sizing: border-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid green;\n  /* Total width = 200px (content adjusts to fit) */\n  /* Content width = 200 - 20 - 20 - 5 - 5 = 150px */\n}\n```\n\n**Components Explained:**\n\n| Component | Description | Affects Layout |\n|-----------|-------------|----------------|\n| **Content** | Actual content area | Yes - defines base dimensions |\n| **Padding** | Space between content and border | Yes - increases element size |\n| **Border** | Line around padding and content | Yes - increases element size |\n| **Margin** | Space outside border | Yes - affects positioning, not size |\n\n**Practical Example:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.box-model-demo {\n  width: 150px;\n  height: 100px;\n  padding: 10px;\n  border: 3px solid #333;\n  margin: 20px;\n  background-color: lightblue;\n}\n\n.border-box-demo {\n  box-sizing: border-box;\n  width: 150px;\n  height: 100px;\n  padding: 10px;\n  border: 3px solid #333;\n  margin: 20px;\n  background-color: lightgreen;\n}\n</style>\n</head>\n<body>\n  <div class=\"box-model-demo\">Content Box (default)</div>\n  <div class=\"border-box-demo\">Border Box</div>\n</body>\n</html>\n```",
        "difficulty": "Medium",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Box Model",
            "Layout",
            "Sizing",
            "Fundamentals"
        ]
    },
    {
        "id": 40,
        "question": "Explain CSS positioning (static, relative, absolute, fixed, sticky) with practical examples.",
        "solution": "CSS positioning controls how elements are positioned in the document flow.\n\n**1. Static Positioning (Default):**\n\n```css\n.static {\n  position: static; /* Default value */\n  /* top, right, bottom, left have no effect */\n}\n```\n\n**2. Relative Positioning:**\n\n```css\n.relative {\n  position: relative;\n  top: 20px;    /* Moves 20px down from original position */\n  left: 30px;   /* Moves 30px right from original position */\n  /* Original space is preserved in document flow */\n}\n```\n\n**3. Absolute Positioning:**\n\n```css\n.absolute {\n  position: absolute;\n  top: 50px;    /* 50px from top of nearest positioned ancestor */\n  right: 20px;  /* 20px from right of nearest positioned ancestor */\n  /* Removed from normal document flow */\n}\n\n/* Parent container must be positioned for absolute positioning */\n.container {\n  position: relative; /* Creates positioning context */\n}\n```\n\n**4. Fixed Positioning:**\n\n```css\n.fixed {\n  position: fixed;\n  top: 0;\n  right: 0;\n  /* Fixed relative to viewport, stays in place when scrolling */\n}\n\n/* Common use: Fixed navigation bar */\n.navbar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  z-index: 1000;\n}\n```\n\n**5. Sticky Positioning:**\n\n```css\n.sticky {\n  position: sticky;\n  top: 20px; /* Becomes fixed when 20px from top of viewport */\n  /* Behaves like relative until scroll threshold is met */\n}\n\n/* Common use: Sticky headers */\n.sticky-header {\n  position: sticky;\n  top: 0;\n  background: white;\n  z-index: 100;\n}\n```\n\n**Complete Example:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.container {\n  position: relative;\n  width: 400px;\n  height: 300px;\n  border: 2px solid #333;\n  margin: 50px;\n}\n\n.static-box {\n  position: static;\n  background: lightblue;\n  padding: 10px;\n  margin: 10px;\n}\n\n.relative-box {\n  position: relative;\n  top: 20px;\n  left: 30px;\n  background: lightgreen;\n  padding: 10px;\n}\n\n.absolute-box {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: lightcoral;\n  padding: 10px;\n  width: 100px;\n}\n\n.fixed-nav {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background: darkblue;\n  color: white;\n  padding: 10px;\n  z-index: 1000;\n}\n\n.sticky-sidebar {\n  position: sticky;\n  top: 80px; /* Stick when 80px from top */\n  float: right;\n  width: 200px;\n  background: lightyellow;\n  padding: 10px;\n  margin: 20px;\n}\n</style>\n</head>\n<body>\n  <nav class=\"fixed-nav\">Fixed Navigation Bar</nav>\n  \n  <div style=\"margin-top: 80px;\"> <!-- Account for fixed nav -->\n    <div class=\"container\">\n      <div class=\"static-box\">Static Box (normal flow)</div>\n      <div class=\"relative-box\">Relative Box (offset from original)</div>\n      <div class=\"absolute-box\">Absolute Box (positioned to container)</div>\n    </div>\n    \n    <div class=\"sticky-sidebar\">Sticky Sidebar</div>\n    \n    <!-- Add content to demonstrate scrolling -->\n    <div style=\"height: 1500px; padding: 20px;\">\n      <p>Scroll to see sticky behavior...</p>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n**Key Differences:**\n\n| Position | Document Flow | Positioned Relative To | Use Cases |\n|----------|---------------|------------------------|----------|\n| **static** | Normal flow | N/A | Default behavior |\n| **relative** | Maintains space | Original position | Small adjustments |\n| **absolute** | Removed from flow | Nearest positioned ancestor | Overlays, tooltips |\n| **fixed** | Removed from flow | Viewport | Navigation bars, modals |\n| **sticky** | Normal until threshold | Scroll container | Section headers |\n\n**Z-index and Stacking Context:**\n\n```css\n/* Control stacking order for positioned elements */\n.modal {\n  position: fixed;\n  z-index: 9999; /* Highest priority */\n}\n\n.dropdown {\n  position: absolute;\n  z-index: 100;\n}\n\n.tooltip {\n  position: absolute;\n  z-index: 50;\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Positioning",
            "Layout",
            "Static",
            "Relative",
            "Absolute",
            "Fixed",
            "Sticky"
        ]
    },
    {
        "id": 41,
        "question": "What is CSS Flexbox? Demonstrate flex container and flex item properties with practical examples.",
        "solution": "CSS Flexbox (Flexible Box Layout) is a layout method for arranging items in a one-dimensional space (row or column) with flexible sizing.\n\n**1. Flex Container Properties:**\n\n```css\n.flex-container {\n  display: flex; /* or inline-flex */\n  \n  /* Direction and wrapping */\n  flex-direction: row; /* row | row-reverse | column | column-reverse */\n  flex-wrap: nowrap;   /* nowrap | wrap | wrap-reverse */\n  flex-flow: row nowrap; /* Shorthand for direction + wrap */\n  \n  /* Alignment */\n  justify-content: flex-start; /* Main axis alignment */\n  align-items: stretch;        /* Cross axis alignment */\n  align-content: stretch;      /* Multi-line alignment */\n  \n  /* Spacing */\n  gap: 10px; /* Space between items */\n}\n```\n\n**2. Flex Item Properties:**\n\n```css\n.flex-item {\n  /* Growth and shrinking */\n  flex-grow: 0;     /* How much item should grow */\n  flex-shrink: 1;   /* How much item should shrink */\n  flex-basis: auto; /* Initial size before free space distribution */\n  flex: 0 1 auto;   /* Shorthand: grow shrink basis */\n  \n  /* Individual alignment */\n  align-self: auto; /* Override container's align-items */\n  \n  /* Ordering */\n  order: 0; /* Change visual order without changing HTML */\n}\n```\n\n**3. Justify-Content Examples (Main Axis):**\n\n```css\n/* Horizontal alignment when flex-direction: row */\n.justify-start { justify-content: flex-start; }    /* Items at start */\n.justify-end { justify-content: flex-end; }        /* Items at end */\n.justify-center { justify-content: center; }       /* Items in center */\n.justify-between { justify-content: space-between; } /* Equal space between */\n.justify-around { justify-content: space-around; }  /* Equal space around */\n.justify-evenly { justify-content: space-evenly; }  /* Equal space everywhere */\n```\n\n**4. Align-Items Examples (Cross Axis):**\n\n```css\n/* Vertical alignment when flex-direction: row */\n.align-start { align-items: flex-start; }   /* Items at top */\n.align-end { align-items: flex-end; }       /* Items at bottom */\n.align-center { align-items: center; }      /* Items in middle */\n.align-stretch { align-items: stretch; }    /* Items fill height */\n.align-baseline { align-items: baseline; }  /* Items align to text baseline */\n```\n\n**5. Complete Flexbox Examples:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n/* Basic flex container */\n.flex-container {\n  display: flex;\n  gap: 10px;\n  padding: 20px;\n  border: 2px solid #333;\n  margin-bottom: 20px;\n}\n\n.flex-item {\n  background: lightblue;\n  padding: 20px;\n  border: 1px solid #666;\n}\n\n/* Navigation bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #333;\n  color: white;\n  padding: 10px 20px;\n}\n\n.nav-brand {\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.nav-menu {\n  display: flex;\n  gap: 20px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/* Card layout */\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 20px;\n}\n\n.card {\n  flex: 1 1 300px; /* Grow, shrink, minimum 300px */\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n/* Centering */\n.center-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  background: lightgray;\n}\n\n/* Column layout */\n.sidebar-layout {\n  display: flex;\n  gap: 20px;\n  min-height: 400px;\n}\n\n.sidebar {\n  flex: 0 0 200px; /* Don't grow/shrink, fixed 200px */\n  background: #f0f0f0;\n  padding: 20px;\n}\n\n.main-content {\n  flex: 1; /* Take remaining space */\n  background: white;\n  padding: 20px;\n}\n\n/* Responsive behavior */\n@media (max-width: 768px) {\n  .sidebar-layout {\n    flex-direction: column;\n  }\n  \n  .sidebar {\n    flex: none;\n  }\n}\n</style>\n</head>\n<body>\n  <!-- Navigation Example -->\n  <nav class=\"navbar\">\n    <div class=\"nav-brand\">Brand</div>\n    <ul class=\"nav-menu\">\n      <li>Home</li>\n      <li>About</li>\n      <li>Contact</li>\n    </ul>\n  </nav>\n\n  <!-- Basic Flex Container -->\n  <div class=\"flex-container\">\n    <div class=\"flex-item\">Item 1</div>\n    <div class=\"flex-item\">Item 2</div>\n    <div class=\"flex-item\">Item 3</div>\n  </div>\n\n  <!-- Card Layout -->\n  <div class=\"card-container\">\n    <div class=\"card\">\n      <h3>Card 1</h3>\n      <p>This card will grow and shrink with a minimum width of 300px.</p>\n    </div>\n    <div class=\"card\">\n      <h3>Card 2</h3>\n      <p>Flexbox makes responsive card layouts easy.</p>\n    </div>\n    <div class=\"card\">\n      <h3>Card 3</h3>\n      <p>Cards wrap to new lines when space is limited.</p>\n    </div>\n  </div>\n\n  <!-- Perfect Centering -->\n  <div class=\"center-container\">\n    <div>Perfectly Centered Content</div>\n  </div>\n\n  <!-- Sidebar Layout -->\n  <div class=\"sidebar-layout\">\n    <aside class=\"sidebar\">\n      <h3>Sidebar</h3>\n      <p>Fixed width sidebar</p>\n    </aside>\n    <main class=\"main-content\">\n      <h3>Main Content</h3>\n      <p>This area takes up the remaining space and is flexible.</p>\n    </main>\n  </div>\n</body>\n</html>\n```\n\n**6. Common Flexbox Patterns:**\n\n```css\n/* Equal height columns */\n.equal-height {\n  display: flex;\n}\n.equal-height > div {\n  flex: 1;\n}\n\n/* Holy Grail Layout */\n.holy-grail {\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n}\n.header, .footer {\n  flex: none;\n}\n.content {\n  display: flex;\n  flex: 1;\n}\n.sidebar1, .sidebar2 {\n  flex: 0 0 200px;\n}\n.main {\n  flex: 1;\n}\n\n/* Sticky footer */\n.page {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n.content {\n  flex: 1;\n}\n.footer {\n  flex: none;\n}\n```\n\n**Key Benefits:**\n- Easy vertical centering\n- Flexible item sizing\n- Responsive design\n- Clean alignment control\n- No floats or positioning hacks needed",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Responsive",
            "Alignment",
            "Modern CSS"
        ]
    },
    {
        "id": 42,
        "question": "Explain CSS Grid Layout system. How does it differ from Flexbox? Provide practical examples.",
        "solution": "CSS Grid is a two-dimensional layout system that allows you to create complex layouts with rows and columns.\n\n**1. Grid vs Flexbox:**\n\n| Aspect | Grid | Flexbox |\n|--------|------|----------|\n| **Dimensions** | 2D (rows + columns) | 1D (row or column) |\n| **Use Case** | Complex layouts | Component alignment |\n| **Control** | Precise positioning | Flexible distribution |\n| **Best For** | Page layouts | Navigation, cards |\n\n**2. Basic Grid Setup:**\n\n```css\n.grid-container {\n  display: grid;\n  \n  /* Define columns */\n  grid-template-columns: 200px 1fr 100px; /* Fixed, flexible, fixed */\n  /* OR */\n  grid-template-columns: repeat(3, 1fr); /* 3 equal columns */\n  /* OR */\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /* Responsive */\n  \n  /* Define rows */\n  grid-template-rows: 80px auto 60px; /* Header, content, footer */\n  \n  /* Gaps */\n  gap: 20px; /* Same as: row-gap: 20px; column-gap: 20px; */\n}\n```\n\n**3. Grid Areas and Templates:**\n\n```css\n.layout-grid {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 150px;\n  grid-template-rows: 80px 1fr 60px;\n  min-height: 100vh;\n  gap: 10px;\n}\n\n/* Assign items to areas */\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```\n\n**4. Grid Item Positioning:**\n\n```css\n.grid-item {\n  /* Position by line numbers */\n  grid-column-start: 1;\n  grid-column-end: 3;\n  grid-row-start: 2;\n  grid-row-end: 4;\n  \n  /* Shorthand */\n  grid-column: 1 / 3; /* Start line 1, end line 3 */\n  grid-row: 2 / 4;\n  \n  /* Even shorter */\n  grid-area: 2 / 1 / 4 / 3; /* row-start / col-start / row-end / col-end */\n  \n  /* Span notation */\n  grid-column: span 2; /* Span 2 columns */\n  grid-row: span 3; /* Span 3 rows */\n}\n```\n\n**5. Complete Grid Examples:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n/* Basic Grid Layout */\n.basic-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  padding: 20px;\n}\n\n.grid-item {\n  background: lightblue;\n  padding: 20px;\n  text-align: center;\n  border-radius: 5px;\n}\n\n/* Dashboard Layout */\n.dashboard {\n  display: grid;\n  grid-template-areas:\n    \"header header header header\"\n    \"sidebar main main widget\"\n    \"sidebar main main widget\"\n    \"footer footer footer footer\";\n  grid-template-columns: 200px 1fr 1fr 200px;\n  grid-template-rows: 60px 1fr 1fr 60px;\n  min-height: 100vh;\n  gap: 10px;\n  padding: 10px;\n}\n\n.dashboard-header {\n  grid-area: header;\n  background: #333;\n  color: white;\n  display: flex;\n  align-items: center;\n  padding: 0 20px;\n}\n\n.dashboard-sidebar {\n  grid-area: sidebar;\n  background: #f0f0f0;\n  padding: 20px;\n}\n\n.dashboard-main {\n  grid-area: main;\n  background: white;\n  padding: 20px;\n  border: 1px solid #ddd;\n}\n\n.dashboard-widget {\n  grid-area: widget;\n  background: #e8f4fd;\n  padding: 20px;\n}\n\n.dashboard-footer {\n  grid-area: footer;\n  background: #666;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Photo Gallery Grid */\n.photo-gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 15px;\n  padding: 20px;\n}\n\n.photo {\n  background: #ddd;\n  aspect-ratio: 4/3; /* Maintain aspect ratio */\n  border-radius: 8px;\n  overflow: hidden;\n  position: relative;\n}\n\n.photo img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n/* Feature photos span multiple cells */\n.photo.featured {\n  grid-column: span 2;\n  grid-row: span 2;\n}\n\n/* Card Grid with different sizes */\n.card-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-auto-rows: minmax(150px, auto);\n  gap: 20px;\n  padding: 20px;\n}\n\n.card {\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.card.tall {\n  grid-row: span 2;\n}\n\n.card.wide {\n  grid-column: span 2;\n}\n\n/* Responsive Grid */\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 20px;\n  padding: 20px;\n}\n\n/* Mobile adjustments */\n@media (max-width: 768px) {\n  .dashboard {\n    grid-template-areas:\n      \"header\"\n      \"main\"\n      \"sidebar\"\n      \"widget\"\n      \"footer\";\n    grid-template-columns: 1fr;\n    grid-template-rows: auto;\n  }\n  \n  .photo.featured {\n    grid-column: span 1;\n    grid-row: span 1;\n  }\n  \n  .card.wide {\n    grid-column: span 1;\n  }\n}\n</style>\n</head>\n<body>\n  <!-- Basic Grid -->\n  <h2>Basic Grid</h2>\n  <div class=\"basic-grid\">\n    <div class=\"grid-item\">1</div>\n    <div class=\"grid-item\">2</div>\n    <div class=\"grid-item\">3</div>\n    <div class=\"grid-item\">4</div>\n    <div class=\"grid-item\">5</div>\n    <div class=\"grid-item\">6</div>\n  </div>\n\n  <!-- Dashboard Layout -->\n  <h2>Dashboard Layout</h2>\n  <div class=\"dashboard\">\n    <header class=\"dashboard-header\">\n      <h1>Dashboard</h1>\n    </header>\n    <nav class=\"dashboard-sidebar\">\n      <h3>Navigation</h3>\n      <ul>\n        <li>Dashboard</li>\n        <li>Analytics</li>\n        <li>Reports</li>\n      </ul>\n    </nav>\n    <main class=\"dashboard-main\">\n      <h2>Main Content</h2>\n      <p>This is the main content area that takes up most of the space.</p>\n    </main>\n    <aside class=\"dashboard-widget\">\n      <h3>Widgets</h3>\n      <p>Side widgets and tools.</p>\n    </aside>\n    <footer class=\"dashboard-footer\">\n      <p>&copy; 2024 Dashboard</p>\n    </footer>\n  </div>\n\n  <!-- Card Grid -->\n  <h2>Card Grid</h2>\n  <div class=\"card-grid\">\n    <div class=\"card\">Regular Card</div>\n    <div class=\"card tall\">Tall Card</div>\n    <div class=\"card\">Regular Card</div>\n    <div class=\"card wide\">Wide Card</div>\n    <div class=\"card\">Regular Card</div>\n    <div class=\"card\">Regular Card</div>\n  </div>\n</body>\n</html>\n```\n\n**6. Advanced Grid Features:**\n\n```css\n/* Implicit grid (auto-generated rows/columns) */\n.auto-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: 100px; /* Height for auto-generated rows */\n  grid-auto-flow: dense; /* Fill gaps automatically */\n}\n\n/* Fractional units and functions */\n.advanced-grid {\n  grid-template-columns:\n    minmax(200px, 300px) /* Min 200px, max 300px */\n    fit-content(400px)   /* Size to content, max 400px */\n    1fr                  /* Remaining space */\n    max-content;         /* Size to largest content */\n}\n\n/* Subgrid (limited browser support) */\n.parent-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n}\n\n.child-grid {\n  display: grid;\n  grid-column: span 2;\n  grid-template-columns: subgrid; /* Inherit parent's grid */\n}\n```\n\n**7. When to Use Grid vs Flexbox:**\n\n```css\n/* Use Grid for: */\n.page-layout { /* Overall page structure */\n  display: grid;\n  grid-template-areas: \"header header\" \"nav main\" \"footer footer\";\n}\n\n/* Use Flexbox for: */\n.navigation { /* Component alignment */\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.card-content { /* Content within cards */\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n```",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Grid",
            "Layout",
            "2D Layout",
            "Advanced CSS",
            "Responsive"
        ]
    },
    {
        "id": 43,
        "question": "What are CSS media queries? Demonstrate responsive design techniques with breakpoints and mobile-first approach.",
        "solution": "CSS Media queries allow you to apply styles conditionally based on device characteristics like screen size, orientation, and resolution.\n\n**1. Media Query Syntax:**\n\n```css\n/* Basic syntax */\n@media media-type and (media-feature) {\n  /* CSS rules */\n}\n\n/* Common examples */\n@media screen and (max-width: 768px) {\n  /* Styles for screens 768px and smaller */\n}\n\n@media print {\n  /* Styles for printing */\n}\n\n@media (orientation: landscape) {\n  /* Styles for landscape orientation */\n}\n```\n\n**2. Common Breakpoints:**\n\n```css\n/* Mobile-first approach */\n/* Base styles (mobile) */\n.container {\n  width: 100%;\n  padding: 10px;\n}\n\n/* Small tablets and large phones */\n@media (min-width: 576px) {\n  .container {\n    max-width: 540px;\n    margin: 0 auto;\n  }\n}\n\n/* Tablets */\n@media (min-width: 768px) {\n  .container {\n    max-width: 720px;\n    padding: 15px;\n  }\n}\n\n/* Desktop */\n@media (min-width: 992px) {\n  .container {\n    max-width: 960px;\n    padding: 20px;\n  }\n}\n\n/* Large desktop */\n@media (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n```\n\n**3. Responsive Navigation:**\n\n```css\n/* Mobile navigation */\n.nav {\n  background: #333;\n  padding: 1rem;\n}\n\n.nav-toggle {\n  display: block;\n  background: none;\n  border: none;\n  color: white;\n  font-size: 1.2rem;\n  cursor: pointer;\n}\n\n.nav-menu {\n  display: none;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 1rem;\n}\n\n.nav-menu.active {\n  display: flex;\n}\n\n.nav-link {\n  color: white;\n  text-decoration: none;\n  padding: 10px 0;\n  border-bottom: 1px solid #555;\n}\n\n/* Desktop navigation */\n@media (min-width: 768px) {\n  .nav {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .nav-toggle {\n    display: none;\n  }\n  \n  .nav-menu {\n    display: flex;\n    flex-direction: row;\n    margin-top: 0;\n    gap: 2rem;\n  }\n  \n  .nav-link {\n    border-bottom: none;\n  }\n}\n```\n\n**4. Responsive Grid System:**\n\n```css\n/* Mobile-first grid */\n.row {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -15px;\n}\n\n.col {\n  flex: 1;\n  padding: 0 15px;\n  margin-bottom: 20px;\n}\n\n/* Column classes for different screen sizes */\n.col-12 { flex: 0 0 100%; }\n.col-6 { flex: 0 0 50%; }\n.col-4 { flex: 0 0 33.333%; }\n.col-3 { flex: 0 0 25%; }\n\n/* Tablet breakpoint */\n@media (min-width: 768px) {\n  .col-md-12 { flex: 0 0 100%; }\n  .col-md-6 { flex: 0 0 50%; }\n  .col-md-4 { flex: 0 0 33.333%; }\n  .col-md-3 { flex: 0 0 25%; }\n}\n\n/* Desktop breakpoint */\n@media (min-width: 992px) {\n  .col-lg-12 { flex: 0 0 100%; }\n  .col-lg-6 { flex: 0 0 50%; }\n  .col-lg-4 { flex: 0 0 33.333%; }\n  .col-lg-3 { flex: 0 0 25%; }\n}\n```\n\n**5. Complete Responsive Example:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<style>\n/* Reset and base styles */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  line-height: 1.6;\n}\n\n/* Container */\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n/* Header */\n.header {\n  background: #333;\n  color: white;\n  padding: 1rem 0;\n}\n\n.header-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.logo {\n  font-size: 1.5rem;\n  font-weight: bold;\n}\n\n/* Navigation */\n.nav-toggle {\n  display: none;\n  background: none;\n  border: none;\n  color: white;\n  font-size: 1.5rem;\n  cursor: pointer;\n}\n\n.nav-menu {\n  display: flex;\n  list-style: none;\n  gap: 2rem;\n}\n\n.nav-link {\n  color: white;\n  text-decoration: none;\n  transition: color 0.3s;\n}\n\n.nav-link:hover {\n  color: #007bff;\n}\n\n/* Hero section */\n.hero {\n  background: linear-gradient(135deg, #007bff, #0056b3);\n  color: white;\n  padding: 4rem 0;\n  text-align: center;\n}\n\n.hero h1 {\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n}\n\n.hero p {\n  font-size: 1.2rem;\n  margin-bottom: 2rem;\n}\n\n.btn {\n  display: inline-block;\n  background: white;\n  color: #007bff;\n  padding: 12px 30px;\n  text-decoration: none;\n  border-radius: 5px;\n  font-weight: bold;\n  transition: transform 0.3s;\n}\n\n.btn:hover {\n  transform: translateY(-2px);\n}\n\n/* Features section */\n.features {\n  padding: 4rem 0;\n  background: #f8f9fa;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 2rem;\n  margin-top: 2rem;\n}\n\n.feature {\n  background: white;\n  padding: 2rem;\n  border-radius: 10px;\n  text-align: center;\n  box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n}\n\n.feature-icon {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n}\n\n/* Footer */\n.footer {\n  background: #333;\n  color: white;\n  padding: 2rem 0;\n  text-align: center;\n}\n\n/* Tablet styles */\n@media (min-width: 768px) {\n  .features-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .hero h1 {\n    font-size: 3rem;\n  }\n}\n\n/* Desktop styles */\n@media (min-width: 992px) {\n  .features-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  \n  .hero {\n    padding: 6rem 0;\n  }\n  \n  .hero h1 {\n    font-size: 3.5rem;\n  }\n}\n\n/* Mobile styles */\n@media (max-width: 767px) {\n  .nav-toggle {\n    display: block;\n  }\n  \n  .nav-menu {\n    display: none;\n    flex-direction: column;\n    width: 100%;\n    margin-top: 1rem;\n    gap: 0;\n  }\n  \n  .nav-menu.active {\n    display: flex;\n  }\n  \n  .nav-menu li {\n    border-bottom: 1px solid #555;\n  }\n  \n  .nav-link {\n    display: block;\n    padding: 1rem 0;\n  }\n  \n  .header-content {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .hero h1 {\n    font-size: 2rem;\n  }\n  \n  .hero p {\n    font-size: 1rem;\n  }\n  \n  .container {\n    padding: 0 15px;\n  }\n}\n\n/* Print styles */\n@media print {\n  .nav, .hero, .footer {\n    display: none;\n  }\n  \n  body {\n    font-size: 12pt;\n    color: black;\n  }\n}\n\n/* High DPI displays */\n@media (-webkit-min-device-pixel-ratio: 2),\n       (min-resolution: 192dpi) {\n  .feature-icon {\n    font-size: 3.5rem;\n  }\n}\n\n/* Landscape orientation */\n@media (orientation: landscape) and (max-height: 600px) {\n  .hero {\n    padding: 2rem 0;\n  }\n}\n</style>\n</head>\n<body>\n  <header class=\"header\">\n    <div class=\"container\">\n      <div class=\"header-content\">\n        <div class=\"logo\">ResponsiveSite</div>\n        <button class=\"nav-toggle\" onclick=\"toggleNav()\">\n          ☰\n        </button>\n        <nav>\n          <ul class=\"nav-menu\" id=\"navMenu\">\n            <li><a href=\"#\" class=\"nav-link\">Home</a></li>\n            <li><a href=\"#\" class=\"nav-link\">About</a></li>\n            <li><a href=\"#\" class=\"nav-link\">Services</a></li>\n            <li><a href=\"#\" class=\"nav-link\">Contact</a></li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  </header>\n\n  <section class=\"hero\">\n    <div class=\"container\">\n      <h1>Welcome to Our Site</h1>\n      <p>Building responsive websites that work on all devices</p>\n      <a href=\"#\" class=\"btn\">Get Started</a>\n    </div>\n  </section>\n\n  <section class=\"features\">\n    <div class=\"container\">\n      <h2 style=\"text-align: center; margin-bottom: 1rem;\">Features</h2>\n      <div class=\"features-grid\">\n        <div class=\"feature\">\n          <div class=\"feature-icon\">📱</div>\n          <h3>Mobile First</h3>\n          <p>Designed for mobile devices and scaled up</p>\n        </div>\n        <div class=\"feature\">\n          <div class=\"feature-icon\">⚡</div>\n          <h3>Fast Loading</h3>\n          <p>Optimized for speed and performance</p>\n        </div>\n        <div class=\"feature\">\n          <div class=\"feature-icon\">🎨</div>\n          <h3>Beautiful Design</h3>\n          <p>Clean, modern, and user-friendly interface</p>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <footer class=\"footer\">\n    <div class=\"container\">\n      <p>&copy; 2024 ResponsiveSite. All rights reserved.</p>\n    </div>\n  </footer>\n\n  <script>\n    function toggleNav() {\n      const navMenu = document.getElementById('navMenu');\n      navMenu.classList.toggle('active');\n    }\n  </script>\n</body>\n</html>\n```\n\n**6. Advanced Media Query Features:**\n\n```css\n/* Hover capability */\n@media (hover: hover) {\n  .button:hover {\n    background-color: #007bff;\n  }\n}\n\n/* Pointer precision */\n@media (pointer: coarse) {\n  /* Touch devices - larger touch targets */\n  .button {\n    min-height: 44px;\n    min-width: 44px;\n  }\n}\n\n/* Reduced motion preference */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Dark mode preference */\n@media (prefers-color-scheme: dark) {\n  body {\n    background: #1a1a1a;\n    color: white;\n  }\n}\n```\n\n**Best Practices:**\n1. **Mobile-first approach** - Start with mobile styles, add larger screen styles\n2. **Use relative units** - rem, em, % instead of px when possible\n3. **Test on real devices** - Emulators don't always match real behavior\n4. **Keep breakpoints simple** - Avoid too many breakpoints\n5. **Consider content** - Let content determine breakpoints, not devices",
        "difficulty": "Medium",
        "category": "Responsive Design",
        "type": "CSS",
        "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Mobile First",
            "Breakpoints"
        ]
    },
    {
        "id": 44,
        "question": "What are CSS animations and transitions? Demonstrate different animation techniques with keyframes and timing functions.",
        "solution": "CSS animations and transitions allow you to create smooth visual effects and interactions without JavaScript.\n\n**1. CSS Transitions:**\nTransitions animate changes between CSS property values.\n\n```css\n/* Basic transition syntax */\n.element {\n  transition: property duration timing-function delay;\n  /* OR */\n  transition: all 0.3s ease-in-out;\n}\n\n/* Individual properties */\n.button {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  cursor: pointer;\n  \n  /* Transition specific properties */\n  transition-property: background-color, transform;\n  transition-duration: 0.3s, 0.2s;\n  transition-timing-function: ease, ease-out;\n  transition-delay: 0s, 0.1s;\n}\n\n.button:hover {\n  background-color: #0056b3;\n  transform: translateY(-2px);\n}\n```\n\n**2. CSS Animations with Keyframes:**\nAnimations use keyframes to define intermediate steps.\n\n```css\n/* Define keyframes */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Alternative percentage syntax */\n@keyframes slideIn {\n  0% {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.5;\n  }\n  100% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n/* Apply animation */\n.animated-element {\n  animation: fadeIn 1s ease-out;\n  /* OR with all properties */\n  animation-name: fadeIn;\n  animation-duration: 1s;\n  animation-timing-function: ease-out;\n  animation-delay: 0.5s;\n  animation-iteration-count: 1;\n  animation-direction: normal;\n  animation-fill-mode: forwards;\n  animation-play-state: running;\n}\n```\n\n**3. Timing Functions:**\n\n```css\n/* Built-in timing functions */\n.ease { transition-timing-function: ease; }\n.ease-in { transition-timing-function: ease-in; }\n.ease-out { transition-timing-function: ease-out; }\n.ease-in-out { transition-timing-function: ease-in-out; }\n.linear { transition-timing-function: linear; }\n\n/* Custom cubic-bezier */\n.custom-timing {\n  transition-timing-function: cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n/* Steps function for sprite animations */\n.sprite-animation {\n  animation-timing-function: steps(10, end);\n}\n```\n\n**4. Complete Animation Examples:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n/* Loading spinner */\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #007bff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n/* Bounce animation */\n@keyframes bounce {\n  0%, 100% {\n    transform: translateY(0);\n    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n  }\n  50% {\n    transform: translateY(-25px);\n    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n  }\n}\n\n.bounce {\n  animation: bounce 1s infinite;\n}\n\n/* Pulse effect */\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.pulse {\n  animation: pulse 2s ease-in-out infinite;\n}\n\n/* Slide in from different directions */\n@keyframes slideInLeft {\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slideInUp {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Card hover effects */\n.card {\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  margin: 20px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  transition: all 0.3s ease;\n  cursor: pointer;\n}\n\n.card:hover {\n  transform: translateY(-5px) scale(1.02);\n  box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n}\n\n/* Button animations */\n.animated-button {\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 5px;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.animated-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  transition: left 0.5s;\n}\n\n.animated-button:hover::before {\n  left: 100%;\n}\n\n.animated-button:hover {\n  background: #0056b3;\n  transform: scale(1.05);\n}\n\n/* Text animations */\n@keyframes typewriter {\n  from { width: 0; }\n  to { width: 100%; }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent; }\n  50% { border-color: orange; }\n}\n\n.typewriter {\n  overflow: hidden;\n  border-right: 2px solid orange;\n  white-space: nowrap;\n  margin: 0 auto;\n  letter-spacing: 0.15em;\n  animation: \n    typewriter 3.5s steps(40, end),\n    blink-caret 0.75s step-end infinite;\n}\n\n/* Progress bar animation */\n@keyframes progress {\n  from { width: 0%; }\n  to { width: 75%; }\n}\n\n.progress-bar {\n  width: 100%;\n  height: 20px;\n  background: #f0f0f0;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #007bff, #0056b3);\n  border-radius: 10px;\n  animation: progress 2s ease-out forwards;\n}\n\n/* Floating animation */\n@keyframes float {\n  0% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n  100% {\n    transform: translateY(0px);\n  }\n}\n\n.floating {\n  animation: float 6s ease-in-out infinite;\n}\n\n/* Shake animation */\n@keyframes shake {\n  0% { transform: translate(1px, 1px) rotate(0deg); }\n  10% { transform: translate(-1px, -2px) rotate(-1deg); }\n  20% { transform: translate(-3px, 0px) rotate(1deg); }\n  30% { transform: translate(3px, 2px) rotate(0deg); }\n  40% { transform: translate(1px, -1px) rotate(1deg); }\n  50% { transform: translate(-1px, 2px) rotate(-1deg); }\n  60% { transform: translate(-3px, 1px) rotate(0deg); }\n  70% { transform: translate(3px, 1px) rotate(-1deg); }\n  80% { transform: translate(-1px, -1px) rotate(1deg); }\n  90% { transform: translate(1px, 2px) rotate(0deg); }\n  100% { transform: translate(1px, -2px) rotate(-1deg); }\n}\n\n.shake {\n  animation: shake 0.5s;\n}\n\n/* Demo styles */\n.demo-section {\n  margin: 40px 0;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n}\n\n.demo-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  margin-top: 20px;\n}\n\n.demo-item {\n  padding: 20px;\n  background: #f8f9fa;\n  border-radius: 5px;\n  text-align: center;\n}\n\n/* Animation delays for staggered effects */\n.stagger-1 { animation-delay: 0.1s; }\n.stagger-2 { animation-delay: 0.2s; }\n.stagger-3 { animation-delay: 0.3s; }\n.stagger-4 { animation-delay: 0.4s; }\n</style>\n</head>\n<body>\n  <div class=\"demo-section\">\n    <h2>Loading Animations</h2>\n    <div class=\"demo-grid\">\n      <div class=\"demo-item\">\n        <div class=\"spinner\"></div>\n        <p>Spinning Loader</p>\n      </div>\n      <div class=\"demo-item\">\n        <div class=\"bounce\" style=\"width: 20px; height: 20px; background: #007bff; border-radius: 50%; margin: 0 auto;\"></div>\n        <p>Bouncing Ball</p>\n      </div>\n      <div class=\"demo-item\">\n        <div class=\"pulse\" style=\"width: 40px; height: 40px; background: #28a745; border-radius: 50%; margin: 0 auto;\"></div>\n        <p>Pulsing Circle</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"demo-section\">\n    <h2>Button Effects</h2>\n    <div class=\"demo-grid\">\n      <div class=\"demo-item\">\n        <button class=\"animated-button\">Hover Me</button>\n      </div>\n      <div class=\"demo-item\">\n        <button class=\"animated-button shake\" onclick=\"this.classList.add('shake'); setTimeout(() => this.classList.remove('shake'), 500)\">Click to Shake</button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"demo-section\">\n    <h2>Card Animations</h2>\n    <div class=\"demo-grid\">\n      <div class=\"card slideInLeft stagger-1\">\n        <h3>Card 1</h3>\n        <p>Hover for effect</p>\n      </div>\n      <div class=\"card slideInUp stagger-2\">\n        <h3>Card 2</h3>\n        <p>Hover for effect</p>\n      </div>\n      <div class=\"card slideInRight stagger-3\">\n        <h3>Card 3</h3>\n        <p>Hover for effect</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"demo-section\">\n    <h2>Text Animations</h2>\n    <div class=\"typewriter\">\n      <h1>This text appears with typewriter effect!</h1>\n    </div>\n  </div>\n\n  <div class=\"demo-section\">\n    <h2>Progress Animation</h2>\n    <div class=\"progress-bar\">\n      <div class=\"progress-fill\"></div>\n    </div>\n  </div>\n\n  <div class=\"demo-section\">\n    <h2>Floating Elements</h2>\n    <div class=\"demo-item\">\n      <div class=\"floating\" style=\"width: 100px; height: 100px; background: linear-gradient(45deg, #ff6b6b, #feca57); border-radius: 50%; margin: 0 auto;\"></div>\n      <p>Floating Circle</p>\n    </div>\n  </div>\n\n  <style>\n    /* Add these animations to the existing ones */\n    .slideInLeft {\n      animation: slideInLeft 0.6s ease-out forwards;\n    }\n    \n    .slideInUp {\n      animation: slideInUp 0.6s ease-out forwards;\n    }\n    \n    .slideInRight {\n      animation: slideInRight 0.6s ease-out forwards;\n    }\n  </style>\n</body>\n</html>\n```\n\n**5. Performance Considerations:**\n\n```css\n/* Use transform and opacity for best performance */\n.good-performance {\n  /* These properties are GPU accelerated */\n  transform: translateX(100px);\n  opacity: 0.5;\n  transition: transform 0.3s, opacity 0.3s;\n}\n\n/* Avoid animating these properties (causes reflows) */\n.poor-performance {\n  /* These cause layout recalculations */\n  width: 200px;\n  height: 100px;\n  margin-left: 50px;\n  transition: width 0.3s, height 0.3s, margin-left 0.3s;\n}\n\n/* Use will-change for complex animations */\n.complex-animation {\n  will-change: transform, opacity;\n  /* Remove will-change when animation completes */\n}\n```\n\n**6. Animation Control with JavaScript:**\n\n```css\n/* CSS classes for JavaScript control */\n.paused { animation-play-state: paused; }\n.playing { animation-play-state: running; }\n.reverse { animation-direction: reverse; }\n\n/* Animation event classes */\n.animate-in {\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.animate-out {\n  animation: fadeOut 0.5s ease-in forwards;\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n    transform: scale(1);\n  }\n  to {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n}\n```\n\n**Best Practices:**\n1. **Use transform and opacity** for best performance\n2. **Keep animations under 300ms** for micro-interactions\n3. **Use ease-out** for entrances, **ease-in** for exits\n4. **Respect prefers-reduced-motion** for accessibility\n5. **Test on slower devices** to ensure smooth performance",
        "difficulty": "Medium",
        "category": "CSS Animations",
        "type": "CSS",
        "tags": [
            "CSS",
            "Animations",
            "Transitions",
            "Keyframes",
            "Effects",
            "Performance"
        ]
    },
    {
        "id": 46,
        "question": "What is CSS and explain the Box Model concept with an example?",
        "solution": "**CSS** (Cascading Style Sheets) is a language for styling HTML elements.\n\n**The Box Model** treats every HTML element as a box with four layers:\n\n| Layer | Description | Position |\n|-------|-------------|----------|\n| **Content** | Actual content (text, images) | Innermost |\n| **Padding** | Transparent space around content | Inside border |\n| **Border** | Line around padding and content | Between padding and margin |\n| **Margin** | Transparent space outside border | Outermost |\n\n```css\n.box {\n  width: 200px;        /* Content width */\n  height: 100px;       /* Content height */\n  padding: 20px;       /* Space inside border */\n  border: 5px solid black; /* Border around padding */\n  margin: 15px;        /* Space outside border */\n  background: lightblue;\n}\n\n/* Total width = width + padding + border + margin */\n/* Total width = 200 + 40 + 10 + 30 = 280px */\n```\n\n```html\n<div class=\"box\">Content goes here</div>\n```\n\n**Visualization:**\n```\n┌─────────────────────────────────┐\n│           Margin (15px)         │\n│ ┌─────────────────────────────┐ │\n│ │       Border (5px)          │ │\n│ │ ┌─────────────────────────┐ │ │\n│ │ │     Padding (20px)      │ │ │\n│ │ │ ┌─────────────────────┐ │ │ │\n│ │ │ │   Content (200x100) │ │ │ │\n│ │ │ └─────────────────────┘ │ │ │\n│ │ └─────────────────────────┘ │ │\n│ └─────────────────────────────┘ │\n└─────────────────────────────────┘\n```",
        "difficulty": "Easy",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Box Model",
            "Layout",
            "Fundamentals"
        ]
    },
    {
        "id": 47,
        "question": "What are the advantages of CSS? Explain how CSS improves web development.",
        "solution": "**Advantages of CSS:**\n\n| Advantage | Description | Benefit |\n|-----------|-------------|----------|\n| **Separation of Concerns** | Separates content (HTML) from presentation (CSS) | Cleaner, maintainable code |\n| **Consistency** | One stylesheet for multiple pages | Uniform design across site |\n| **Maintainability** | Update styles in one place | Easy site-wide changes |\n| **Performance** | External stylesheets are cached | Faster subsequent page loads |\n| **Flexibility** | Multiple designs for same content | Easy theme switching |\n| **Accessibility** | Better control over presentation | Improved user experience |\n\n**Example demonstrating advantages:**\n\n```css\n/* styles.css - One file for entire website */\n:root {\n  --primary-color: #007bff;\n  --font-family: 'Arial', sans-serif;\n}\n\n.button {\n  background-color: var(--primary-color);\n  font-family: var(--font-family);\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  color: white;\n  cursor: pointer;\n}\n\n.button:hover {\n  background-color: #0056b3;\n}\n\n/* Media query for responsiveness */\n@media (max-width: 768px) {\n  .button {\n    padding: 8px 16px;\n    font-size: 14px;\n  }\n}\n```\n\n```html\n<!-- Multiple pages can use the same styles -->\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <button class=\"button\">Click Me</button>\n  <button class=\"button\">Another Button</button>\n</body>\n</html>\n```\n\n**Benefits in Action:**\n- **Consistency**: All buttons look the same across pages\n- **Maintainability**: Change `--primary-color` once, updates everywhere\n- **Performance**: CSS file cached after first load\n- **Responsiveness**: Automatic mobile optimization",
        "difficulty": "Easy",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Advantages",
            "Best Practices",
            "Performance"
        ]
    },
    {
        "id": 48,
        "question": "What are the limitations of CSS? Provide examples of challenges developers face.",
        "solution": "**CSS Limitations:**\n\n| Limitation | Description | Impact |\n|------------|-------------|--------|\n| **Browser Compatibility** | Different interpretations across browsers | Need vendor prefixes, fallbacks |\n| **No Parent Selector** | Can't select parent based on child | Limited styling options |\n| **No Logic/Variables** | No programming constructs | Repetitive code (partly solved with CSS variables) |\n| **Specificity Conflicts** | Complex inheritance rules | Hard to debug style conflicts |\n| **Layout Limitations** | Complex layouts require workarounds | Need CSS frameworks or preprocessors |\n\n**Examples of Limitations:**\n\n```css\n/* 1. Browser Compatibility Issues */\n.element {\n  /* Need vendor prefixes for older browsers */\n  -webkit-transform: rotate(45deg);\n  -moz-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n\n/* 2. No Parent Selector */\n/* This DOESN'T work - can't select parent based on child */\n/* .parent < .child { color: red; } */\n\n/* Workaround: Use child selector instead */\n.parent:has(.active-child) {\n  /* Only works in modern browsers */\n  background-color: yellow;\n}\n\n/* 3. Specificity Conflicts */\n.button { color: blue; }           /* Specificity: 10 */\n#header .button { color: red; }    /* Specificity: 110 - wins */\n.button.primary { color: green; }  /* Specificity: 20 - loses */\n\n/* 4. No Variables (before CSS custom properties) */\n.header { background-color: #007bff; }\n.button { background-color: #007bff; }\n.footer { background-color: #007bff; }\n/* Repetitive and hard to maintain */\n\n/* Modern solution with CSS variables */\n:root {\n  --primary-color: #007bff;\n}\n.header, .button, .footer {\n  background-color: var(--primary-color);\n}\n```\n\n**Common Workarounds:**\n\n```css\n/* Use CSS Reset/Normalize for browser consistency */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* Use CSS custom properties for maintainability */\n:root {\n  --spacing-small: 8px;\n  --spacing-medium: 16px;\n  --color-primary: #007bff;\n}\n\n/* Use CSS preprocessors (Sass) for logic */\n/* This would be in SCSS, not regular CSS */\n/*\n$primary-color: #007bff;\n@mixin button-style($bg-color) {\n  background-color: $bg-color;\n  padding: 10px 20px;\n}\n*/\n```",
        "difficulty": "Medium",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Limitations",
            "Browser Compatibility",
            "Debugging"
        ]
    },
    {
        "id": 49,
        "question": "How do you include CSS in a webpage? Explain all methods with examples.",
        "solution": "**Three Ways to Include CSS:**\n\n| Method | Location | Priority | Use Case |\n|--------|----------|----------|----------|\n| **Inline CSS** | HTML element's `style` attribute | Highest | Quick fixes, dynamic styles |\n| **Internal CSS** | `<style>` tag in `<head>` | Medium | Single page styles |\n| **External CSS** | Separate `.css` file | Lowest | Multiple pages (recommended) |\n\n**1. Inline CSS (Highest Priority):**\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n  <p style=\"color: red; font-size: 18px; margin: 10px;\">\n    This text has inline styling\n  </p>\n  \n  <div style=\"background-color: lightblue; padding: 20px; border-radius: 5px;\">\n    Inline styled div\n  </div>\n</body>\n</html>\n```\n\n**2. Internal CSS:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 20px;\n    }\n    \n    .header {\n      background-color: #333;\n      color: white;\n      padding: 15px;\n      text-align: center;\n    }\n    \n    .content {\n      margin: 20px 0;\n      line-height: 1.6;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>My Website</h1>\n  </div>\n  <div class=\"content\">\n    <p>Content goes here</p>\n  </div>\n</body>\n</html>\n```\n\n**3. External CSS (Recommended):**\n\n```css\n/* styles.css */\n:root {\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --font-size-base: 16px;\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  font-size: var(--font-size-base);\n  line-height: 1.6;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.btn {\n  background-color: var(--primary-color);\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.btn:hover {\n  background-color: #0056b3;\n}\n```\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  <!-- Multiple CSS files can be linked -->\n  <link rel=\"stylesheet\" href=\"responsive.css\">\n  <link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Welcome to My Site</h1>\n    <button class=\"btn\">Click Me</button>\n  </div>\n</body>\n</html>\n```\n\n**CSS Specificity Order:**\n\n```html\n<style>\n  p { color: blue; }        /* Internal CSS */\n</style>\n<link rel=\"stylesheet\" href=\"external.css\"> <!-- p { color: green; } -->\n\n<p style=\"color: red;\" class=\"text\">What color am I?</p>\n<!-- Result: RED (inline wins over internal and external) -->\n```\n\n**Best Practices:**\n- Use **external CSS** for production websites\n- Use **internal CSS** for single-page prototypes\n- Use **inline CSS** sparingly for dynamic styles or quick fixes\n- Link CSS files in `<head>` for better performance",
        "difficulty": "Easy",
        "category": "CSS Fundamentals",
        "type": "CSS",
        "tags": [
            "CSS",
            "Linking",
            "Inline",
            "External",
            "Internal"
        ]
    },
    {
        "id": 50,
        "question": "What are the different types of CSS Selectors? Provide examples of each type.",
        "solution": "**CSS Selector Types:**\n\n| Selector Type | Syntax | Description | Specificity |\n|---------------|--------|-------------|-------------|\n| **Universal** | `*` | Selects all elements | 0 |\n| **Element/Type** | `div`, `p`, `h1` | Selects by tag name | 1 |\n| **Class** | `.class-name` | Selects by class attribute | 10 |\n| **ID** | `#id-name` | Selects by id attribute | 100 |\n| **Attribute** | `[attr=\"value\"]` | Selects by attribute | 10 |\n| **Descendant** | `div p` | Selects nested elements | Combined |\n| **Child** | `div > p` | Selects direct children | Combined |\n| **Adjacent Sibling** | `h2 + p` | Selects immediate next sibling | Combined |\n| **General Sibling** | `h2 ~ p` | Selects all following siblings | Combined |\n| **Pseudo-class** | `:hover`, `:first-child` | Selects element states | 10 |\n| **Pseudo-element** | `::before`, `::after` | Selects element parts | 1 |\n\n**Examples:**\n\n```css\n/* 1. Universal Selector */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* 2. Element/Type Selectors */\nh1 { font-size: 2em; }\np { line-height: 1.6; }\ndiv { display: block; }\n\n/* 3. Class Selectors */\n.container { max-width: 1200px; }\n.btn-primary { background-color: blue; }\n.text-center { text-align: center; }\n\n/* 4. ID Selectors */\n#header { position: fixed; top: 0; }\n#main-content { margin: 20px; }\n#footer { background-color: #333; }\n\n/* 5. Attribute Selectors */\ninput[type=\"text\"] { border: 1px solid #ccc; }\ninput[type=\"email\"] { background-color: #f9f9f9; }\na[href^=\"https\"] { color: green; }        /* Starts with */\na[href$=\".pdf\"] { color: red; }           /* Ends with */\na[href*=\"example\"] { font-weight: bold; }  /* Contains */\n\n/* 6. Descendant Selectors (space) */\n.sidebar p { font-size: 14px; }     /* Any p inside .sidebar */\n.nav ul li { display: inline; }      /* Any li inside ul inside .nav */\n\n/* 7. Child Selectors (>) */\n.menu > li { float: left; }          /* Direct li children of .menu */\narticle > p { margin-bottom: 15px; } /* Direct p children of article */\n\n/* 8. Adjacent Sibling (+) */\nh2 + p { margin-top: 0; }            /* First p immediately after h2 */\n.alert + .content { margin-top: 20px; }\n\n/* 9. General Sibling (~) */\nh2 ~ p { color: #666; }              /* All p elements after h2 */\n.header ~ .section { padding-top: 60px; }\n\n/* 10. Pseudo-classes */\na:hover { color: red; }\na:visited { color: purple; }\nli:first-child { font-weight: bold; }\nli:last-child { border-bottom: none; }\ntr:nth-child(even) { background-color: #f2f2f2; }\ninput:focus { border-color: blue; }\n\n/* 11. Pseudo-elements */\np::first-line { font-weight: bold; }\np::first-letter { font-size: 2em; }\n.quote::before { content: \"\\201C\"; }  /* Opening quote */\n.quote::after { content: \"\\201D\"; }   /* Closing quote */\n\n/* 12. Combining Selectors */\n.container .card.featured { border: 2px solid gold; }\n#sidebar .widget:first-child { margin-top: 0; }\ninput[type=\"text\"]:focus { outline: 2px solid blue; }\n```\n\n**HTML Example:**\n\n```html\n<div class=\"container\">\n  <header id=\"header\">\n    <nav class=\"nav\">\n      <ul>\n        <li><a href=\"#home\">Home</a></li>\n        <li><a href=\"#about\">About</a></li>\n        <li><a href=\"files/doc.pdf\">PDF</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main class=\"main-content\">\n    <article>\n      <h2>Article Title</h2>\n      <p>First paragraph after heading</p>\n      <p>Second paragraph</p>\n    </article>\n  </main>\n  \n  <aside class=\"sidebar\">\n    <div class=\"widget\">\n      <p>Sidebar content</p>\n    </div>\n  </aside>\n</div>\n```\n\n**Specificity Calculation:**\n```css\n/* Examples with specificity values */\n* { }                    /* 0,0,0,0 */\nli { }                   /* 0,0,0,1 */\n.nav li { }              /* 0,0,1,1 */\n#header .nav li { }      /* 0,1,1,1 */\nli.active { }            /* 0,0,1,1 */\n#header { }              /* 0,1,0,0 */\nstyle=\"color: red;\"      /* 1,0,0,0 - Inline style */\n```",
        "difficulty": "Medium",
        "category": "Selectors",
        "type": "CSS",
        "tags": [
            "CSS",
            "Selectors",
            "Specificity",
            "Targeting"
        ]
    },
    {
        "id": 51,
        "question": "What is a CSS Preprocessor? Explain the benefits and provide examples using SASS.",
        "solution": "**CSS Preprocessor** is a tool that extends CSS with features like variables, nesting, mixins, and functions. It compiles this enhanced code into regular CSS.\n\n**Popular Preprocessors:**\n- **SASS/SCSS** (Syntactically Awesome StyleSheets)\n- **LESS** (Leaner Style Sheets)\n- **Stylus**\n\n**Benefits:**\n\n| Feature | Benefit | Example Use Case |\n|---------|---------|------------------|\n| **Variables** | Consistent values, easy maintenance | Colors, fonts, spacing |\n| **Nesting** | Cleaner, more organized code | Component styling |\n| **Mixins** | Reusable code blocks | Button styles, responsive breakpoints |\n| **Functions** | Dynamic calculations | Color manipulation, math operations |\n| **Partials** | Modular architecture | Separate files for components |\n| **Inheritance** | Code reuse | Base classes |\n\n**SASS/SCSS Examples:**\n\n```scss\n// _variables.scss\n$primary-color: #007bff;\n$secondary-color: #6c757d;\n$success-color: #28a745;\n$error-color: #dc3545;\n\n$font-size-base: 16px;\n$font-size-small: 14px;\n$font-size-large: 18px;\n\n$spacing-xs: 4px;\n$spacing-sm: 8px;\n$spacing-md: 16px;\n$spacing-lg: 24px;\n\n$breakpoint-mobile: 768px;\n$breakpoint-tablet: 1024px;\n\n// _mixins.scss\n@mixin button-style($bg-color, $text-color: white) {\n  background-color: $bg-color;\n  color: $text-color;\n  padding: $spacing-sm $spacing-md;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background-color: darken($bg-color, 10%);\n    transform: translateY(-1px);\n  }\n  \n  &:active {\n    transform: translateY(0);\n  }\n}\n\n@mixin responsive($breakpoint) {\n  @if $breakpoint == mobile {\n    @media (max-width: $breakpoint-mobile) {\n      @content;\n    }\n  }\n  @if $breakpoint == tablet {\n    @media (max-width: $breakpoint-tablet) {\n      @content;\n    }\n  }\n}\n\n@mixin flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n// main.scss\n@import 'variables';\n@import 'mixins';\n\n// Nesting and parent selector (&)\n.navbar {\n  background-color: $primary-color;\n  padding: $spacing-md;\n  \n  .nav-brand {\n    font-size: $font-size-large;\n    font-weight: bold;\n    color: white;\n    \n    &:hover {\n      text-decoration: none;\n    }\n  }\n  \n  .nav-links {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    @include flex-center;\n    \n    li {\n      margin-left: $spacing-md;\n      \n      a {\n        color: white;\n        text-decoration: none;\n        padding: $spacing-xs $spacing-sm;\n        border-radius: 4px;\n        \n        &:hover {\n          background-color: rgba(white, 0.1);\n        }\n        \n        &.active {\n          background-color: rgba(white, 0.2);\n          font-weight: bold;\n        }\n      }\n    }\n  }\n  \n  // Responsive design\n  @include responsive(mobile) {\n    .nav-links {\n      flex-direction: column;\n      \n      li {\n        margin: $spacing-xs 0;\n      }\n    }\n  }\n}\n\n// Using mixins for buttons\n.btn {\n  @include button-style($primary-color);\n  \n  &.btn-secondary {\n    @include button-style($secondary-color);\n  }\n  \n  &.btn-success {\n    @include button-style($success-color);\n  }\n  \n  &.btn-error {\n    @include button-style($error-color);\n  }\n  \n  &.btn-large {\n    padding: $spacing-md $spacing-lg;\n    font-size: $font-size-large;\n  }\n}\n\n// Functions and calculations\n@function calculate-rem($px-value) {\n  @return $px-value / $font-size-base * 1rem;\n}\n\n.container {\n  max-width: calculate-rem(1200px);\n  margin: 0 auto;\n  padding: calculate-rem($spacing-md);\n}\n\n// Loops and conditionals\n$social-colors: (\n  facebook: #3b5998,\n  twitter: #1da1f2,\n  instagram: #e4405f,\n  linkedin: #0077b5\n);\n\n@each $platform, $color in $social-colors {\n  .social-#{$platform} {\n    @include button-style($color);\n  }\n}\n\n// Inheritance with @extend\n%card-base {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: $spacing-lg;\n}\n\n.product-card {\n  @extend %card-base;\n  border: 1px solid #eee;\n  \n  .product-title {\n    font-size: $font-size-large;\n    margin-bottom: $spacing-md;\n  }\n}\n\n.user-card {\n  @extend %card-base;\n  text-align: center;\n  \n  .user-avatar {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    margin-bottom: $spacing-md;\n  }\n}\n```\n\n**Compiled CSS Output (excerpt):**\n\n```css\n.navbar {\n  background-color: #007bff;\n  padding: 16px;\n}\n\n.navbar .nav-brand {\n  font-size: 18px;\n  font-weight: bold;\n  color: white;\n}\n\n.navbar .nav-brand:hover {\n  text-decoration: none;\n}\n\n.btn {\n  background-color: #007bff;\n  color: white;\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.btn:hover {\n  background-color: #0056b3;\n  transform: translateY(-1px);\n}\n\n@media (max-width: 768px) {\n  .navbar .nav-links {\n    flex-direction: column;\n  }\n}\n```\n\n**Setup and Compilation:**\n\n```bash\n# Install SASS\nnpm install -g sass\n\n# Compile SASS to CSS\nsass main.scss main.css\n\n# Watch for changes\nsass --watch main.scss:main.css\n```",
        "difficulty": "Hard",
        "category": "Preprocessors & Resets",
        "type": "CSS",
        "tags": [
            "CSS",
            "SASS",
            "Preprocessor",
            "Variables",
            "Mixins"
        ]
    },
    {
        "id": 52,
        "question": "What are Viewport Units (vw & vh)? How do they work and when should you use them?",
        "solution": "**Viewport Units** are CSS units relative to the browser's viewport (visible area).\n\n**Viewport Unit Types:**\n\n| Unit | Full Name | Description | Calculation |\n|------|-----------|-------------|-------------|\n| **vw** | Viewport Width | 1% of viewport's width | `1vw = viewport width / 100` |\n| **vh** | Viewport Height | 1% of viewport's height | `1vh = viewport height / 100` |\n| **vmin** | Viewport Minimum | 1% of smaller dimension | `min(viewport width, height) / 100` |\n| **vmax** | Viewport Maximum | 1% of larger dimension | `max(viewport width, height) / 100` |\n\n**Examples:**\n\n```css\n/* Full screen sections */\n.hero-section {\n  width: 100vw;  /* Full viewport width */\n  height: 100vh; /* Full viewport height */\n  background: linear-gradient(45deg, #007bff, #6c757d);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 4vw; /* Responsive font size */\n}\n\n/* Responsive typography */\n.main-title {\n  font-size: calc(2rem + 2vw); /* Minimum 2rem + responsive scaling */\n  line-height: 1.2;\n}\n\n.subtitle {\n  font-size: clamp(1rem, 2.5vw, 2rem); /* Min 1rem, max 2rem */\n}\n\n/* Modal that covers viewport */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1000;\n}\n\n.modal-content {\n  position: absolute;\n  top: 50vh;\n  left: 50vw;\n  transform: translate(-50%, -50%);\n  width: 80vw;\n  max-width: 600px;\n  height: 60vh;\n  max-height: 400px;\n  background: white;\n  border-radius: 8px;\n}\n\n/* Responsive card grid */\n.card-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2vw;\n  padding: 2vw;\n}\n\n.card {\n  height: 40vh;\n  min-height: 250px;\n  background: white;\n  border-radius: 1vw;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding: 3vw;\n}\n\n/* Sidebar with viewport units */\n.sidebar {\n  width: 25vw;\n  min-width: 250px;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  background-color: #f8f9fa;\n  overflow-y: auto;\n  padding: 2vh 1vw;\n}\n\n.main-content {\n  margin-left: 25vw;\n  min-height: 100vh;\n  padding: 2vh 3vw;\n}\n\n/* Using vmin and vmax */\n.square-element {\n  width: 20vmin;  /* 20% of smaller viewport dimension */\n  height: 20vmin;\n  background-color: #007bff;\n}\n\n.circle-element {\n  width: 15vmax;  /* 15% of larger viewport dimension */\n  height: 15vmax;\n  border-radius: 50%;\n  background-color: #28a745;\n}\n\n/* Responsive spacing */\n.section {\n  padding: 5vh 5vw;\n  margin-bottom: 3vh;\n}\n\n/* Mobile-first responsive design */\n@media (max-width: 768px) {\n  .hero-section {\n    font-size: 6vw; /* Larger font on mobile */\n  }\n  \n  .card {\n    padding: 4vw;\n    border-radius: 2vw;\n  }\n  \n  .sidebar {\n    width: 100vw;\n    height: auto;\n    position: relative;\n  }\n  \n  .main-content {\n    margin-left: 0;\n    padding: 3vh 4vw;\n  }\n}\n\n/* Creative uses */\n.progress-bar {\n  width: 0;\n  height: 0.5vh;\n  background-color: #007bff;\n  transition: width 0.3s ease;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 9999;\n}\n\n/* When user scrolls, update width with JavaScript */\n.progress-bar.loaded {\n  width: 100vw;\n}\n\n/* Responsive image container */\n.image-container {\n  width: 90vw;\n  max-width: 800px;\n  height: 50vh;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  border-radius: 1vw;\n}\n\n.image-container img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n```\n\n**HTML Example:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* Your viewport unit CSS here */\n  </style>\n</head>\n<body>\n  <div class=\"hero-section\">\n    <div>\n      <h1 class=\"main-title\">Welcome</h1>\n      <p class=\"subtitle\">Responsive Design with Viewport Units</p>\n    </div>\n  </div>\n  \n  <div class=\"section\">\n    <div class=\"card-container\">\n      <div class=\"card\">Card 1</div>\n      <div class=\"card\">Card 2</div>\n      <div class=\"card\">Card 3</div>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n**When to Use Viewport Units:**\n\n**✅ Good Use Cases:**\n- Full-screen sections\n- Hero banners\n- Modal overlays\n- Responsive typography\n- Mobile-first designs\n- Creative layouts\n\n**❌ Avoid For:**\n- Small UI elements (buttons, icons)\n- Text that needs to remain readable\n- Elements that need consistent sizing\n- When accessibility is crucial (very small text on large screens)\n\n**Best Practices:**\n\n```css\n/* Combine with other units for safety */\nfont-size: clamp(1rem, 4vw, 3rem);\n\n/* Set minimums and maximums */\nwidth: min(90vw, 1200px);\nheight: max(50vh, 300px);\n\n/* Use calc() for complex calculations */\npadding: calc(2vh + 10px);\n```",
        "difficulty": "Medium",
        "category": "Preprocessors & Resets",
        "type": "CSS",
        "tags": [
            "CSS",
            "Viewport Units",
            "Responsive",
            "vw",
            "vh"
        ]
    },
    {
        "id": 53,
        "question": "What is the difference between Reset CSS and Normalize CSS? When should you use each?",
        "solution": "**Reset CSS** vs **Normalize CSS** are two approaches to handle browser default styling inconsistencies.\n\n**Comparison:**\n\n| Aspect | Reset CSS | Normalize CSS |\n|--------|-----------|---------------|\n| **Approach** | Remove all default styles | Preserve useful defaults, fix inconsistencies |\n| **File Size** | Smaller | Larger |\n| **Styling** | Start from zero | Start from consistent base |\n| **Accessibility** | May remove helpful defaults | Preserves accessibility features |\n| **Maintenance** | More custom styling needed | Less custom styling needed |\n\n**Reset CSS Examples:**\n\n```css\n/* Simple Reset CSS */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n/* More Comprehensive Reset */\n*, *::before, *::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml {\n  line-height: 1.15;\n  -webkit-text-size-adjust: 100%;\n}\n\nbody {\n  margin: 0;\n  font-family: system-ui, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-size: inherit;\n  font-weight: inherit;\n  margin: 0;\n}\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\nbutton, input, select, textarea {\n  font: inherit;\n  color: inherit;\n  background: none;\n  border: none;\n  padding: 0;\n  margin: 0;\n}\n\nul, ol {\n  list-style: none;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* Eric Meyer's Reset CSS (Popular) */\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n```\n\n**Normalize CSS Examples:**\n\n```css\n/* Normalize.css v8.0.1 (excerpt) */\n\n/* Document */\nhtml {\n  line-height: 1.15; /* Correct line height in all browsers */\n  -webkit-text-size-adjust: 100%; /* Prevent font scaling in landscape */\n}\n\n/* Sections */\nbody {\n  margin: 0; /* Remove default margin */\n}\n\nmain {\n  display: block; /* Render consistently in IE */\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; /* Correct margin in Chrome, Firefox, Safari */\n}\n\n/* Grouping content */\nhr {\n  box-sizing: content-box; /* Show overflow in Edge and IE */\n  height: 0;\n  overflow: visible;\n}\n\npre {\n  font-family: monospace, monospace; /* Correct inheritance in all browsers */\n  font-size: 1em;\n}\n\n/* Text-level semantics */\na {\n  background-color: transparent; /* Remove gray background in IE10 */\n}\n\nabbr[title] {\n  border-bottom: none;\n  text-decoration: underline;\n  text-decoration: underline dotted;\n}\n\nb, strong {\n  font-weight: bolder; /* Correct weight in Chrome, Edge, Safari */\n}\n\ncode, kbd, samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsmall {\n  font-size: 80%;\n}\n\n/* Forms */\nbutton, input, optgroup, select, textarea {\n  font-family: inherit;\n  font-size: 100%;\n  line-height: 1.15;\n  margin: 0;\n}\n\nbutton, input {\n  overflow: visible;\n}\n\nbutton, select {\n  text-transform: none;\n}\n\nbutton, [type=\"button\"], [type=\"reset\"], [type=\"submit\"] {\n  -webkit-appearance: button;\n}\n```\n\n**Custom Modern Reset (Popular approach):**\n\n```css\n/* Modern CSS Reset */\n\n/* Box sizing rules */\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\n* {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role */\nul[role='list'], ol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n  font-family: system-ui, sans-serif;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg, picture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput, button, textarea, select {\n  font: inherit;\n}\n\n/* Remove all animations and transitions for people who prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n```\n\n**When to Use Each:**\n\n**Use Reset CSS When:**\n- Building a completely custom design system\n- Want full control over all styling\n- Working on a unique design that doesn't follow web conventions\n- Team prefers to style everything from scratch\n\n**Use Normalize CSS When:**\n- Want to maintain browser defaults that make sense\n- Building on top of existing design systems\n- Prioritizing accessibility\n- Want consistent styling with minimal effort\n- Working with content-heavy sites (blogs, documentation)\n\n**Practical Implementation:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- Option 1: CDN Normalize -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\">\n  \n  <!-- Option 2: Custom Reset -->\n  <link rel=\"stylesheet\" href=\"reset.css\">\n  \n  <!-- Your main styles -->\n  <link rel=\"stylesheet\" href=\"main.css\">\n</head>\n<body>\n  <h1>Heading with consistent styling</h1>\n  <p>Paragraph with predictable appearance</p>\n  <button>Button that looks the same everywhere</button>\n</body>\n</html>\n```\n\n**Modern Approach:**\nMany developers now use a **hybrid approach** - a lightweight reset combined with normalize-like fixes for specific elements:\n\n```css\n/* Hybrid approach */\n@import url('normalize.css'); /* For complex form elements */\n\n/* Custom reset for layout elements */\n*, *::before, *::after { box-sizing: border-box; }\nbody, h1, h2, h3, h4, p, ul, ol, li { margin: 0; padding: 0; }\nimg { max-width: 100%; height: auto; }\n```",
        "difficulty": "Medium",
        "category": "Preprocessors & Resets",
        "type": "CSS",
        "tags": [
            "CSS",
            "Reset",
            "Normalize",
            "Browser Defaults",
            "Cross-browser"
        ]
    },
    {
        "id": 54,
        "question": "How do you test a webpage in different browsers? What tools and techniques are available?",
        "solution": "**Browser Testing Strategies:**\n\n| Testing Type | Description | Tools | When to Use |\n|--------------|-------------|-------|-------------|\n| **Manual Testing** | Test in actual browsers | Browser DevTools | Development phase |\n| **Automated Testing** | Scripts test functionality | Selenium, Playwright | CI/CD pipelines |\n| **Cross-browser Services** | Cloud-based testing | BrowserStack, LambdaTest | Production testing |\n| **Screenshot Testing** | Visual comparison | Percy, Chromatic | UI regression testing |\n\n**1. Built-in Browser Developer Tools:**\n\n```javascript\n// Chrome DevTools - Device simulation\n// Press F12 → Toggle device toolbar (Ctrl+Shift+M)\n\n// Test responsive design\nconst testResponsive = () => {\n  // Device presets available:\n  // iPhone, iPad, Galaxy, Pixel, etc.\n  console.log('Testing on:', window.innerWidth, 'x', window.innerHeight);\n};\n\n// Firefox DevTools - Responsive Design Mode\n// Press F12 → Responsive Design Mode (Ctrl+Shift+M)\n\n// Safari Web Inspector\n// Develop → Show Web Inspector\n\n// Edge DevTools\n// Similar to Chrome DevTools\n```\n\n**2. CSS Browser Support Detection:**\n\n```css\n/* Feature queries for cross-browser compatibility */\n@supports (display: grid) {\n  .container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n@supports not (display: grid) {\n  .container {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .container > * {\n    flex: 1 1 300px;\n  }\n}\n\n/* Vendor prefixes for older browsers */\n.element {\n  -webkit-transform: rotate(45deg); /* Safari, Chrome */\n  -moz-transform: rotate(45deg);    /* Firefox */\n  -ms-transform: rotate(45deg);     /* IE */\n  transform: rotate(45deg);         /* Standard */\n}\n\n/* Progressive enhancement */\n.button {\n  background: #007bff;\n  background: linear-gradient(45deg, #007bff, #0056b3);\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n}\n\n/* Fallbacks for older browsers */\n.container {\n  width: 300px; /* Fallback */\n  width: min(300px, 90vw); /* Modern browsers */\n}\n```\n\n**3. JavaScript Feature Detection:**\n\n```javascript\n// Modernizr-style feature detection\nconst featureSupport = {\n  // Test for specific features\n  localStorage: typeof(Storage) !== \"undefined\",\n  \n  geolocation: 'geolocation' in navigator,\n  \n  canvas: (() => {\n    const elem = document.createElement('canvas');\n    return !!(elem.getContext && elem.getContext('2d'));\n  })(),\n  \n  webGL: (() => {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(window.WebGLRenderingContext && canvas.getContext('webgl'));\n    } catch(e) {\n      return false;\n    }\n  })(),\n  \n  flexbox: (() => {\n    const elem = document.createElement('div');\n    elem.style.display = 'flex';\n    return elem.style.display === 'flex';\n  })()\n};\n\n// Use feature detection for progressive enhancement\nif (featureSupport.localStorage) {\n  // Use localStorage\n  localStorage.setItem('theme', 'dark');\n} else {\n  // Use cookies as fallback\n  document.cookie = 'theme=dark';\n}\n\nif (featureSupport.geolocation) {\n  navigator.geolocation.getCurrentPosition(showPosition);\n} else {\n  console.log('Geolocation not supported');\n}\n```\n\n**4. Automated Cross-Browser Testing:**\n\n```javascript\n// Selenium WebDriver example\nconst { Builder, By, Key, until } = require('selenium-webdriver');\n\nasync function testMultipleBrowsers() {\n  const browsers = ['chrome', 'firefox', 'safari', 'edge'];\n  \n  for (const browser of browsers) {\n    let driver = await new Builder().forBrowser(browser).build();\n    \n    try {\n      await driver.get('https://yourwebsite.com');\n      \n      // Test responsive design\n      await driver.manage().window().setRect({\n        width: 1920,\n        height: 1080\n      });\n      \n      // Test mobile view\n      await driver.manage().window().setRect({\n        width: 375,\n        height: 667\n      });\n      \n      // Test functionality\n      const button = await driver.findElement(By.css('.test-button'));\n      await button.click();\n      \n      // Wait for result\n      await driver.wait(until.elementLocated(By.css('.result')), 5000);\n      \n      console.log(`${browser}: Test passed`);\n      \n    } catch (error) {\n      console.log(`${browser}: Test failed`, error.message);\n    } finally {\n      await driver.quit();\n    }\n  }\n}\n\n// Playwright example (modern alternative)\nconst { chromium, firefox, webkit } = require('playwright');\n\nasync function testWithPlaywright() {\n  const browsers = [chromium, firefox, webkit];\n  \n  for (const browserType of browsers) {\n    const browser = await browserType.launch();\n    const page = await browser.newPage();\n    \n    // Test different viewport sizes\n    await page.setViewportSize({ width: 1920, height: 1080 });\n    await page.goto('https://yourwebsite.com');\n    \n    // Take screenshot\n    await page.screenshot({ \n      path: `screenshot-${browserType.name()}-desktop.png` \n    });\n    \n    // Test mobile\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.screenshot({ \n      path: `screenshot-${browserType.name()}-mobile.png` \n    });\n    \n    await browser.close();\n  }\n}\n```\n\n**5. Cloud-Based Testing Services:**\n\n```javascript\n// BrowserStack integration example\nconst { Builder } = require('selenium-webdriver');\n\nconst capabilities = {\n  'browserName': 'Chrome',\n  'browserVersion': 'latest',\n  'os': 'Windows',\n  'osVersion': '10',\n  'browserstack.user': 'your_username',\n  'browserstack.key': 'your_access_key'\n};\n\nconst driver = new Builder()\n  .usingServer('http://hub-cloud.browserstack.com/wd/hub')\n  .withCapabilities(capabilities)\n  .build();\n\n// LambdaTest example\nconst lambdaCapabilities = {\n  'browserName': 'Firefox',\n  'version': 'latest',\n  'platform': 'macOS Big Sur',\n  'resolution': '1920x1080',\n  'user': 'your_username',\n  'accessKey': 'your_access_key'\n};\n```\n\n**6. CSS and HTML Validation:**\n\n```html\n<!-- HTML5 Validator integration -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Test Page</title>\n  \n  <!-- CSS Validation -->\n  <style>\n    /* Valid CSS that passes W3C validation */\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem;\n    }\n  </style>\n</head>\n<body>\n  <!-- Semantic HTML for better compatibility -->\n  <main>\n    <section class=\"container\">\n      <h1>Cross-Browser Test Page</h1>\n    </section>\n  </main>\n</body>\n</html>\n```\n\n**7. Testing Checklist:**\n\n```javascript\n// Comprehensive testing checklist\nconst testingChecklist = {\n  browsers: [\n    'Chrome (latest)',\n    'Firefox (latest)', \n    'Safari (latest)',\n    'Edge (latest)',\n    'Chrome Mobile',\n    'Safari Mobile'\n  ],\n  \n  viewports: [\n    { width: 320, height: 568, name: 'Mobile Portrait' },\n    { width: 768, height: 1024, name: 'Tablet Portrait' },\n    { width: 1024, height: 768, name: 'Tablet Landscape' },\n    { width: 1920, height: 1080, name: 'Desktop' }\n  ],\n  \n  features: [\n    'Navigation functionality',\n    'Form submissions',\n    'Interactive elements',\n    'Animations and transitions',\n    'Media playback',\n    'Responsive layout',\n    'Accessibility features'\n  ],\n  \n  performance: [\n    'Page load speed',\n    'Image optimization',\n    'CSS/JS minification',\n    'Cache headers',\n    'Core Web Vitals'\n  ]\n};\n```\n\n**Best Practices:**\n\n- **Start with modern browsers**, then test legacy\n- **Use progressive enhancement** rather than graceful degradation\n- **Automate repetitive tests** with tools like Playwright\n- **Test on real devices** when possible\n- **Monitor real user data** with analytics\n- **Use feature detection** instead of browser detection\n- **Validate HTML and CSS** regularly\n- **Test with different network conditions**",
        "difficulty": "Hard",
        "category": "Block, Inline, and Box Sizing",
        "type": "CSS",
        "tags": [
            "CSS",
            "Browser Testing",
            "Cross-browser",
            "DevTools",
            "Automation"
        ]
    },
    {
        "id": 55,
        "question": "What is the difference between a pseudo-class and a pseudo-element in CSS? Provide examples of each.",
        "solution": "**Pseudo-class** selects elements in a specific state, while **pseudo-element** styles a specific part of an element.\n\n**Pseudo-classes** (single colon `:`):\n- Select elements based on their state or position\n- Examples: `:hover`, `:active`, `:focus`, `:first-child`, `:nth-child()`\n\n**Pseudo-elements** (double colon `::`):\n- Style specific parts of an element\n- Examples: `::before`, `::after`, `::first-line`, `::first-letter`\n\n```css\n/* Pseudo-class examples */\na:hover {\n  color: red; /* Changes color when hovering over a link */\n}\n\nli:first-child {\n  font-weight: bold; /* Styles the first list item */\n}\n\ninput:focus {\n  border: 2px solid blue; /* Styles focused input */\n}\n\n/* Pseudo-element examples */\np::before {\n  content: \"→ \"; /* Adds content before paragraph */\n  color: blue;\n}\n\np::first-letter {\n  font-size: 2em; /* Makes first letter larger */\n  float: left;\n}\n\n.tooltip::after {\n  content: attr(data-tooltip); /* Shows tooltip content */\n  position: absolute;\n}\n```\n\n**Key Difference**: Pseudo-classes select existing elements in certain states, while pseudo-elements create virtual elements that don't exist in HTML.",
        "difficulty": "Medium",
        "category": "CSS Selectors",
        "type": "CSS",
        "tags": [
            "CSS",
            "Pseudo-class",
            "Pseudo-element",
            "Selectors"
        ]
    },
    {
        "id": 56,
        "question": "Explain the different CSS units (absolute vs relative). When should you use each type?",
        "solution": "CSS units are categorized into **absolute** and **relative** units:\n\n**Absolute Units** (fixed size):\n- `px` - Pixels (most common)\n- `pt` - Points (1pt = 1/72 inch)\n- `cm`, `mm`, `in` - Physical measurements\n\n**Relative Units** (relative to something else):\n- `em` - Relative to parent element's font-size\n- `rem` - Relative to root element's font-size\n- `%` - Relative to parent element\n- `vw` - 1% of viewport width\n- `vh` - 1% of viewport height\n- `vmin/vmax` - Smaller/larger of vw or vh\n\n```css\n/* Examples */\n.container {\n  width: 800px;        /* Absolute - always 800px */\n  max-width: 90%;      /* Relative - 90% of parent */\n  padding: 2rem;       /* Relative - 2x root font-size */\n  margin: 1em;         /* Relative - 1x parent font-size */\n}\n\n.hero-section {\n  height: 100vh;       /* Full viewport height */\n  width: 100vw;        /* Full viewport width */\n}\n\n.responsive-font {\n  font-size: 4vw;      /* Scales with viewport */\n  min-font-size: 16px; /* Minimum size */\n}\n```\n\n**When to use:**\n- **px**: Borders, shadows, precise layouts\n- **rem**: Font sizes, spacing (preferred for scalability)\n- **em**: Component-based spacing that should scale with local font-size\n- **%**: Fluid layouts, responsive widths\n- **vw/vh**: Full-screen sections, responsive typography",
        "difficulty": "Medium",
        "category": "CSS Units",
        "type": "CSS",
        "tags": [
            "CSS",
            "Units",
            "Responsive Design",
            "Typography"
        ]
    },
    {
        "id": 57,
        "question": "Do margin-top and margin-bottom affect inline elements? Explain with examples.",
        "solution": "**No, vertical margins (margin-top and margin-bottom) do NOT affect inline elements.** Only horizontal margins (margin-left and margin-right) work on inline elements.\n\n```css\n.inline-element {\n  margin-top: 20px;    /* No effect */\n  margin-bottom: 20px; /* No effect */\n  margin-left: 10px;   /* Works */\n  margin-right: 10px;  /* Works */\n  background: lightblue;\n}\n\n.inline-block-element {\n  display: inline-block;\n  margin-top: 20px;    /* Works! */\n  margin-bottom: 20px; /* Works! */\n  background: lightcoral;\n}\n```\n\n```html\n<p>This is a paragraph with \n<span class=\"inline-element\">inline span</span> \nand <span class=\"inline-block-element\">inline-block span</span> elements.</p>\n```\n\n**Why this happens:**\n- Inline elements flow horizontally within the text line\n- They don't break the line flow, so vertical spacing doesn't apply\n- The line height is determined by the `line-height` property\n\n**Solutions for vertical spacing on inline elements:**\n```css\n/* Option 1: Change display property */\n.solution1 {\n  display: inline-block; /* Now vertical margins work */\n}\n\n/* Option 2: Use padding instead */\n.solution2 {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n/* Option 3: Use line-height for vertical spacing */\n.solution3 {\n  line-height: 2; /* Increases vertical space */\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Box Model",
        "type": "CSS",
        "tags": [
            "CSS",
            "Margin",
            "Inline Elements",
            "Box Model"
        ]
    },
    {
        "id": 58,
        "question": "Explain the CSS position property and its different values with practical examples.",
        "solution": "The `position` property controls how an element is positioned in the document:\n\n**1. static (default)**\n- Normal document flow\n- `top`, `right`, `bottom`, `left` have no effect\n\n**2. relative**\n- Positioned relative to its normal position\n- Still occupies original space in flow\n\n**3. absolute**\n- Removed from document flow\n- Positioned relative to nearest positioned ancestor\n\n**4. fixed**\n- Removed from document flow\n- Positioned relative to viewport\n- Stays in place when scrolling\n\n**5. sticky**\n- Hybrid of relative and fixed\n- Acts as relative until scroll threshold, then becomes fixed\n\n```css\n/* Examples */\n.container {\n  position: relative; /* Creates positioning context */\n  height: 200px;\n  border: 2px solid #ccc;\n}\n\n.static-box {\n  position: static; /* Default behavior */\n  background: lightblue;\n}\n\n.relative-box {\n  position: relative;\n  top: 10px;     /* Moves 10px down from normal position */\n  left: 20px;    /* Moves 20px right from normal position */\n  background: lightgreen;\n}\n\n.absolute-box {\n  position: absolute;\n  top: 0;        /* 0px from top of positioned parent */\n  right: 0;      /* 0px from right of positioned parent */\n  width: 100px;\n  background: lightcoral;\n}\n\n.fixed-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background: navy;\n  z-index: 1000;\n}\n\n.sticky-sidebar {\n  position: sticky;\n  top: 20px;     /* Becomes fixed when 20px from top */\n  background: lightyellow;\n}\n```\n\n```html\n<header class=\"fixed-header\">Fixed Header</header>\n<div class=\"container\">\n  <div class=\"static-box\">Static</div>\n  <div class=\"relative-box\">Relative</div>\n  <div class=\"absolute-box\">Absolute</div>\n</div>\n<div class=\"sticky-sidebar\">Sticky Sidebar</div>\n```",
        "difficulty": "Medium",
        "category": "CSS Positioning",
        "type": "CSS",
        "tags": [
            "CSS",
            "Position",
            "Layout",
            "Absolute",
            "Relative",
            "Fixed",
            "Sticky"
        ]
    },
    {
        "id": 59,
        "question": "What is a stacking context and how does z-index work in CSS?",
        "solution": "A **stacking context** is a 3D conceptualization of HTML elements along the z-axis. Elements within the same stacking context are stacked according to their `z-index` values.\n\n**Creating a Stacking Context:**\n- Root element (`<html>`)\n- `position: absolute/relative/fixed/sticky` with `z-index` other than `auto`\n- `opacity` less than 1\n- `transform` other than `none`\n- `filter` other than `none`\n- `isolation: isolate`\n\n**Key Rule**: `z-index` only works within the same stacking context!\n\n```css\n/* Example 1: Basic z-index */\n.box1 {\n  position: relative;\n  z-index: 2;\n  background: red;\n}\n\n.box2 {\n  position: relative;\n  z-index: 1;\n  background: blue;\n  margin-top: -20px; /* Overlaps box1 */\n}\n/* box1 appears on top despite being first in HTML */\n\n/* Example 2: Stacking context issue */\n.parent1 {\n  position: relative;\n  z-index: 1;\n  opacity: 0.9; /* Creates stacking context */\n}\n\n.child1 {\n  position: relative;\n  z-index: 9999; /* Won't help! */\n  background: red;\n}\n\n.parent2 {\n  position: relative;\n  z-index: 2;\n  opacity: 0.9; /* Creates stacking context */\n}\n\n.child2 {\n  position: relative;\n  z-index: 1;\n  background: blue;\n}\n/* child2 appears above child1 because parent2 > parent1 */\n```\n\n```html\n<div class=\"parent1\">\n  <div class=\"child1\">Child 1 (z-index: 9999)</div>\n</div>\n<div class=\"parent2\">\n  <div class=\"child2\">Child 2 (z-index: 1)</div>\n</div>\n```\n\n**Best Practices:**\n- Use `z-index` sparingly\n- Create intentional stacking contexts with `isolation: isolate`\n- Use consistent z-index scales (100s, 1000s)\n- Document your z-index hierarchy",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "z-index",
            "Stacking Context",
            "Layering",
            "Position"
        ]
    },
    {
        "id": 60,
        "question": "What is DOM reflow in CSS and how can you minimize it for better performance?",
        "solution": "**DOM Reflow** (or layout) is when the browser recalculates the positions and dimensions of elements on the page. It's an expensive operation that can cause performance issues.\n\n**What triggers reflow:**\n- Changing element dimensions (`width`, `height`, `padding`, `margin`)\n- Adding/removing DOM elements\n- Changing CSS classes that affect layout\n- Reading layout properties (`offsetHeight`, `clientWidth`, `getComputedStyle()`)\n- Window resizing\n- Font loading\n\n**What triggers repaint only:**\n- Changing colors (`color`, `background-color`)\n- Changing `visibility`\n- Changing `outline`\n\n```javascript\n// Bad: Causes multiple reflows\nconst element = document.getElementById('myDiv');\nelement.style.width = '100px';    // Reflow\nelement.style.height = '100px';   // Reflow\nelement.style.padding = '10px';   // Reflow\nconst height = element.offsetHeight; // Forces reflow to get current height\n\n// Better: Batch DOM changes\nconst element = document.getElementById('myDiv');\nelement.style.cssText = 'width: 100px; height: 100px; padding: 10px;';\n\n// Better: Use CSS classes\nelement.className = 'new-size'; // Single reflow\n```\n\n```css\n/* Use transform instead of changing position */\n/* Bad: Triggers reflow */\n.animate-position {\n  transition: left 0.3s;\n}\n.animate-position:hover {\n  left: 100px;\n}\n\n/* Good: Uses GPU, no reflow */\n.animate-transform {\n  transition: transform 0.3s;\n}\n.animate-transform:hover {\n  transform: translateX(100px);\n}\n```\n\n**Performance optimization techniques:**\n```css\n/* 1. Use will-change for animations */\n.animated-element {\n  will-change: transform;\n}\n\n/* 2. Use contain property */\n.independent-component {\n  contain: layout style paint;\n}\n\n/* 3. Use transform and opacity for animations */\n.smooth-animation {\n  transform: translateX(0);\n  opacity: 1;\n  transition: transform 0.3s, opacity 0.3s;\n}\n```\n\n**Best practices:**\n- Batch DOM modifications\n- Use `transform` and `opacity` for animations\n- Avoid reading layout properties in loops\n- Use `requestAnimationFrame()` for smooth animations\n- Consider using CSS containment",
        "difficulty": "Hard",
        "category": "CSS Performance",
        "type": "CSS",
        "tags": [
            "CSS",
            "Performance",
            "Reflow",
            "DOM",
            "Optimization"
        ]
    },
    {
        "id": 61,
        "question": "Explain the box-sizing property in CSS. What's the difference between content-box and border-box?",
        "solution": "The `box-sizing` property defines how the total width and height of an element is calculated.\n\n**1. content-box (default)**\n- Width/height applies only to content\n- Padding and border are added to the total size\n- Total width = width + padding + border\n\n**2. border-box**\n- Width/height includes content, padding, and border\n- More intuitive for layout calculations\n- Total width = width (includes everything)\n\n```css\n/* Example comparison */\n.content-box {\n  box-sizing: content-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid black;\n  /* Total width: 200 + 40 + 10 = 250px */\n}\n\n.border-box {\n  box-sizing: border-box;\n  width: 200px;\n  padding: 20px;\n  border: 5px solid black;\n  /* Total width: exactly 200px */\n  /* Content width: 200 - 40 - 10 = 150px */\n}\n```\n\n**Universal border-box (recommended):**\n```css\n/* Apply to all elements */\n* {\n  box-sizing: border-box;\n}\n\n/* More specific approach */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Inheritance method */\nhtml {\n  box-sizing: border-box;\n}\n*, \n*::before, \n*::after {\n  box-sizing: inherit;\n}\n```\n\n**Practical example:**\n```css\n/* Without border-box: doesn't work as expected */\n.column {\n  width: 50%;\n  padding: 20px;\n  border: 1px solid #ccc;\n  float: left;\n  /* Total width > 50%, causes wrapping */\n}\n\n/* With border-box: works perfectly */\n.column-fixed {\n  box-sizing: border-box;\n  width: 50%;\n  padding: 20px;\n  border: 1px solid #ccc;\n  float: left;\n  /* Total width = exactly 50% */\n}\n```\n\n**Benefits of border-box:**\n- Predictable sizing behavior\n- Easier responsive design\n- Simpler grid calculations\n- More intuitive padding/border handling",
        "difficulty": "Medium",
        "category": "CSS Box Model",
        "type": "CSS",
        "tags": [
            "CSS",
            "Box Model",
            "box-sizing",
            "border-box",
            "Layout"
        ]
    },
    {
        "id": 62,
        "question": "How do you center a div inside another div? Show multiple methods.",
        "solution": "There are several ways to center a div, each with different use cases:\n\n**1. Flexbox (recommended for most cases):**\n```css\n.parent {\n  display: flex;\n  justify-content: center; /* Horizontal centering */\n  align-items: center;     /* Vertical centering */\n  height: 400px;\n}\n\n.child {\n  width: 200px;\n  height: 100px;\n  background: lightblue;\n}\n```\n\n**2. CSS Grid:**\n```css\n.parent {\n  display: grid;\n  place-items: center; /* Centers both horizontally and vertically */\n  height: 400px;\n}\n\n/* Alternative grid method */\n.parent-alt {\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  height: 400px;\n}\n```\n\n**3. Absolute positioning with transform:**\n```css\n.parent {\n  position: relative;\n  height: 400px;\n}\n\n.child {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 100px;\n}\n```\n\n**4. Absolute positioning with margins (fixed dimensions):**\n```css\n.parent {\n  position: relative;\n  height: 400px;\n}\n\n.child {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  width: 200px;  /* Must have fixed dimensions */\n  height: 100px;\n}\n```\n\n**5. Text-align + line-height (for single-line content):**\n```css\n.parent {\n  text-align: center;\n  line-height: 400px; /* Same as height */\n  height: 400px;\n}\n\n.child {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: normal;\n}\n```\n\n**6. Table-cell method:**\n```css\n.parent {\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n  width: 500px;\n  height: 400px;\n}\n\n.child {\n  display: inline-block;\n}\n```\n\n**When to use each method:**\n- **Flexbox**: Most flexible, works with any content size\n- **Grid**: Great for complex layouts\n- **Absolute + transform**: When you need to overlay content\n- **Absolute + margin**: When child has fixed dimensions\n- **Line-height**: Only for single-line text content\n- **Table-cell**: Legacy support for older browsers",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Centering",
            "Flexbox",
            "Grid",
            "Position",
            "Layout"
        ]
    },
    {
        "id": 63,
        "question": "What are CSS Media Queries? Explain different media types, features, and show examples of responsive breakpoints.",
        "solution": "**CSS Media Queries** allow you to apply different styles based on device characteristics, enabling responsive web design.\n\n**Basic Syntax:**\n```css\n@media [media-type] and [media-feature] {\n  /* CSS rules */\n}\n```\n\n**Media Types:**\n- `all` - All devices (default)\n- `screen` - Devices with screens\n- `print` - Print preview/printing\n- `speech` - Screen readers\n\n**Common Media Features:**\n- `width`, `min-width`, `max-width` - Viewport width\n- `height`, `min-height`, `max-height` - Viewport height\n- `orientation` - Portrait or landscape\n- `aspect-ratio` - Width/height ratio\n- `hover` - Can hover over elements\n- `pointer` - Accuracy of pointing device\n\n**Logical Operators:**\n- `and` - Combines conditions\n- `,` (comma) - OR operator\n- `not` - Negates condition\n\n```css\n/* Mobile First Approach (recommended) */\n/* Base styles for mobile */\n.container {\n  width: 100%;\n  padding: 10px;\n  font-size: 14px;\n}\n\n/* Tablet styles */\n@media screen and (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n    font-size: 16px;\n  }\n  \n  .grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 20px;\n  }\n}\n\n/* Desktop styles */\n@media screen and (min-width: 1024px) {\n  .container {\n    max-width: 980px;\n  }\n  \n  .grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* Large desktop */\n@media screen and (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n```\n\n**Advanced Examples:**\n```css\n/* Orientation-based styles */\n@media (orientation: landscape) {\n  .sidebar {\n    width: 25%;\n    float: left;\n  }\n}\n\n/* High-density displays */\n@media screen and (-webkit-min-device-pixel-ratio: 2),\n       screen and (min-resolution: 192dpi) {\n  .logo {\n    background-image: url('logo@2x.png');\n    background-size: 100px 50px;\n  }\n}\n\n/* Print styles */\n@media print {\n  .navigation,\n  .sidebar {\n    display: none;\n  }\n  \n  body {\n    font-family: serif;\n    color: black;\n  }\n  \n  a::after {\n    content: \" (\" attr(href) \")\";\n  }\n}\n\n/* Hover capability detection */\n@media (hover: hover) {\n  .button:hover {\n    background-color: #007bff;\n  }\n}\n\n/* Touch device styles */\n@media (hover: none) and (pointer: coarse) {\n  .button {\n    padding: 15px; /* Larger touch targets */\n  }\n}\n```\n\n**Common Breakpoints:**\n```css\n/* Extra small devices (phones) */\n@media (max-width: 575.98px) { ... }\n\n/* Small devices (landscape phones) */\n@media (min-width: 576px) { ... }\n\n/* Medium devices (tablets) */\n@media (min-width: 768px) { ... }\n\n/* Large devices (desktops) */\n@media (min-width: 992px) { ... }\n\n/* Extra large devices (large desktops) */\n@media (min-width: 1200px) { ... }\n```",
        "difficulty": "Medium",
        "category": "Responsive Design",
        "type": "CSS",
        "tags": [
            "CSS",
            "Media Queries",
            "Responsive Design",
            "Breakpoints",
            "Mobile First"
        ]
    },
    {
        "id": 64,
        "question": "What are the different ways to hide elements with CSS? Explain the differences between each method.",
        "solution": "There are several ways to hide elements in CSS, each with different behavior:\n\n**1. `display: none`**\n- Completely removes element from document flow\n- Takes up no space\n- Not accessible to screen readers\n- Cannot be targeted by JavaScript events\n\n**2. `visibility: hidden`**\n- Hides element but preserves its space\n- Still in document flow\n- Not accessible to screen readers\n- Can still be targeted by JavaScript\n\n**3. `opacity: 0`**\n- Makes element transparent\n- Still takes up space and receives events\n- Accessible to screen readers\n- Can be clicked/interacted with\n\n**4. `clip-path` or `clip`**\n- Clips the element to hide it\n- Takes up space\n- Accessible to screen readers\n\n```css\n/* Different hiding methods */\n.hide-display {\n  display: none;\n  /* Element completely gone, no space taken */\n}\n\n.hide-visibility {\n  visibility: hidden;\n  /* Element invisible but space preserved */\n}\n\n.hide-opacity {\n  opacity: 0;\n  /* Element transparent but still interactive */\n}\n\n.hide-clip {\n  clip-path: inset(100%);\n  /* Element clipped but space preserved */\n}\n\n.hide-position {\n  position: absolute;\n  left: -9999px;\n  /* Moves element off-screen */\n}\n\n.hide-size {\n  width: 0;\n  height: 0;\n  overflow: hidden;\n  /* Shrinks element to nothing */\n}\n\n.hide-text {\n  text-indent: -9999px;\n  overflow: hidden;\n  /* Hides text content specifically */\n}\n```\n\n**Accessibility considerations:**\n```css\n/* Screen reader only (visually hidden but accessible) */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Hide from screen readers but keep visible */\n.visual-only {\n  aria-hidden=\"true\";\n}\n```\n\n**Use cases:**\n\n| Method | Use Case |\n|--------|----------|\n| `display: none` | Toggle elements, responsive design |\n| `visibility: hidden` | Maintain layout while hiding |\n| `opacity: 0` | Fade animations, hover effects |\n| `clip-path` | Creative reveal animations |\n| `position: absolute` | Accessible hiding |\n| `.sr-only` | Screen reader only content |\n\n**Animation considerations:**\n```css\n/* display: none cannot be animated */\n.fade-toggle {\n  opacity: 1;\n  transition: opacity 0.3s ease;\n}\n\n.fade-toggle.hidden {\n  opacity: 0;\n  /* Can use visibility: hidden after transition */\n  transition: opacity 0.3s ease, visibility 0s 0.3s;\n  visibility: hidden;\n}\n\n/* For slide animations */\n.slide-up {\n  max-height: 500px;\n  overflow: hidden;\n  transition: max-height 0.3s ease;\n}\n\n.slide-up.hidden {\n  max-height: 0;\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Visibility",
        "type": "CSS",
        "tags": [
            "CSS",
            "Visibility",
            "Display",
            "Opacity",
            "Accessibility",
            "Animation"
        ]
    },
    {
        "id": 65,
        "question": "What does the :root selector select in CSS and how is it commonly used?",
        "solution": "The `:root` selector targets the root element of the document, which is the `<html>` element in HTML documents. It has higher specificity than the `html` selector.\n\n**Primary use: CSS Custom Properties (Variables)**\n\n```css\n/* Define global CSS variables */\n:root {\n  /* Color palette */\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --success-color: #28a745;\n  --danger-color: #dc3545;\n  --warning-color: #ffc107;\n  \n  /* Typography */\n  --font-family-base: 'Helvetica Neue', Arial, sans-serif;\n  --font-size-base: 16px;\n  --line-height-base: 1.5;\n  \n  /* Spacing */\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 3rem;\n  \n  /* Layout */\n  --container-max-width: 1200px;\n  --border-radius: 4px;\n  --box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n```\n\n**Using the variables:**\n```css\n/* Using CSS custom properties */\n.button {\n  background-color: var(--primary-color);\n  color: white;\n  padding: var(--spacing-sm) var(--spacing-md);\n  border-radius: var(--border-radius);\n  font-family: var(--font-family-base);\n  box-shadow: var(--box-shadow);\n}\n\n.button--secondary {\n  background-color: var(--secondary-color);\n}\n\n.container {\n  max-width: var(--container-max-width);\n  margin: 0 auto;\n  padding: var(--spacing-md);\n}\n```\n\n**Dynamic theming with CSS variables:**\n```css\n/* Light theme (default) */\n:root {\n  --bg-color: #ffffff;\n  --text-color: #333333;\n  --border-color: #e0e0e0;\n}\n\n/* Dark theme */\n:root.dark-theme {\n  --bg-color: #1a1a1a;\n  --text-color: #ffffff;\n  --border-color: #404040;\n}\n\n/* Apply theme variables */\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.card {\n  border: 1px solid var(--border-color);\n  background-color: var(--bg-color);\n}\n```\n\n**JavaScript interaction:**\n```javascript\n// Get CSS variable value\nconst primaryColor = getComputedStyle(document.documentElement)\n  .getPropertyValue('--primary-color');\n\n// Set CSS variable value\ndocument.documentElement.style\n  .setProperty('--primary-color', '#ff6b6b');\n\n// Toggle theme\nfunction toggleTheme() {\n  document.documentElement.classList.toggle('dark-theme');\n}\n```\n\n**Responsive variables:**\n```css\n:root {\n  --font-size: 14px;\n  --container-padding: 1rem;\n}\n\n@media (min-width: 768px) {\n  :root {\n    --font-size: 16px;\n    --container-padding: 2rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  :root {\n    --font-size: 18px;\n    --container-padding: 3rem;\n  }\n}\n\nbody {\n  font-size: var(--font-size);\n}\n\n.container {\n  padding: var(--container-padding);\n}\n```\n\n**Advantages of using :root for CSS variables:**\n- Global scope accessible by all elements\n- Easy theming and customization\n- Dynamic updates with JavaScript\n- Better maintainability\n- Runtime calculations with `calc()`\n- Inheritance support",
        "difficulty": "Medium",
        "category": "CSS Variables",
        "type": "CSS",
        "tags": [
            "CSS",
            ":root",
            "CSS Variables",
            "Custom Properties",
            "Theming"
        ]
    },
    {
        "id": 66,
        "question": "What is Web Accessibility (a11y) in CSS? What are the key practices for making websites accessible?",
        "solution": "**Web Accessibility (a11y)** ensures websites are usable by people with disabilities, including visual, auditory, motor, and cognitive impairments.\n\n**Key CSS Accessibility Practices:**\n\n**1. Color and Contrast:**\n```css\n/* Ensure sufficient color contrast (WCAG AA: 4.5:1 for normal text) */\n.text {\n  color: #333333;        /* Dark text */\n  background: #ffffff;   /* Light background */\n}\n\n.button {\n  background: #0066cc;   /* High contrast blue */\n  color: #ffffff;\n}\n\n/* Don't rely solely on color for information */\n.error {\n  color: #d32f2f;\n  border-left: 4px solid #d32f2f; /* Visual indicator beyond color */\n}\n\n.error::before {\n  content: \"⚠ \";        /* Icon for additional context */\n}\n```\n\n**2. Focus Management:**\n```css\n/* Visible focus indicators */\n:focus {\n  outline: 2px solid #0066cc;\n  outline-offset: 2px;\n}\n\n/* Custom focus styles */\n.button:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.3);\n}\n\n/* Skip links for keyboard navigation */\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 6px;\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  text-decoration: none;\n  z-index: 1000;\n}\n\n.skip-link:focus {\n  top: 6px;\n}\n```\n\n**3. Responsive and Scalable Design:**\n```css\n/* Support font scaling (don't use px for font-size) */\n.text {\n  font-size: 1rem;       /* Scalable with user preferences */\n  line-height: 1.5;      /* Good readability */\n}\n\n/* Minimum touch target size (44px × 44px) */\n.button {\n  min-height: 44px;\n  min-width: 44px;\n  padding: 12px 16px;\n}\n\n/* Responsive design for zooming */\n@media (max-width: 1280px) {\n  .container {\n    padding: 1rem;\n  }\n}\n```\n\n**4. Screen Reader Support:**\n```css\n/* Visually hidden but accessible to screen readers */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Hide decorative content from screen readers */\n.decorative::before {\n  content: \"🎨\";\n  aria-hidden: true;\n}\n```\n\n**5. Motion and Animation:**\n```css\n/* Respect user's motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Safe animations */\n.fade-in {\n  opacity: 0;\n  animation: fadeIn 0.5s ease forwards;\n}\n\n@keyframes fadeIn {\n  to {\n    opacity: 1;\n  }\n}\n\n/* Respect reduced motion */\n@media (prefers-reduced-motion: reduce) {\n  .fade-in {\n    animation: none;\n    opacity: 1;\n  }\n}\n```\n\n**6. Form Accessibility:**\n```css\n/* Clear form field styling */\n.form-field {\n  margin-bottom: 1rem;\n}\n\n.form-label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.form-input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n}\n\n.form-input:focus {\n  border-color: #0066cc;\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);\n}\n\n/* Error states */\n.form-input[aria-invalid=\"true\"] {\n  border-color: #d32f2f;\n}\n\n.error-message {\n  color: #d32f2f;\n  font-size: 0.875rem;\n  margin-top: 0.25rem;\n}\n```\n\n**7. High Contrast Mode Support:**\n```css\n/* Support Windows High Contrast Mode */\n@media (prefers-contrast: high) {\n  .button {\n    border: 2px solid;\n  }\n  \n  .card {\n    border: 1px solid;\n  }\n}\n\n/* Forced colors mode */\n@media (forced-colors: active) {\n  .custom-checkbox {\n    forced-color-adjust: none;\n  }\n}\n```\n\n**Best Practices Summary:**\n- Use semantic HTML with proper CSS styling\n- Ensure 4.5:1 color contrast ratio (WCAG AA)\n- Provide visible focus indicators\n- Support keyboard navigation\n- Use relative units for scalable text\n- Respect user preferences (motion, contrast)\n- Test with screen readers and keyboard-only navigation\n- Avoid relying solely on color for information\n- Ensure sufficient touch target sizes (44px minimum)",
        "difficulty": "Medium",
        "category": "Web Accessibility",
        "type": "CSS",
        "tags": [
            "CSS",
            "Accessibility",
            "a11y",
            "WCAG",
            "Screen Readers",
            "Focus Management"
        ]
    },
    {
        "id": 67,
        "question": "What is CSS Grid Layout? Explain the key concepts and show how to create a basic grid layout.",
        "solution": "**CSS Grid** is a 2D layout system that allows you to create complex layouts with rows and columns.\n\n**Key Concepts:**\n- **Grid Container**: Parent element with `display: grid`\n- **Grid Items**: Direct children of the container\n- **Grid Lines**: Dividing lines that create rows and columns\n- **Grid Tracks**: Space between two grid lines (rows/columns)\n- **Grid Areas**: Rectangular space bounded by four grid lines\n\n```css\n/* Basic Grid Setup */\n.grid-container {\n  display: grid;\n  grid-template-columns: 200px 1fr 100px; /* 3 columns */\n  grid-template-rows: 80px 1fr 60px;      /* 3 rows */\n  gap: 20px;                              /* Space between items */\n  height: 100vh;\n}\n\n/* Grid item positioning */\n.header {\n  grid-column: 1 / -1;  /* Span all columns */\n  grid-row: 1;\n  background: #f0f0f0;\n}\n\n.sidebar {\n  grid-column: 1;\n  grid-row: 2;\n  background: #e0e0e0;\n}\n\n.main {\n  grid-column: 2;\n  grid-row: 2;\n  background: #d0d0d0;\n}\n\n.aside {\n  grid-column: 3;\n  grid-row: 2;\n  background: #c0c0c0;\n}\n\n.footer {\n  grid-column: 1 / -1;  /* Span all columns */\n  grid-row: 3;\n  background: #b0b0b0;\n}\n```\n\n```html\n<div class=\"grid-container\">\n  <header class=\"header\">Header</header>\n  <nav class=\"sidebar\">Sidebar</nav>\n  <main class=\"main\">Main Content</main>\n  <aside class=\"aside\">Aside</aside>\n  <footer class=\"footer\">Footer</footer>\n</div>\n```\n\n**Responsive Grid with auto-fit:**\n```css\n.responsive-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  padding: 20px;\n}\n\n.card {\n  background: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n```\n\n**Grid Template Areas (Named Grid):**\n```css\n.layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 150px;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Grid",
            "Layout",
            "Responsive Design",
            "2D Layout"
        ]
    },
    {
        "id": 68,
        "question": "What is CSS Flexbox? Explain the main axis, cross axis, and common flexbox properties with examples.",
        "solution": "**CSS Flexbox** is a 1D layout method for arranging items in rows or columns with flexible sizing.\n\n**Key Concepts:**\n- **Flex Container**: Parent with `display: flex`\n- **Flex Items**: Direct children of flex container\n- **Main Axis**: Primary axis (horizontal by default)\n- **Cross Axis**: Perpendicular to main axis (vertical by default)\n\n```css\n/* Basic Flexbox Setup */\n.flex-container {\n  display: flex;\n  /* flex-direction: row (default) | row-reverse | column | column-reverse */\n  flex-direction: row;\n  /* justify-content: aligns items along main axis */\n  justify-content: space-between;\n  /* align-items: aligns items along cross axis */\n  align-items: center;\n  /* flex-wrap: allows items to wrap */\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 20px;\n}\n\n.flex-item {\n  /* flex-grow: how much to grow */\n  flex-grow: 1;\n  /* flex-shrink: how much to shrink */\n  flex-shrink: 1;\n  /* flex-basis: initial size before free space distribution */\n  flex-basis: 200px;\n  /* Shorthand: flex: grow shrink basis */\n  flex: 1 1 200px;\n}\n```\n\n**Common Alignment Patterns:**\n```css\n/* Center everything */\n.center-all {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n\n/* Navigation bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n\n/* Card layout */\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n.card {\n  flex: 1 1 300px; /* Grow, shrink, min-width */\n  min-height: 200px;\n}\n```\n\n**Justify-content values:**\n```css\n.flex-start    { justify-content: flex-start; }    /* Start of main axis */\n.flex-end      { justify-content: flex-end; }      /* End of main axis */\n.center        { justify-content: center; }        /* Center of main axis */\n.space-between { justify-content: space-between; } /* Equal space between */\n.space-around  { justify-content: space-around; }  /* Equal space around */\n.space-evenly  { justify-content: space-evenly; }  /* Equal space everywhere */\n```\n\n**Align-items values:**\n```css\n.stretch    { align-items: stretch; }     /* Fill cross axis (default) */\n.flex-start { align-items: flex-start; }  /* Start of cross axis */\n.flex-end   { align-items: flex-end; }    /* End of cross axis */\n.center     { align-items: center; }      /* Center of cross axis */\n.baseline   { align-items: baseline; }    /* Baseline alignment */\n```\n\n**Individual item alignment:**\n```css\n.special-item {\n  align-self: flex-end; /* Override container's align-items */\n  order: -1;            /* Change visual order */\n}\n```",
        "difficulty": "Medium",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Flexbox",
            "Layout",
            "Alignment",
            "1D Layout"
        ]
    },
    {
        "id": 69,
        "question": "What are CSS animations and transitions? Show examples of each and explain when to use them.",
        "solution": "**CSS Transitions** animate property changes smoothly over time, while **CSS Animations** provide more complex, keyframe-based animations.\n\n**CSS Transitions:**\n```css\n/* Basic transition */\n.button {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  /* transition: property duration timing-function delay */\n  transition: background-color 0.3s ease;\n}\n\n.button:hover {\n  background-color: #0056b3;\n}\n\n/* Multiple properties */\n.card {\n  transform: scale(1);\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n  transform: scale(1.05);\n  box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n}\n\n/* All properties */\n.smooth-element {\n  transition: all 0.3s ease;\n}\n```\n\n**CSS Animations (Keyframes):**\n```css\n/* Define keyframes */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Complex animation with percentages */\n@keyframes bounce {\n  0%, 20%, 53%, 80%, 100% {\n    transform: translate3d(0, 0, 0);\n  }\n  40%, 43% {\n    transform: translate3d(0, -20px, 0);\n  }\n  70% {\n    transform: translate3d(0, -10px, 0);\n  }\n  90% {\n    transform: translate3d(0, -4px, 0);\n  }\n}\n\n/* Apply animations */\n.fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n.bounce-element {\n  animation: bounce 1s ease infinite;\n}\n\n/* Animation shorthand */\n.loading-spinner {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n```\n\n**Timing Functions:**\n```css\n.ease-examples {\n  /* Built-in timing functions */\n  transition-timing-function: ease;        /* Default */\n  transition-timing-function: linear;      /* Constant speed */\n  transition-timing-function: ease-in;     /* Slow start */\n  transition-timing-function: ease-out;    /* Slow end */\n  transition-timing-function: ease-in-out; /* Slow start & end */\n  \n  /* Custom cubic-bezier */\n  transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  \n  /* Steps (for sprite animations) */\n  animation-timing-function: steps(8, end);\n}\n```\n\n**Performance Optimizations:**\n```css\n/* GPU-accelerated properties (best performance) */\n.optimized-animation {\n  /* Use transform instead of changing position */\n  transform: translateX(100px);\n  \n  /* Use opacity instead of changing display/visibility */\n  opacity: 0;\n  \n  /* Force GPU acceleration */\n  will-change: transform;\n  \n  transition: transform 0.3s ease, opacity 0.3s ease;\n}\n\n/* Remove will-change after animation */\n.optimized-animation.animation-complete {\n  will-change: auto;\n}\n```\n\n**Responsive Animations:**\n```css\n/* Respect user preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Conditional animations */\n@media (min-width: 768px) {\n  .desktop-only-animation {\n    animation: slideIn 0.5s ease;\n  }\n}\n```\n\n**When to use:**\n- **Transitions**: Hover effects, focus states, simple property changes\n- **Animations**: Loading spinners, complex sequences, continuous animations\n- **Performance**: Stick to `transform` and `opacity` for smooth 60fps animations",
        "difficulty": "Medium",
        "category": "CSS Animations",
        "type": "CSS",
        "tags": [
            "CSS",
            "Animation",
            "Transition",
            "Keyframes",
            "Performance"
        ]
    },
    {
        "id": 70,
        "question": "What are CSS preprocessors? Compare Sass/SCSS, Less, and Stylus with examples.",
        "solution": "**CSS Preprocessors** extend CSS with features like variables, nesting, mixins, and functions, then compile to regular CSS.\n\n**Sass/SCSS (Most Popular):**\n```scss\n// Variables\n$primary-color: #007bff;\n$font-size-base: 16px;\n$breakpoint-md: 768px;\n\n// Nesting\n.navbar {\n  background: $primary-color;\n  padding: 1rem;\n  \n  .nav-link {\n    color: white;\n    text-decoration: none;\n    \n    &:hover {\n      color: lighten($primary-color, 20%);\n    }\n    \n    &.active {\n      font-weight: bold;\n    }\n  }\n}\n\n// Mixins\n@mixin button-style($bg-color, $text-color: white) {\n  background: $bg-color;\n  color: $text-color;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  \n  &:hover {\n    background: darken($bg-color, 10%);\n  }\n}\n\n// Using mixins\n.btn-primary {\n  @include button-style($primary-color);\n}\n\n// Functions\n@function rem($pixels) {\n  @return $pixels / $font-size-base * 1rem;\n}\n\n// Conditionals and loops\n@for $i from 1 through 12 {\n  .col-#{$i} {\n    width: percentage($i / 12);\n  }\n}\n\n// Media queries\n@media (min-width: $breakpoint-md) {\n  .container {\n    max-width: 750px;\n  }\n}\n```\n\n**Less:**\n```less\n// Variables (using @)\n@primary-color: #007bff;\n@font-size-base: 16px;\n\n// Nesting\n.navbar {\n  background: @primary-color;\n  \n  .nav-link {\n    color: white;\n    \n    &:hover {\n      color: lighten(@primary-color, 20%);\n    }\n  }\n}\n\n// Mixins\n.button-style(@bg-color; @text-color: white) {\n  background: @bg-color;\n  color: @text-color;\n  padding: 0.5rem 1rem;\n  \n  &:hover {\n    background: darken(@bg-color, 10%);\n  }\n}\n\n// Using mixins\n.btn-primary {\n  .button-style(@primary-color);\n}\n\n// Functions\n.rem(@pixels) {\n  return: @pixels / @font-size-base * 1rem;\n}\n```\n\n**Stylus:**\n```stylus\n// Variables (no $ or @)\nprimary-color = #007bff\nfont-size-base = 16px\n\n// Nesting (optional braces and semicolons)\n.navbar\n  background primary-color\n  \n  .nav-link\n    color white\n    \n    &:hover\n      color lighten(primary-color, 20%)\n\n// Mixins\nbutton-style(bg-color, text-color = white)\n  background bg-color\n  color text-color\n  padding 0.5rem 1rem\n  \n  &:hover\n    background darken(bg-color, 10%)\n\n// Using mixins\n.btn-primary\n  button-style(primary-color)\n\n// Functions\nrem(pixels)\n  return (pixels / font-size-base) * 1rem\n```\n\n**Feature Comparison:**\n\n| Feature | Sass/SCSS | Less | Stylus |\n|---------|-----------|------|--------|\n| Variables | `$var` | `@var` | `var` |\n| Nesting | ✅ | ✅ | ✅ |\n| Mixins | ✅ | ✅ | ✅ |\n| Functions | ✅ | Limited | ✅ |\n| Conditionals | ✅ | Limited | ✅ |\n| Loops | ✅ | Limited | ✅ |\n| Math | ✅ | ✅ | ✅ |\n| Color Functions | ✅ | ✅ | ✅ |\n\n**Build Setup Example (Sass with npm):**\n```json\n{\n  \"scripts\": {\n    \"sass\": \"sass src/scss:dist/css --watch\",\n    \"sass:build\": \"sass src/scss:dist/css --style compressed\"\n  },\n  \"devDependencies\": {\n    \"sass\": \"^1.50.0\"\n  }\n}\n```\n\n**Best Practices:**\n```scss\n// File organization\n// _variables.scss\n// _mixins.scss\n// _base.scss\n// main.scss\n\n// Partial imports\n@import 'variables';\n@import 'mixins';\n@import 'base';\n\n// Use meaningful variable names\n$color-brand-primary: #007bff;\n$spacing-unit: 1rem;\n$breakpoint-tablet: 768px;\n\n// Create utility mixins\n@mixin visually-hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n}\n```\n\n**Why use preprocessors:**\n- Code reusability and maintainability\n- Better organization with partials\n- Dynamic CSS with variables and functions\n- Powerful features like nesting and mixins\n- Better development workflow",
        "difficulty": "Medium",
        "category": "CSS Tools",
        "type": "CSS",
        "tags": [
            "CSS",
            "Sass",
            "SCSS",
            "Less",
            "Stylus",
            "Preprocessor"
        ]
    },
    {
        "id": 71,
        "question": "What is CSS-in-JS? Explain different approaches and show examples with styled-components.",
        "solution": "**CSS-in-JS** is a pattern where CSS is composed using JavaScript instead of defined in external files. It enables dynamic styling and component-scoped styles.\n\n**Popular CSS-in-JS Libraries:**\n- **styled-components** - Template literals\n- **Emotion** - Similar to styled-components\n- **JSS** - JavaScript object syntax\n- **Aphrodite** - Inline styles with CSS features\n\n**Styled-components Examples:**\n```javascript\nimport styled, { css } from 'styled-components';\n\n// Basic styled component\nconst Button = styled.button`\n  background: #007bff;\n  color: white;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  \n  &:hover {\n    background: #0056b3;\n  }\n`;\n\n// Props-based styling\nconst StyledButton = styled.button`\n  background: ${props => props.primary ? '#007bff' : '#6c757d'};\n  color: white;\n  padding: ${props => props.large ? '1rem 2rem' : '0.5rem 1rem'};\n  border: none;\n  border-radius: 4px;\n  \n  ${props => props.outlined && css`\n    background: transparent;\n    color: ${props.primary ? '#007bff' : '#6c757d'};\n    border: 2px solid ${props.primary ? '#007bff' : '#6c757d'};\n  `}\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\n// Usage\nfunction App() {\n  return (\n    <div>\n      <Button>Basic Button</Button>\n      <StyledButton primary>Primary</StyledButton>\n      <StyledButton primary outlined>Outlined</StyledButton>\n      <StyledButton large>Large Button</StyledButton>\n    </div>\n  );\n}\n```\n\n**Advanced styled-components Features:**\n```javascript\n// Extending styles\nconst BaseButton = styled.button`\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n\nconst PrimaryButton = styled(BaseButton)`\n  background: #007bff;\n  color: white;\n`;\n\n// Theming\nimport { ThemeProvider } from 'styled-components';\n\nconst theme = {\n  colors: {\n    primary: '#007bff',\n    secondary: '#6c757d',\n    success: '#28a745'\n  },\n  breakpoints: {\n    mobile: '576px',\n    tablet: '768px',\n    desktop: '992px'\n  }\n};\n\nconst ThemedButton = styled.button`\n  background: ${props => props.theme.colors.primary};\n  color: white;\n  \n  @media (min-width: ${props => props.theme.breakpoints.tablet}) {\n    padding: 1rem 2rem;\n  }\n`;\n\n// App with theme\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ThemedButton>Themed Button</ThemedButton>\n    </ThemeProvider>\n  );\n}\n```\n\n**Animation with styled-components:**\n```javascript\nimport styled, { keyframes } from 'styled-components';\n\n// Define keyframes\nconst spin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\n// Animated components\nconst Spinner = styled.div`\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #007bff;\n  border-radius: 50%;\n  animation: ${spin} 1s linear infinite;\n`;\n\nconst FadeInBox = styled.div`\n  animation: ${fadeIn} 0.5s ease-in;\n  background: #f8f9fa;\n  padding: 1rem;\n  border-radius: 8px;\n`;\n```\n\n**Global Styles:**\n```javascript\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  \n  body {\n    margin: 0;\n    font-family: 'Arial', sans-serif;\n    background: ${props => props.theme.colors.background};\n  }\n  \n  a {\n    color: ${props => props.theme.colors.primary};\n    text-decoration: none;\n    \n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <div>App content</div>\n    </ThemeProvider>\n  );\n}\n```\n\n**Advantages of CSS-in-JS:**\n- Component-scoped styles (no CSS conflicts)\n- Dynamic styling based on props/state\n- Automatic vendor prefixing\n- Dead code elimination\n- Better developer experience with TypeScript\n\n**Disadvantages:**\n- Runtime overhead\n- Larger bundle size\n- Learning curve\n- Server-side rendering complexity\n\n**When to use CSS-in-JS:**\n- Component libraries\n- Apps with dynamic theming\n- Teams preferring JavaScript-centric workflow\n- Need for props-based styling",
        "difficulty": "Hard",
        "category": "CSS-in-JS",
        "type": "CSS",
        "tags": [
            "CSS",
            "CSS-in-JS",
            "styled-components",
            "React",
            "JavaScript"
        ]
    },
    {
        "id": 72,
        "question": "What are CSS custom properties (CSS variables)? Show advanced use cases and dynamic manipulation.",
        "solution": "**CSS Custom Properties** (CSS Variables) are entities defined by CSS authors that contain specific values to be reused throughout a document.\n\n**Basic Syntax:**\n```css\n/* Define custom properties */\n:root {\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --font-size-base: 16px;\n  --spacing-unit: 1rem;\n}\n\n/* Use custom properties */\n.button {\n  background: var(--primary-color);\n  font-size: var(--font-size-base);\n  padding: var(--spacing-unit);\n}\n\n/* Fallback values */\n.element {\n  color: var(--undefined-color, #333); /* Falls back to #333 */\n}\n```\n\n**Advanced Use Cases:**\n```css\n/* 1. Dynamic theming */\n:root {\n  --theme-bg: #ffffff;\n  --theme-text: #333333;\n  --theme-accent: #007bff;\n}\n\n[data-theme=\"dark\"] {\n  --theme-bg: #1a1a1a;\n  --theme-text: #ffffff;\n  --theme-accent: #66b3ff;\n}\n\nbody {\n  background: var(--theme-bg);\n  color: var(--theme-text);\n  transition: background 0.3s, color 0.3s;\n}\n\n/* 2. Component-specific variables */\n.card {\n  --card-padding: 1.5rem;\n  --card-border-radius: 8px;\n  --card-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  \n  padding: var(--card-padding);\n  border-radius: var(--card-border-radius);\n  box-shadow: var(--card-shadow);\n}\n\n.card--large {\n  --card-padding: 2rem;\n  --card-shadow: 0 4px 8px rgba(0,0,0,0.15);\n}\n\n/* 3. Mathematical calculations */\n:root {\n  --base-size: 16px;\n  --scale-ratio: 1.25;\n}\n\n.text-sm { font-size: calc(var(--base-size) / var(--scale-ratio)); }\n.text-md { font-size: var(--base-size); }\n.text-lg { font-size: calc(var(--base-size) * var(--scale-ratio)); }\n.text-xl { font-size: calc(var(--base-size) * var(--scale-ratio) * var(--scale-ratio)); }\n```\n\n**JavaScript Manipulation:**\n```javascript\n// Get CSS variable value\nconst primaryColor = getComputedStyle(document.documentElement)\n  .getPropertyValue('--primary-color').trim();\n\nconsole.log(primaryColor); // \"#007bff\"\n\n// Set CSS variable value\ndocument.documentElement.style\n  .setProperty('--primary-color', '#ff6b6b');\n\n// Dynamic theme switching\nfunction toggleTheme() {\n  const currentTheme = document.documentElement.getAttribute('data-theme');\n  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n  document.documentElement.setAttribute('data-theme', newTheme);\n}\n\n// Color manipulation based on user input\nfunction updateThemeColor(color) {\n  const root = document.documentElement;\n  root.style.setProperty('--primary-color', color);\n  \n  // Generate complementary colors\n  const lightColor = lightenColor(color, 20);\n  const darkColor = darkenColor(color, 20);\n  \n  root.style.setProperty('--primary-light', lightColor);\n  root.style.setProperty('--primary-dark', darkColor);\n}\n\n// Responsive variables with JavaScript\nfunction updateSizeVariables() {\n  const viewportWidth = window.innerWidth;\n  const root = document.documentElement;\n  \n  if (viewportWidth < 768) {\n    root.style.setProperty('--container-padding', '1rem');\n    root.style.setProperty('--font-size-base', '14px');\n  } else if (viewportWidth < 1024) {\n    root.style.setProperty('--container-padding', '2rem');\n    root.style.setProperty('--font-size-base', '16px');\n  } else {\n    root.style.setProperty('--container-padding', '3rem');\n    root.style.setProperty('--font-size-base', '18px');\n  }\n}\n\nwindow.addEventListener('resize', updateSizeVariables);\n```\n\n**Advanced Patterns:**\n```css\n/* 1. State-based styling */\n.button {\n  --button-bg: var(--primary-color);\n  --button-text: white;\n  \n  background: var(--button-bg);\n  color: var(--button-text);\n  transition: background 0.2s;\n}\n\n.button:hover {\n  --button-bg: var(--primary-dark);\n}\n\n.button:disabled {\n  --button-bg: var(--gray-400);\n  --button-text: var(--gray-600);\n}\n\n/* 2. Animation with custom properties */\n@keyframes pulse {\n  0% {\n    transform: scale(var(--scale-start, 1));\n  }\n  50% {\n    transform: scale(var(--scale-mid, 1.05));\n  }\n  100% {\n    transform: scale(var(--scale-end, 1));\n  }\n}\n\n.pulse-animation {\n  animation: pulse 2s infinite;\n}\n\n.pulse-small {\n  --scale-mid: 1.02;\n}\n\n.pulse-large {\n  --scale-mid: 1.1;\n}\n\n/* 3. Container queries simulation */\n.container {\n  --container-width: 100%;\n}\n\n.container--small {\n  --item-columns: 1;\n  --item-gap: 1rem;\n}\n\n.container--medium {\n  --item-columns: 2;\n  --item-gap: 1.5rem;\n}\n\n.container--large {\n  --item-columns: 3;\n  --item-gap: 2rem;\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(var(--item-columns), 1fr);\n  gap: var(--item-gap);\n}\n```\n\n**Benefits:**\n- Runtime value changes\n- Inheritance and cascading\n- JavaScript integration\n- Better maintainability\n- Dynamic theming\n- Component-scoped styling\n\n**Browser Support:**\n- Modern browsers (IE 11+ with limited support)\n- Use CSS.supports() for feature detection\n- Provide fallbacks for older browsers",
        "difficulty": "Medium",
        "category": "CSS Variables",
        "type": "CSS",
        "tags": [
            "CSS",
            "Custom Properties",
            "CSS Variables",
            "JavaScript",
            "Dynamic Styling"
        ]
    },
    {
        "id": 73,
        "question": "What is Critical CSS and how do you optimize CSS for web performance?",
        "solution": "**Critical CSS** is the minimum set of CSS required to render the above-the-fold content, loaded inline to eliminate render-blocking.\n\n**Critical CSS Implementation:**\n```html\n<!-- Inline critical CSS in <head> -->\n<style>\n  /* Critical styles for above-the-fold content */\n  body {\n    margin: 0;\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n  }\n  \n  .header {\n    background: #333;\n    color: white;\n    padding: 1rem;\n  }\n  \n  .hero {\n    height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n  }\n  \n  .hero h1 {\n    font-size: 3rem;\n    margin: 0;\n  }\n</style>\n\n<!-- Load non-critical CSS asynchronously -->\n<link rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n<noscript><link rel=\"stylesheet\" href=\"styles.css\"></noscript>\n```\n\n**CSS Performance Optimization Techniques:**\n\n**1. Minimize and Compress:**\n```css\n/* Before minification */\n.button {\n  background-color: #007bff;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n}\n\n/* After minification */\n.button{background-color:#007bff;border:none;padding:.5rem 1rem;border-radius:4px}\n```\n\n**2. Remove Unused CSS:**\n```bash\n# Using PurgeCSS\nnpx purgecss --css style.css --content index.html --output purged.css\n\n# Using UnCSS\nuncss index.html > cleaned.css\n```\n\n**3. Optimize Selectors:**\n```css\n/* Slow - complex selectors */\ndiv.container .sidebar ul li a:hover {\n  color: red;\n}\n\n/* Faster - simpler selectors */\n.nav-link:hover {\n  color: red;\n}\n\n/* Avoid expensive selectors */\n*[id=\"navigation\"] { } /* Universal selector */\n.nav > * { } /* Universal child selector */\n.nav :nth-child(odd) { } /* nth-child pseudo-selectors */\n```\n\n**4. CSS Loading Strategies:**\n```html\n<!-- Strategy 1: Split CSS by importance -->\n<style>/* Critical CSS inline */</style>\n<link rel=\"stylesheet\" href=\"non-critical.css\" media=\"print\" onload=\"this.media='all'\">\n\n<!-- Strategy 2: Progressive enhancement -->\n<link rel=\"stylesheet\" href=\"base.css\">\n<link rel=\"stylesheet\" href=\"enhanced.css\" media=\"(min-width: 768px)\">\n\n<!-- Strategy 3: Resource hints -->\n<link rel=\"preload\" href=\"fonts.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n<link rel=\"prefetch\" href=\"next-page.css\">\n```\n\n**5. Efficient CSS Architecture:**\n```css\n/* Use CSS methodologies like BEM */\n.card { } /* Block */\n.card__header { } /* Element */\n.card__header--large { } /* Modifier */\n\n/* Utility-first approach */\n.mt-4 { margin-top: 1rem; }\n.flex { display: flex; }\n.justify-center { justify-content: center; }\n\n/* Component-based CSS */\n.btn {\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n}\n\n.btn--primary {\n  background: #007bff;\n  color: white;\n}\n```\n\n**6. Build Tools Configuration:**\n```javascript\n// webpack.config.js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].[contenthash].css',\n    }),\n  ],\n  optimization: {\n    minimizer: [\n      new CssMinimizerPlugin({\n        test: /\\.css$/i,\n      }),\n    ],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader'],\n      },\n    ],\n  },\n};\n\n// postcss.config.js\nmodule.exports = {\n  plugins: [\n    require('autoprefixer'),\n    require('cssnano')({\n      preset: 'default',\n    }),\n  ],\n};\n```\n\n**7. Performance Monitoring:**\n```javascript\n// Measure CSS loading performance\nconst perfObserver = new PerformanceObserver((list) => {\n  for (const entry of list.getEntries()) {\n    if (entry.name.includes('.css')) {\n      console.log(`CSS loaded: ${entry.name} in ${entry.duration}ms`);\n    }\n  }\n});\n\nperfObserver.observe({ entryTypes: ['resource'] });\n\n// Critical CSS detection\nfunction measureAboveFold() {\n  const viewportHeight = window.innerHeight;\n  const elements = document.querySelectorAll('*');\n  \n  elements.forEach(el => {\n    const rect = el.getBoundingClientRect();\n    if (rect.top < viewportHeight) {\n      el.setAttribute('data-critical', 'true');\n    }\n  });\n}\n```\n\n**Performance Checklist:**\n- ✅ Inline critical CSS (< 14KB)\n- ✅ Async load non-critical CSS\n- ✅ Minimize and compress CSS\n- ✅ Remove unused CSS\n- ✅ Optimize font loading\n- ✅ Use efficient selectors\n- ✅ Implement CSS caching\n- ✅ Monitor Core Web Vitals\n- ✅ Use CSS containment for complex layouts\n- ✅ Leverage browser caching with versioning",
        "difficulty": "Hard",
        "category": "CSS Performance",
        "type": "CSS",
        "tags": [
            "CSS",
            "Performance",
            "Critical CSS",
            "Optimization",
            "Web Vitals"
        ]
    },
    {
        "id": 74,
        "question": "What are CSS Container Queries? How do they differ from Media Queries and when should you use them?",
        "solution": "**CSS Container Queries** allow you to apply styles based on the size of a containing element rather than the viewport, enabling true component-based responsive design.\n\n**Basic Container Query Syntax:**\n```css\n/* Define a containment context */\n.card-container {\n  container-type: inline-size; /* or: size, normal */\n  container-name: card; /* optional name */\n}\n\n/* Shorthand */\n.card-container {\n  container: card / inline-size;\n}\n\n/* Query the container */\n@container card (min-width: 300px) {\n  .card {\n    display: flex;\n    flex-direction: row;\n  }\n  \n  .card__image {\n    width: 40%;\n  }\n  \n  .card__content {\n    width: 60%;\n    padding: 1rem;\n  }\n}\n\n@container card (min-width: 500px) {\n  .card__title {\n    font-size: 1.5rem;\n  }\n  \n  .card__description {\n    display: block; /* Show full description */\n  }\n}\n```\n\n**Practical Example - Responsive Card Component:**\n```css\n.card-wrapper {\n  container: card-context / inline-size;\n  width: 100%;\n  max-width: 600px;\n}\n\n.card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  overflow: hidden;\n}\n\n/* Small container - stacked layout */\n@container card-context (max-width: 299px) {\n  .card {\n    text-align: center;\n  }\n  \n  .card__image {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n  }\n  \n  .card__content {\n    padding: 1rem;\n  }\n  \n  .card__description {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* Medium container - horizontal layout */\n@container card-context (min-width: 300px) and (max-width: 499px) {\n  .card {\n    display: flex;\n    align-items: center;\n  }\n  \n  .card__image {\n    width: 120px;\n    height: 120px;\n    flex-shrink: 0;\n    object-fit: cover;\n  }\n  \n  .card__content {\n    padding: 1rem;\n    flex: 1;\n  }\n}\n\n/* Large container - expanded layout */\n@container card-context (min-width: 500px) {\n  .card {\n    display: flex;\n  }\n  \n  .card__image {\n    width: 200px;\n    height: 200px;\n    object-fit: cover;\n  }\n  \n  .card__content {\n    padding: 2rem;\n    flex: 1;\n  }\n  \n  .card__title {\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n  }\n  \n  .card__description {\n    font-size: 1rem;\n    line-height: 1.6;\n  }\n}\n```\n\n**Container Query vs Media Query:**\n```css\n/* Media Query - responds to viewport */\n@media (min-width: 768px) {\n  .sidebar {\n    width: 300px;\n  }\n}\n\n/* Container Query - responds to parent container */\n.layout {\n  container: layout / inline-size;\n}\n\n@container layout (min-width: 768px) {\n  .sidebar {\n    width: 300px;\n  }\n}\n```\n\n**Advanced Container Query Features:**\n```css\n/* Multiple container queries */\n.widget-container {\n  container: widget / inline-size;\n}\n\n@container widget (min-width: 200px) {\n  .widget { padding: 1rem; }\n}\n\n@container widget (min-width: 400px) {\n  .widget {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n  }\n}\n\n@container widget (min-width: 600px) {\n  .widget {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* Container query with height */\n.tall-container {\n  container: tall / size; /* Both width and height */\n  height: 500px;\n}\n\n@container tall (min-height: 400px) {\n  .content {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n}\n\n/* Logical operators */\n@container (min-width: 300px) and (max-width: 600px) {\n  .element {\n    background: lightblue;\n  }\n}\n\n@container (min-width: 400px) or (min-height: 300px) {\n  .element {\n    border: 2px solid blue;\n  }\n}\n```\n\n**JavaScript Integration:**\n```javascript\n// Check container query support\nif ('container' in document.documentElement.style) {\n  console.log('Container queries supported!');\n} else {\n  console.log('Container queries not supported');\n  // Load polyfill or provide fallback\n}\n\n// Dynamic container sizing\nfunction resizeContainer(element, width) {\n  element.style.width = width + 'px';\n  // Container queries will automatically respond\n}\n\n// Observe container size changes\nconst resizeObserver = new ResizeObserver(entries => {\n  for (let entry of entries) {\n    const { width, height } = entry.contentRect;\n    console.log(`Container resized to: ${width}x${height}`);\n  }\n});\n\nresizeObserver.observe(document.querySelector('.card-container'));\n```\n\n**When to Use Container Queries:**\n\n**Use Container Queries when:**\n- Building reusable components\n- Component layout depends on available space\n- Creating design systems\n- Components are used in different contexts\n- Need intrinsic responsive design\n\n**Use Media Queries when:**\n- Global layout changes\n- Typography scaling across devices\n- Navigation patterns\n- Viewport-specific features\n- Overall page structure\n\n**Browser Support & Fallbacks:**\n```css\n/* Progressive enhancement approach */\n.card {\n  /* Base styles for all browsers */\n  padding: 1rem;\n}\n\n/* Media query fallback */\n@media (min-width: 500px) {\n  .card {\n    display: flex;\n  }\n}\n\n/* Container query enhancement */\n@supports (container-type: inline-size) {\n  .card-container {\n    container: card / inline-size;\n  }\n  \n  @container card (min-width: 300px) {\n    .card {\n      display: flex;\n    }\n  }\n}\n```\n\nContainer Queries represent the future of responsive design, enabling true component-based styling that responds to context rather than just viewport size.",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Container Queries",
            "Responsive Design",
            "Component Design",
            "Modern CSS"
        ]
    },
    {
        "id": 75,
        "question": "What are modern CSS layout techniques? Compare CSS Grid, Flexbox, and when to use each.",
        "solution": "Modern CSS provides powerful layout systems: **CSS Grid** for 2D layouts, **Flexbox** for 1D layouts, and **CSS Subgrid** for nested grids.\n\n**CSS Grid - 2D Layout System:**\n```css\n/* Basic Grid Layout */\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-template-rows: auto 1fr auto;\n  gap: 1rem;\n  min-height: 100vh;\n}\n\n/* Named Grid Areas */\n.layout {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main aside\"\n    \"footer footer footer\";\n  grid-template-columns: 200px 1fr 150px;\n  grid-template-rows: auto 1fr auto;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n\n/* Advanced Grid Features */\n.advanced-grid {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: 1rem;\n}\n\n.item-1 {\n  grid-column: 1 / 5;  /* Span 4 columns */\n  grid-row: 1 / 3;     /* Span 2 rows */\n}\n\n.item-2 {\n  grid-column: 5 / -1; /* From column 5 to end */\n  grid-row: 1;\n}\n```\n\n**Flexbox - 1D Layout System:**\n```css\n/* Basic Flexbox */\n.flex-container {\n  display: flex;\n  justify-content: space-between; /* Main axis alignment */\n  align-items: center;            /* Cross axis alignment */\n  gap: 1rem;\n  flex-wrap: wrap;\n}\n\n.flex-item {\n  flex: 1 1 200px; /* grow shrink basis */\n}\n\n/* Navigation Bar */\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n\n/* Card Layout */\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.card {\n  flex: 1 1 300px; /* Responsive cards */\n  min-height: 200px;\n}\n\n/* Centering */\n.perfect-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n```\n\n**CSS Subgrid (Modern Feature):**\n```css\n.main-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n}\n\n.nested-grid {\n  display: grid;\n  grid-column: span 2;\n  grid-template-columns: subgrid; /* Inherits parent's columns */\n  gap: 0.5rem;\n}\n```\n\n**Comparison and Use Cases:**\n\n**CSS Grid Best For:**\n```css\n/* Page Layouts */\n.page-layout {\n  display: grid;\n  grid-template-areas:\n    \"header\"\n    \"main\"\n    \"sidebar\"\n    \"footer\";\n}\n\n@media (min-width: 768px) {\n  .page-layout {\n    grid-template-areas:\n      \"header header\"\n      \"sidebar main\"\n      \"footer footer\";\n    grid-template-columns: 250px 1fr;\n  }\n}\n\n/* Image Gallery */\n.gallery {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1rem;\n}\n\n/* Complex Card Layout */\n.dashboard {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1rem;\n}\n\n.widget {\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  min-height: 200px;\n}\n```\n\n**Flexbox Best For:**\n```css\n/* Navigation Components */\n.breadcrumb {\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n}\n\n/* Button Groups */\n.button-group {\n  display: flex;\n  gap: 0.5rem;\n}\n\n/* Form Controls */\n.form-row {\n  display: flex;\n  gap: 1rem;\n  align-items: end;\n}\n\n.form-row > * {\n  flex: 1;\n}\n\n/* Media Objects */\n.media {\n  display: flex;\n  gap: 1rem;\n  align-items: flex-start;\n}\n\n.media__object {\n  flex-shrink: 0;\n}\n\n.media__content {\n  flex: 1;\n}\n```\n\n**Hybrid Layouts (Grid + Flexbox):**\n```css\n/* Grid for page structure, Flexbox for components */\n.app {\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.main {\n  display: grid;\n  grid-template-columns: 250px 1fr;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.card {\n  display: flex;\n  gap: 1rem;\n  padding: 1rem;\n  border-radius: 8px;\n}\n```\n\n**Modern Layout Patterns:**\n```css\n/* Holy Grail Layout with Grid */\n.holy-grail {\n  display: grid;\n  grid-template:\n    \"header header header\" auto\n    \"nav main aside\" 1fr\n    \"footer footer footer\" auto\n    / 200px 1fr 200px;\n  min-height: 100vh;\n}\n\n/* Pancake Layout */\n.pancake {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.pancake > main {\n  flex: 1;\n}\n\n/* Sidebar Layout */\n.sidebar-layout {\n  display: grid;\n  grid-template-columns: minmax(250px, 1fr) 3fr;\n  gap: 1rem;\n}\n\n/* Responsive Stack */\n.responsive-stack {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n@media (min-width: 768px) {\n  .responsive-stack {\n    flex-direction: row;\n  }\n}\n```\n\n**Decision Matrix:**\n\n| Layout Need | Use Grid | Use Flexbox |\n|-------------|----------|-------------|\n| 2D Layout (rows + columns) | ✅ | ❌ |\n| 1D Layout (single direction) | ❌ | ✅ |\n| Page-level structure | ✅ | ❌ |\n| Component-level alignment | ❌ | ✅ |\n| Unknown number of items | ❌ | ✅ |\n| Complex overlapping | ✅ | ❌ |\n| Simple content distribution | ❌ | ✅ |\n| Responsive by default | ✅ | ⚠️ |\n\n**Performance Considerations:**\n- Grid: Better for complex layouts, may have more reflow\n- Flexbox: Lighter for simple layouts, efficient for dynamic content\n- Both: Hardware accelerated, good performance\n- Use `will-change` sparingly for animations\n\n**Modern best practices:**\n- Use Grid for page structure\n- Use Flexbox for components\n- Combine both for optimal layouts\n- Consider container queries for responsive components\n- Use logical properties for internationalization",
        "difficulty": "Hard",
        "category": "CSS Layout",
        "type": "CSS",
        "tags": [
            "CSS",
            "Grid",
            "Flexbox",
            "Layout",
            "Modern CSS",
            "Responsive Design"
        ]
    },
    {
        "id": 76,
        "question": "What's the difference between `transform: translate()` and absolute positioning for moving elements? Which is more performant?",
        "solution": "`transform: translate()` is significantly more performant than absolute positioning for animations and element movement.\n\n**Performance Differences:**\n\n**`transform: translate()` (GPU-accelerated):**\n- Handled by the GPU (Graphics Processing Unit)\n- Does NOT trigger layout/reflow or repaint\n- Moves element in its own layer\n- Ideal for animations\n\n**Absolute positioning (CPU-bound):**\n- Handled by the CPU\n- Triggers layout recalculation (reflow)\n- Can cause other elements to reposition\n- More expensive for animations\n\n```css\n/* High performance - GPU accelerated */\n.transform-move {\n  transform: translateX(100px);\n  transition: transform 0.3s ease;\n}\n\n.transform-move:hover {\n  transform: translateX(200px);\n}\n\n/* Lower performance - triggers reflow */\n.position-move {\n  position: relative;\n  left: 100px;\n  transition: left 0.3s ease;\n}\n\n.position-move:hover {\n  left: 200px;\n}\n\n/* Best practice for smooth animations */\n.smooth-animation {\n  will-change: transform; /* Hints browser to optimize */\n  transform: translate3d(0, 0, 0); /* Force GPU layer */\n}\n```\n\n**Use Cases:**\n- **Transform**: Animations, hover effects, smooth transitions\n- **Positioning**: Static layouts, document flow changes\n\n**Key Rule**: Use `transform` for movement animations, `position` for layout structure.",
        "difficulty": "Medium",
        "category": "CSS Performance",
        "type": "CSS",
        "tags": [
            "CSS",
            "Transform",
            "Position",
            "Performance",
            "GPU",
            "Animation"
        ]
    },
    {
        "id": 77,
        "question": "Does one stylesheet block another from downloading? How do browsers handle multiple CSS files?",
        "solution": "**No, stylesheets do NOT block each other from downloading.** Browsers download multiple CSS files in parallel, but they are processed sequentially and can block rendering.\n\n**How Browser Handles CSS:**\n\n**1. Parallel Download:**\n```html\n<!-- These download simultaneously */\n<link rel=\"stylesheet\" href=\"style1.css\">\n<link rel=\"stylesheet\" href=\"style2.css\">\n<link rel=\"stylesheet\" href=\"style3.css\">\n```\n\n**2. Sequential Processing:**\n- Files are applied in the order they appear in HTML\n- Later stylesheets can override earlier ones\n- All CSS must be parsed before rendering begins\n\n**3. Render Blocking:**\n```html\n<!-- Blocks rendering until all CSS is loaded */\n<head>\n  <link rel=\"stylesheet\" href=\"large-file.css\">\n  <link rel=\"stylesheet\" href=\"small-file.css\">\n</head>\n<!-- Page won't render until both files are ready */\n```\n\n**Optimization Techniques:**\n```html\n<!-- Critical CSS inline for faster rendering */\n<style>\n  /* Critical above-the-fold styles */\n  body { font-family: Arial; }\n  .header { background: #333; }\n</style>\n\n<!-- Non-critical CSS loaded asynchronously */\n<link rel=\"preload\" href=\"non-critical.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n\n<!-- Media queries for conditional loading */\n<link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\n<link rel=\"stylesheet\" href=\"mobile.css\" media=\"(max-width: 768px)\">\n```\n\n**Best Practices:**\n- Minimize CSS files (combine when possible)\n- Load critical CSS inline\n- Use `preload` for important stylesheets\n- Consider conditional loading with media queries",
        "difficulty": "Medium",
        "category": "CSS Loading",
        "type": "CSS",
        "tags": [
            "CSS",
            "Performance",
            "Loading",
            "Render Blocking",
            "Optimization"
        ]
    },
    {
        "id": 78,
        "question": "What is Feature Detection in CSS? How do you use `@supports` to provide fallbacks for newer CSS features?",
        "solution": "**Feature Detection** in CSS uses the `@supports` rule to test if a browser supports specific CSS properties before applying styles. This enables progressive enhancement and graceful fallbacks.\n\n**Basic Syntax:**\n```css\n@supports (property: value) {\n  /* Styles applied if feature is supported */\n}\n\n@supports not (property: value) {\n  /* Fallback styles for unsupported features */\n}\n```\n\n**Practical Examples:**\n\n**1. CSS Grid with Flexbox Fallback:**\n```css\n/* Default flexbox layout */\n.container {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n/* Grid layout for supporting browsers */\n@supports (display: grid) {\n  .container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n  }\n}\n```\n\n**2. CSS Custom Properties Fallback:**\n```css\n.element {\n  color: blue; /* Fallback */\n}\n\n@supports (--css: variables) {\n  .element {\n    --primary-color: #007bff;\n    color: var(--primary-color);\n  }\n}\n```\n\n**3. Complex Feature Detection:**\n```css\n/* Multiple conditions with logical operators */\n@supports (display: flex) and (gap: 20px) {\n  .flex-container {\n    display: flex;\n    gap: 20px; /* Modern flexbox gap property */\n  }\n}\n\n@supports not ((display: flex) and (gap: 20px)) {\n  .flex-container {\n    display: flex;\n  }\n  \n  .flex-container > * {\n    margin-right: 20px; /* Manual spacing fallback */\n  }\n}\n```\n\n**4. Modern CSS Features:**\n```css\n/* Container queries fallback */\n@supports not (container-type: inline-size) {\n  .card {\n    width: 100%;\n  }\n  \n  @media (min-width: 768px) {\n    .card {\n      width: 50%;\n    }\n  }\n}\n\n@supports (container-type: inline-size) {\n  .container {\n    container-type: inline-size;\n  }\n  \n  @container (min-width: 400px) {\n    .card {\n      width: 50%;\n    }\n  }\n}\n```\n\n**Best Practices:**\n- Always provide fallbacks for newer features\n- Test with older browsers that don't support `@supports`\n- Use progressive enhancement approach\n- Combine with JavaScript feature detection when needed",
        "difficulty": "Medium",
        "category": "CSS Feature Detection",
        "type": "CSS",
        "tags": [
            "CSS",
            "@supports",
            "Feature Detection",
            "Progressive Enhancement",
            "Fallbacks"
        ]
    }
]